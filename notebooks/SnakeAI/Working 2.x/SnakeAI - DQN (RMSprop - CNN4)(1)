{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"SnakeAI - DQN (RMSprop - CNN4)","provenance":[],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"J7tURWxCmJHG"},"source":["SnakeAI\n","================="]},{"cell_type":"markdown","metadata":{"id":"fRsGcv_InURF"},"source":["### A snake game with human and AI players (DQN, ACER). Who wins? 游꿤\n","\n","This is the notebook for the repository [SnakeAI](https://github.com/Neves4/SnakeAI), in which you could test the execution with GPU/CPU in Keras for a DQN model playing the snake game. \n","\n","Let's begin!"]},{"cell_type":"markdown","metadata":{"id":"QCus5J_6muj5"},"source":["Table of contents\n","=================\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"zkdghiysnQwn"},"source":["[1. The game](#the-game)"]},{"cell_type":"markdown","metadata":{"id":"l3kYGkQ0ncwi"},"source":["## 1. The game <a name=\"the-game\"></a>\n"]},{"cell_type":"markdown","metadata":{"id":"XrkKfTsopKc1"},"source":["### 1.1 Imports <a name=\"the-game-imports\"></a>"]},{"cell_type":"code","metadata":{"id":"MrlX6WDSpNAQ","executionInfo":{"status":"ok","timestamp":1613495334145,"user_tz":180,"elapsed":738,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["import sys  # To close the window when the game is over\n","from array import array  # Efficient numeric arrays\n","from os import environ, path  # To center the game window the best possible\n","import random  # Random numbers used for the food\n","import logging  # Logging function for movements and errors\n","import json # For file handling (leaderboards)\n","from itertools import tee  # For the color gradient on snake\n","\n","import numpy as np # Used in calculations and math"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QME8kfJ1pa-k"},"source":["### 1.2 Global variables <a name=\"the-game-global-var\"></a>"]},{"cell_type":"code","metadata":{"id":"EvYx0zAupYcB","executionInfo":{"status":"ok","timestamp":1613495335380,"user_tz":180,"elapsed":1948,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["# Actions, options and forbidden moves\n","OPTIONS = {'QUIT': 0,\n","           'PLAY': 1,\n","           'BENCHMARK': 2,\n","           'LEADERBOARDS': 3,\n","           'MENU': 4,\n","           'ADD_TO_LEADERBOARDS': 5}\n","RELATIVE_ACTIONS = {'LEFT': 0,\n","                    'FORWARD': 1,\n","                    'RIGHT': 2}\n","ABSOLUTE_ACTIONS = {'LEFT': 0,\n","                    'RIGHT': 1,\n","                    'UP': 2,\n","                    'DOWN': 3,\n","                    'IDLE': 4}\n","FORBIDDEN_MOVES = [(0, 1), (1, 0), (2, 3), (3, 2)]\n","\n","# Possible rewards in the game\n","REWARDS = {'MOVE': -0.005,\n","           'GAME_OVER': -1,\n","           'SCORED': 1}\n","\n","# Types of point in the board\n","POINT_TYPE = {'EMPTY': 0,\n","              'FOOD': 1,\n","              'BODY': 2,\n","              'HEAD': 3,\n","              'DANGEROUS': 4}\n","\n","# Speed levels possible to human players. MEGA HARDCORE starts with MEDIUM and\n","# increases with snake size\n","LEVELS = [\" EASY \", \" MEDIUM \", \" HARD \", \" MEGA HARDCORE \"]\n","SPEEDS = {'EASY': 80,\n","          'MEDIUM': 60,\n","          'HARD': 40,\n","          'MEGA_HARDCORE': 65}\n","\n","# Set the constant FPS limit for the game. Smoothness depend on this.\n","GAME_FPS = 100\n","\n","\n","class GlobalVariables:\n","    \"\"\"Global variables to be used while drawing and moving the snake game.\n","\n","    Attributes\n","    ----------\n","    board_size: int, optional, default = 30\n","        The size of the board.\n","    block_size: int, optional, default = 20\n","        The size in pixels of a block.\n","    head_color: tuple of 3 * int, optional, default = (42, 42, 42)\n","        Color of the head. Start of the body color gradient.\n","    tail_color: tuple of 3 * int, optional, default = (152, 152, 152)\n","        Color of the tail. End of the body color gradient.\n","    food_color: tuple of 3 * int, optional, default = (200, 0, 0)\n","        Color of the food.\n","    game_speed: int, optional, default = 10\n","        Speed in ticks of the game. The higher the faster.\n","    benchmark: int, optional, default = 10\n","        Ammount of matches to benchmark and possibly go to leaderboards.\n","    \"\"\"\n","    def __init__(self, board_size = 30, block_size = 20,\n","                 head_color = (42, 42, 42), tail_color = (152, 152, 152),\n","                 food_color = (200, 0, 0), game_speed = 80, benchmark = 10):\n","        \"\"\"Initialize all global variables. Updated with argument_handler.\"\"\"\n","        self.board_size = board_size\n","        self.block_size = block_size\n","        self.head_color = head_color\n","        self.tail_color = tail_color\n","        self.food_color = food_color\n","        self.game_speed = game_speed\n","        self.benchmark = benchmark\n","\n","        if self.board_size > 50: # Warn the user about performance\n","            LOGGER.warning('WARNING: BOARD IS TOO BIG, IT MAY RUN SLOWER.')\n","\n","    @property\n","    def canvas_size(self):\n","        \"\"\"Canvas size is updated with board_size and block_size.\"\"\"\n","        return self.board_size * self.block_size\n","    \n","VAR = GlobalVariables() # Initializing GlobalVariables\n","LOGGER = logging.getLogger(__name__) # Setting logger    "],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6nmwGMWtqBpV"},"source":["### 1.3 The snake <a name=\"the-game-the-snake\"></a>"]},{"cell_type":"code","metadata":{"id":"UFlv3bhurX4i","executionInfo":{"status":"ok","timestamp":1613495335381,"user_tz":180,"elapsed":1930,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["class Snake:\n","    \"\"\"Player (snake) class which initializes head, body and board.\n","\n","    The body attribute represents a list of positions of the body, which are in-\n","    cremented when moving/eating on the position [0]. The orientation represents\n","    where the snake is looking at (head) and collisions happen when any element\n","    is superposed with the head.\n","\n","    Attributes\n","    ----------\n","    head: list of 2 * int, default = [board_size / 4, board_size / 4]\n","        The head of the snake, located according to the board size.\n","    body: list of lists of 2 * int\n","        Starts with 3 parts and grows when food is eaten.\n","    previous_action: int, default = 1\n","        Last action which the snake took.\n","    length: int, default = 3\n","        Variable length of the snake, can increase when food is eaten.\n","    \"\"\"\n","    def __init__(self):\n","        \"\"\"Inits Snake with 3 body parts (one is the head) and pointing right\"\"\"\n","        self.head = [int(VAR.board_size / 4), int(VAR.board_size / 4)]\n","        self.body = [[self.head[0], self.head[1]],\n","                     [self.head[0] - 1, self.head[1]],\n","                     [self.head[0] - 2, self.head[1]]]\n","        self.previous_action = 1\n","        self.length = 3\n","\n","    def is_movement_invalid(self, action):\n","        \"\"\"Check if the movement is invalid, according to FORBIDDEN_MOVES.\"\"\"\n","        valid = False\n","\n","        if (action, self.previous_action) in FORBIDDEN_MOVES:\n","            valid = True\n","\n","        return valid\n","\n","    def move(self, action, food_pos):\n","        \"\"\"According to orientation, move 1 block. If the head is not positioned\n","        on food, pop a body part. Else, return without popping.\n","\n","        Return\n","        ----------\n","        ate_food: boolean\n","            Flag which represents whether the snake ate or not food.\n","        \"\"\"\n","        ate_food = False\n","\n","        if (action == ABSOLUTE_ACTIONS['IDLE'] or\n","            self.is_movement_invalid(action)):\n","            action = self.previous_action\n","        else:\n","            self.previous_action = action\n","\n","        if action == ABSOLUTE_ACTIONS['LEFT']:\n","            self.head[0] -= 1\n","        elif action == ABSOLUTE_ACTIONS['RIGHT']:\n","            self.head[0] += 1\n","        elif action == ABSOLUTE_ACTIONS['UP']:\n","            self.head[1] -= 1\n","        elif action == ABSOLUTE_ACTIONS['DOWN']:\n","            self.head[1] += 1\n","\n","        self.body.insert(0, list(self.head))\n","\n","        if self.head == food_pos:\n","            LOGGER.info('EVENT: FOOD EATEN')\n","            self.length = len(self.body)\n","\n","            ate_food = True\n","        else:\n","            self.body.pop()\n","\n","        return ate_food\n"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"okHW9gUdrYzb"},"source":["### 1.4 The game <a name=\"the-game-the-game\"></a>"]},{"cell_type":"code","metadata":{"id":"9buEp2SJnu8y","executionInfo":{"status":"ok","timestamp":1613495337326,"user_tz":180,"elapsed":3850,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["class TextBlock:\n","    \"\"\"Block of text class, used by pygame. Can be used to both text and menu.\n","\n","    Attributes:\n","    ----------\n","    text: string\n","        The text to be displayed.\n","    pos: tuple of 2 * int\n","        Color of the tail. End of the body color gradient.\n","    screen: pygame window object\n","        The screen where the text is drawn.\n","    scale: int, optional, default = 1 / 12\n","        Adaptive scale to resize if the board size changes.\n","    type: string, optional, default = \"text\"\n","        Assert whether the BlockText is a text or menu option.\n","    \"\"\"\n","    def __init__(self, text, pos, screen, scale = (1 / 12), block_type = \"text\"):\n","        \"\"\"Initialize, set position of the rectangle and render the text block.\"\"\"\n","        self.block_type = block_type\n","        self.hovered = False\n","        self.text = text\n","        self.pos = pos\n","        self.screen = screen\n","        self.scale = scale\n","        self.set_rect()\n","        self.draw()\n","\n","    def draw(self):\n","        \"\"\"Set what to render and blit on the pygame screen.\"\"\"\n","        self.set_rend()\n","        self.screen.blit(self.rend, self.rect)\n","\n","    def set_rend(self):\n","        \"\"\"Set what to render (font, colors, sizes)\"\"\"\n","        font = pygame.font.Font(resource_path(\"resources/fonts/freesansbold.ttf\"),\n","                                int((VAR.canvas_size) * self.scale))\n","        self.rend = font.render(self.text, True, self.get_color(),\n","                                self.get_background())\n","\n","    def get_color(self):\n","        \"\"\"Get color to render for text and menu (hovered or not).\n","\n","        Return\n","        ----------\n","        color: tuple of 3 * int\n","            The color that will be rendered for the text block.\n","        \"\"\"\n","        color = pygame.Color(42, 42, 42)\n","\n","        if self.block_type == \"menu\" and not self.hovered:\n","                color = pygame.Color(152, 152, 152)\n","\n","        return color\n","\n","    def get_background(self):\n","        \"\"\"Get background color to render for text (hovered or not) and menu.\n","\n","        Return\n","        ----------\n","        color: tuple of 3 * int\n","            The color that will be rendered for the background of the text block.\n","        \"\"\"\n","        color = None\n","\n","        if self.block_type == \"menu\" and self.hovered:\n","            color = pygame.Color(152, 152, 152)\n","\n","        return color\n","\n","    def set_rect(self):\n","        \"\"\"Set the rectangle and it's position to draw on the screen.\"\"\"\n","        self.set_rend()\n","        self.rect = self.rend.get_rect()\n","        self.rect.center = self.pos\n","\n","        \n","class FoodGenerator:\n","    \"\"\"Generate and keep track of food.\n","\n","    Attributes\n","    ----------\n","    pos:\n","        Current position of food.\n","    is_food_on_screen:\n","        Flag for existence of food.\n","    \"\"\"\n","    def __init__(self, body):\n","        \"\"\"Initialize a food piece and set existence flag.\"\"\"\n","        self.is_food_on_screen = False\n","        self.pos = self.generate_food(body)\n","\n","    def generate_food(self, body):\n","        \"\"\"Generate food and verify if it's on a valid place.\n","\n","        Return\n","        ----------\n","        pos: tuple of 2 * int\n","            Position of the food that was generated. It can't be in the body.\n","        \"\"\"\n","        if not self.is_food_on_screen:\n","            while True:\n","                food = [int((VAR.board_size - 1) * random.random()),\n","                        int((VAR.board_size - 1) * random.random())]\n","\n","                if food in body:\n","                    continue\n","                else:\n","                    self.pos = food\n","                    break\n","\n","            LOGGER.info('EVENT: FOOD APPEARED')\n","            self.is_food_on_screen = True\n","\n","        return self.pos\n","\n","\n","class Game:\n","    \"\"\"Hold the game window and functions.\n","\n","    Attributes\n","    ----------\n","    window: pygame display\n","        Pygame window to show the game.\n","    fps: pygame time clock\n","        Define Clock and ticks in which the game will be displayed.\n","    snake: object\n","        The actual snake who is going to be played.\n","    food_generator: object\n","        Generator of food which responds to the snake.\n","    food_pos: tuple of 2 * int\n","        Position of the food on the board.\n","    game_over: boolean\n","        Flag for game_over.\n","    player: string\n","        Define if human or robots are playing the game.\n","    board_size: int, optional, default = 30\n","        The size of the board.\n","    local_state: boolean, optional, default = False\n","        Whether to use or not game expertise (used mostly by robots players).\n","    relative_pos: boolean, optional, default = False\n","        Whether to use or not relative position of the snake head. Instead of\n","        actions, use relative_actions.\n","    screen_rect: tuple of 2 * int\n","        The screen rectangle, used to draw relatively positioned blocks.\n","    \"\"\"\n","    def __init__(self, player, board_size = 30, local_state = False, relative_pos = False):\n","        \"\"\"Initialize window, fps and score. Change nb_actions if relative_pos\"\"\"\n","        VAR.board_size = board_size\n","        self.local_state = local_state\n","        self.relative_pos = relative_pos\n","        self.player = player\n","\n","        if player == \"ROBOT\":\n","            if self.relative_pos:\n","                self.nb_actions = 3\n","            else:\n","                self.nb_actions = 5\n","\n","            self.reset_game()\n","\n","    def reset_game(self):\n","        \"\"\"Reset the game environment.\"\"\"\n","        self.step = 0\n","        self.snake = Snake()\n","        self.food_generator = FoodGenerator(self.snake.body)\n","        self.food_pos = self.food_generator.pos\n","        self.scored = False\n","        self.game_over = False\n","\n","    def create_window(self):\n","        \"\"\"Create a pygame display with board_size * block_size dimension.\"\"\"\n","        pygame.init()\n","        flags = pygame.DOUBLEBUF | pygame.HWSURFACE\n","        self.window = pygame.display.set_mode((VAR.canvas_size, VAR.canvas_size),\n","                                              flags)\n","        self.window.set_alpha(None)\n","\n","        self.screen_rect = self.window.get_rect()\n","        self.fps = pygame.time.Clock()\n","\n","    def cycle_menu(self, menu_options, list_menu, dictionary, img = None,\n","                   img_rect = None):\n","        \"\"\"Cycle through a given menu, waiting for an option to be clicked.\"\"\"\n","        selected = False\n","        selected_option = None\n","\n","        while not selected:\n","            pygame.event.pump()\n","            events = pygame.event.get()\n","\n","            self.window.fill(pygame.Color(225, 225, 225))\n","\n","            for i, option in enumerate(menu_options):\n","                if option is not None:\n","                    option.draw()\n","                    option.hovered = False\n","\n","                    if option.rect.collidepoint(pygame.mouse.get_pos()):\n","                        option.hovered = True\n","\n","                        for event in events:\n","                            if event.type == pygame.MOUSEBUTTONUP:\n","                                selected_option = dictionary[list_menu[i]]\n","\n","            if selected_option is not None:\n","                selected = True\n","            if img is not None:\n","                self.window.blit(img, img_rect.bottomleft)\n","\n","            pygame.display.update()\n","\n","        return selected_option\n","\n","    def cycle_matches(self, n_matches, mega_hardcore = False):\n","        \"\"\"Cycle through matches until the end.\"\"\"\n","        score = array('i')\n","\n","        for _ in range(n_matches):\n","            self.reset_game()\n","            self.start_match(wait = 3)\n","            score.append(self.single_player(mega_hardcore))\n","\n","        return score\n","\n","    def menu(self):\n","        \"\"\"Main menu of the game.\n","\n","        Return\n","        ----------\n","        selected_option: int\n","            The selected option in the main loop.\n","        \"\"\"\n","        pygame.display.set_caption(\"SNAKE GAME  | PLAY NOW!\")\n","\n","        img = pygame.image.load(resource_path(\"resources/images\" +\n","                                              \"/snake_logo.png\")).convert()\n","        img = pygame.transform.scale(img, (VAR.canvas_size,\n","                                           int(VAR.canvas_size / 3)))\n","        img_rect = img.get_rect()\n","        img_rect.center = self.screen_rect.center\n","        list_menu = ['PLAY', 'BENCHMARK', 'LEADERBOARDS', 'QUIT']\n","        menu_options = [TextBlock(' PLAY GAME ',\n","                                  (self.screen_rect.centerx,\n","                                   4 * self.screen_rect.centery / 10),\n","                                  self.window, (1 / 12), \"menu\"),\n","                        TextBlock(' BENCHMARK ',\n","                                  (self.screen_rect.centerx,\n","                                   6 * self.screen_rect.centery / 10),\n","                                  self.window, (1 / 12), \"menu\"),\n","                        TextBlock(' LEADERBOARDS ',\n","                                  (self.screen_rect.centerx,\n","                                   8 * self.screen_rect.centery / 10),\n","                                  self.window, (1 / 12), \"menu\"),\n","                        TextBlock(' QUIT ',\n","                                  (self.screen_rect.centerx,\n","                                   10 * self.screen_rect.centery / 10),\n","                                  self.window, (1 / 12), \"menu\")]\n","        selected_option = self.cycle_menu(menu_options, list_menu, OPTIONS,\n","                                          img, img_rect)\n","\n","        return selected_option\n","\n","    def start_match(self, wait):\n","        \"\"\"Create some wait time before the actual drawing of the game.\"\"\"\n","        for i in range(wait):\n","            time = str(wait - i)\n","            self.window.fill(pygame.Color(225, 225, 225))\n","\n","            # Game starts in 3, 2, 1\n","            text = [TextBlock('Game starts in',\n","                              (self.screen_rect.centerx,\n","                               4 * self.screen_rect.centery / 10),\n","                              self.window, (1 / 10), \"text\"),\n","                    TextBlock(time, (self.screen_rect.centerx,\n","                                     12 * self.screen_rect.centery / 10),\n","                              self.window, (1 / 1.5), \"text\")]\n","\n","            for text_block in text:\n","                text_block.draw()\n","\n","            pygame.display.update()\n","            pygame.display.set_caption(\"SNAKE GAME  |  Game starts in \"\n","                                       + time + \" second(s) ...\")\n","            pygame.time.wait(1000)\n","\n","        LOGGER.info('EVENT: GAME START')\n","\n","    def start(self):\n","        \"\"\"Use menu to select the option/game mode.\"\"\"\n","        opt = self.menu()\n","\n","        while True:\n","            if opt == OPTIONS['QUIT']:\n","                pygame.quit()\n","                sys.exit()\n","            elif opt == OPTIONS['PLAY']:\n","                VAR.game_speed, mega_hardcore = self.select_speed()\n","                score = self.cycle_matches(n_matches = 1,\n","                                           mega_hardcore = mega_hardcore)\n","                opt = self.over(score)\n","            elif opt == OPTIONS['BENCHMARK']:\n","                VAR.game_speed, mega_hardcore = self.select_speed()\n","                score = self.cycle_matches(n_matches = VAR.benchmark,\n","                                           mega_hardcore = mega_hardcore)\n","                opt = self.over(score)\n","            elif opt == OPTIONS['LEADERBOARDS']:\n","                self.view_leaderboards()\n","            elif opt == OPTIONS['MENU']:\n","                opt = self.menu()\n","            if opt == OPTIONS['ADD_TO_LEADERBOARDS']:\n","                self.add_to_leaderboards(score, None) # Gotta improve this logic.\n","                self.view_leaderboards()\n","\n","    def over(self, score):\n","        \"\"\"If collision with wall or body, end the game and open options.\n","\n","        Return\n","        ----------\n","        selected_option: int\n","            The selected option in the main loop.\n","        \"\"\"\n","        score_option = None\n","\n","        if len(score) == VAR.benchmark:\n","            score_option = TextBlock(' ADD TO LEADERBOARDS ',\n","                                     (self.screen_rect.centerx,\n","                                      8 * self.screen_rect.centery / 10),\n","                                     self.window, (1 / 15), \"menu\")\n","\n","        text_score = 'SCORE: ' + str(int(np.mean(score)))\n","        list_menu = ['PLAY', 'MENU', 'ADD_TO_LEADERBOARDS', 'QUIT']\n","        menu_options = [TextBlock(' PLAY AGAIN ', (self.screen_rect.centerx,\n","                                                   4 * self.screen_rect.centery / 10),\n","                                  self.window, (1 / 15), \"menu\"),\n","                        TextBlock(' GO TO MENU ', (self.screen_rect.centerx,\n","                                                   6 * self.screen_rect.centery / 10),\n","                                  self.window, (1 / 15), \"menu\"),\n","                        score_option,\n","                        TextBlock(' QUIT ', (self.screen_rect.centerx,\n","                                             10 * self.screen_rect.centery / 10),\n","                                  self.window, (1 / 15), \"menu\"),\n","                        TextBlock(text_score, (self.screen_rect.centerx,\n","                                               15 * self.screen_rect.centery / 10),\n","                                  self.window, (1 / 10), \"text\")]\n","        pygame.display.set_caption(\"SNAKE GAME  | \" + text_score\n","                                   + \"  |  GAME OVER...\")\n","        LOGGER.info('EVENT: GAME OVER | FINAL %s', text_score)\n","        selected_option = self.cycle_menu(menu_options, list_menu, OPTIONS)\n","\n","        return selected_option\n","\n","    def select_speed(self):\n","        \"\"\"Speed menu, right before calling start_match.\n","\n","        Return\n","        ----------\n","        speed: int\n","            The selected speed in the main loop.\n","        \"\"\"\n","        list_menu = ['EASY', 'MEDIUM', 'HARD', 'MEGA_HARDCORE']\n","        menu_options = [TextBlock(LEVELS[0], (self.screen_rect.centerx,\n","                                              4 * self.screen_rect.centery / 10),\n","                                  self.window, (1 / 10), \"menu\"),\n","                        TextBlock(LEVELS[1], (self.screen_rect.centerx,\n","                                              8 * self.screen_rect.centery / 10),\n","                                  self.window, (1 / 10), \"menu\"),\n","                        TextBlock(LEVELS[2], (self.screen_rect.centerx,\n","                                              12 * self.screen_rect.centery / 10),\n","                                  self.window, (1 / 10), \"menu\"),\n","                        TextBlock(LEVELS[3], (self.screen_rect.centerx,\n","                                              16 * self.screen_rect.centery / 10),\n","                                  self.window, (1 / 10), \"menu\")]\n","\n","        speed = self.cycle_menu(menu_options, list_menu, SPEEDS)\n","        mega_hardcore = False\n","\n","        if speed == SPEEDS['MEGA_HARDCORE']:\n","            mega_hardcore = True\n","\n","        return speed, mega_hardcore\n","\n","    def single_player(self, mega_hardcore = False):\n","        \"\"\"Game loop for single_player (HUMANS).\n","\n","        Return\n","        ----------\n","        score: int\n","            The final score for the match (discounted of initial length).\n","        \"\"\"\n","        # The main loop, it pump key_presses and update the board every tick.\n","        previous_size = self.snake.length # Initial size of the snake\n","        current_size = previous_size # Initial size\n","        color_list = self.gradient([(42, 42, 42), (152, 152, 152)],\n","                                   previous_size)\n","\n","        # Main loop, where snakes moves after elapsed time is bigger than the\n","        # move_wait time. The last_key pressed is recorded to make the game more\n","        # smooth for human players.\n","        elapsed = 0\n","        last_key = self.snake.previous_action\n","        move_wait = VAR.game_speed\n","\n","        while not self.game_over:\n","            elapsed += self.fps.get_time()  # Get elapsed time since last call.\n","\n","            if mega_hardcore:  # Progressive speed increments, the hardest.\n","                move_wait = VAR.game_speed - (2 * (self.snake.length - 3))\n","\n","            key_input = self.handle_input()  # Receive inputs with tick.\n","            invalid_key = self.snake.is_movement_invalid(key_input)\n","\n","            if key_input is not None and not invalid_key:\n","                last_key = key_input\n","\n","            if elapsed >= move_wait:  # Move and redraw\n","                elapsed = 0\n","                self.play(last_key)\n","                current_size = self.snake.length  # Update the body size\n","\n","                if current_size > previous_size:\n","                    color_list = self.gradient([(42, 42, 42), (152, 152, 152)],\n","                                               current_size)\n","\n","                    previous_size = current_size\n","\n","                self.draw(color_list)\n","\n","            pygame.display.update()\n","            self.fps.tick(GAME_FPS)  # Limit FPS to 100\n","\n","        score = current_size - 3  # After the game is over, record score\n","\n","        return score\n","\n","    def check_collision(self):\n","        \"\"\"Check wether any collisions happened with the wall or body.\n","\n","        Return\n","        ----------\n","        collided: boolean\n","            Whether the snake collided or not.\n","        \"\"\"\n","        collided = False\n","\n","        if self.snake.head[0] > (VAR.board_size - 1) or self.snake.head[0] < 0:\n","            LOGGER.info('EVENT: WALL COLLISION')\n","            collided = True\n","        elif self.snake.head[1] > (VAR.board_size - 1) or self.snake.head[1] < 0:\n","            LOGGER.info('EVENT: WALL COLLISION')\n","            collided = True\n","        elif self.snake.head in self.snake.body[1:]:\n","            LOGGER.info('EVENT: BODY COLLISION')\n","            collided = True\n","\n","        return collided\n","\n","    def is_won(self):\n","        \"\"\"Verify if the score is greater than 0.\n","\n","        Return\n","        ----------\n","        won: boolean\n","            Whether the score is greater than 0.\n","        \"\"\"\n","        return self.snake.length > 3\n","\n","    def generate_food(self):\n","        \"\"\"Generate new food if needed.\n","\n","        Return\n","        ----------\n","        food_pos: tuple of 2 * int\n","            Current position of the food.\n","        \"\"\"\n","        food_pos = self.food_generator.generate_food(self.snake.body)\n","\n","        return food_pos\n","\n","    def handle_input(self):\n","        \"\"\"After getting current pressed keys, handle important cases.\n","\n","        Return\n","        ----------\n","        action: int\n","            Handle human input to assess the next action.\n","        \"\"\"\n","        pygame.event.set_allowed([pygame.QUIT, pygame.KEYDOWN])\n","        keys = pygame.key.get_pressed()\n","        pygame.event.pump()\n","        action = None\n","\n","        if keys[pygame.K_ESCAPE] or keys[pygame.K_q]:\n","            LOGGER.info('ACTION: KEY PRESSED: ESCAPE or Q')\n","            self.over(self.snake.length - 3)\n","        elif keys[pygame.K_LEFT]:\n","            LOGGER.info('ACTION: KEY PRESSED: LEFT')\n","            action = ABSOLUTE_ACTIONS['LEFT']\n","        elif keys[pygame.K_RIGHT]:\n","            LOGGER.info('ACTION: KEY PRESSED: RIGHT')\n","            action = ABSOLUTE_ACTIONS['RIGHT']\n","        elif keys[pygame.K_UP]:\n","            LOGGER.info('ACTION: KEY PRESSED: UP')\n","            action = ABSOLUTE_ACTIONS['UP']\n","        elif keys[pygame.K_DOWN]:\n","            LOGGER.info('ACTION: KEY PRESSED: DOWN')\n","            action = ABSOLUTE_ACTIONS['DOWN']\n","\n","        return action\n","\n","    def state(self):\n","        \"\"\"Create a matrix of the current state of the game.\n","\n","        Return\n","        ----------\n","        canvas: np.array of size board_size**2\n","            Return the current state of the game in a matrix.\n","        \"\"\"\n","        canvas = np.zeros((VAR.board_size, VAR.board_size))\n","\n","        if self.game_over:\n","            pass\n","        else:\n","            body = self.snake.body\n","\n","            for part in body:\n","                canvas[part[0], part[1]] = POINT_TYPE['BODY']\n","\n","            canvas[body[0][0], body[0][1]] = POINT_TYPE['HEAD']\n","\n","            if self.local_state:\n","                canvas = self.eval_local_safety(canvas, body)\n","\n","            canvas[self.food_pos[0], self.food_pos[1]] = POINT_TYPE['FOOD']\n","\n","        return canvas\n","\n","    def relative_to_absolute(self, action):\n","        \"\"\"Translate relative actions to absolute.\n","\n","        Return\n","        ----------\n","        action: int\n","            Translated action from relative to absolute.\n","        \"\"\"\n","        if action == RELATIVE_ACTIONS['FORWARD']:\n","            action = self.snake.previous_action\n","        elif action == RELATIVE_ACTIONS['LEFT']:\n","            if self.snake.previous_action == ABSOLUTE_ACTIONS['LEFT']:\n","                action = ABSOLUTE_ACTIONS['DOWN']\n","            elif self.snake.previous_action == ABSOLUTE_ACTIONS['RIGHT']:\n","                action = ABSOLUTE_ACTIONS['UP']\n","            elif self.snake.previous_action == ABSOLUTE_ACTIONS['UP']:\n","                action = ABSOLUTE_ACTIONS['LEFT']\n","            else:\n","                action = ABSOLUTE_ACTIONS['RIGHT']\n","        else:\n","            if self.snake.previous_action == ABSOLUTE_ACTIONS['LEFT']:\n","                action = ABSOLUTE_ACTIONS['UP']\n","            elif self.snake.previous_action == ABSOLUTE_ACTIONS['RIGHT']:\n","                action = ABSOLUTE_ACTIONS['DOWN']\n","            elif self.snake.previous_action == ABSOLUTE_ACTIONS['UP']:\n","                action = ABSOLUTE_ACTIONS['RIGHT']\n","            else:\n","                action = ABSOLUTE_ACTIONS['LEFT']\n","\n","        return action\n","\n","    def play(self, action):\n","        \"\"\"Move the snake to the direction, eat and check collision.\"\"\"\n","        self.scored = False\n","        self.step += 1\n","        self.food_pos = self.generate_food()\n","\n","        if self.relative_pos:\n","            action = self.relative_to_absolute(action)\n","\n","        if self.snake.move(action, self.food_pos):\n","            self.scored = True\n","            self.food_generator.is_food_on_screen = False\n","\n","        if self.player == \"HUMAN\":\n","            if self.check_collision():\n","                self.game_over = True\n","        elif self.check_collision() or self.step > 50 * self.snake.length:\n","            self.game_over = True\n","\n","    def get_reward(self):\n","        \"\"\"Return the current reward. Can be used as the reward function.\n","\n","        Return\n","        ----------\n","        reward: float\n","            Current reward of the game.\n","        \"\"\"\n","        reward = REWARDS['MOVE']\n","\n","        if self.game_over:\n","            reward = REWARDS['GAME_OVER']\n","        elif self.scored:\n","            reward = self.snake.length\n","\n","        return reward\n","\n","    def draw(self, color_list):\n","        \"\"\"Draw the game, the snake and the food using pygame.\"\"\"\n","        self.window.fill(pygame.Color(225, 225, 225))\n","\n","        for part, color in zip(self.snake.body, color_list):\n","            pygame.draw.rect(self.window, color, pygame.Rect((part[0] *\n","                        VAR.block_size), part[1] * VAR.block_size,\n","                        VAR.block_size, VAR.block_size))\n","\n","        pygame.draw.rect(self.window, VAR.food_color,\n","                         pygame.Rect(self.food_pos[0] * VAR.block_size,\n","                         self.food_pos[1] * VAR.block_size, VAR.block_size,\n","                         VAR.block_size))\n","\n","        pygame.display.set_caption(\"SNAKE GAME  |  Score: \"\n","                                   + str(self.snake.length - 3))\n","\n","    def get_name(self):\n","        \"\"\"See test.py in my desktop, for a textbox input in pygame\"\"\"\n","        return None\n","\n","    def add_to_leaderboards(self, score, step):\n","        file_path = resource_path(\"resources/scores.json\")\n","\n","        name = self.get_name()\n","        new_score = {'name': 'test',\n","                     'ranking_data': {'score': score,\n","                                      'step': step}}\n","\n","        with open(file_path, 'w') as leaderboards_file:\n","            json.dump(new_score, leaderboards_file)\n","\n","    def view_leaderboards(self):\n","        list_menu = ['MENU']\n","        menu_options = [TextBlock('LEADERBOARDS',\n","                                  (self.screen_rect.centerx,\n","                                   2 * self.screen_rect.centery / 10),\n","                                  self.window, (1 / 12), \"text\")]\n","\n","        file_path = resource_path(\"resources/scores.json\")\n","\n","        with open(file_path, 'r') as leaderboards_file:\n","            scores_data = json.loads(leaderboards_file.read())\n","\n","        scores_data.sort(key = operator.itemgetter('score'))\n","\n","#        for score in formatted_scores:\n","#            menu_options.append(TextBlock(person_ranked,\n","#                                (self.screen_rect.centerx,\n","#                                10 * self.screen_rect.centery / 10),\n","#                                self.window, (1 / 12), \"text\"))\n","\n","        menu_options.append(TextBlock('MENU',\n","                            (self.screen_rect.centerx,\n","                            10 * self.screen_rect.centery / 10),\n","                            self.window, (1 / 12), \"menu\"))\n","        selected_option = self.cycle_menu(menu_options, list_menu, OPTIONS)\n","\n","    @staticmethod\n","    def format_scores(scores, ammount):\n","        scores = scores[-ammount:]\n","\n","\n","\n","    @staticmethod\n","    def eval_local_safety(canvas, body):\n","        \"\"\"Evaluate the safety of the head's possible next movements.\n","\n","        Return\n","        ----------\n","        canvas: np.array of size board_size**2\n","            After using game expertise, change canvas values to DANGEROUS if true.\n","        \"\"\"\n","        if ((body[0][0] + 1) > (VAR.board_size - 1)\n","            or ([body[0][0] + 1, body[0][1]]) in body[1:]):\n","            canvas[VAR.board_size - 1, 0] = POINT_TYPE['DANGEROUS']\n","        if (body[0][0] - 1) < 0 or ([body[0][0] - 1, body[0][1]]) in body[1:]:\n","            canvas[VAR.board_size - 1, 1] = POINT_TYPE['DANGEROUS']\n","        if (body[0][1] - 1) < 0 or ([body[0][0], body[0][1] - 1]) in body[1:]:\n","            canvas[VAR.board_size - 1, 2] = POINT_TYPE['DANGEROUS']\n","        if ((body[0][1] + 1) > (VAR.board_size - 1)\n","            or ([body[0][0], body[0][1] + 1]) in body[1:]):\n","            canvas[VAR.board_size - 1, 3] = POINT_TYPE['DANGEROUS']\n","\n","        return canvas\n","\n","    @staticmethod\n","    def gradient(colors, steps, components = 3):\n","        \"\"\"Function to create RGB gradients given 2 colors and steps. If\n","        component is changed to 4, it does the same to RGBA colors.\n","\n","        Return\n","        ----------\n","        result: list of steps length of tuple of 3 * int (if RGBA, 4 * int)\n","            List of colors of calculated gradient from start to end.\n","        \"\"\"\n","        def linear_gradient(start, finish, substeps):\n","            yield start\n","\n","            for substep in range(1, substeps):\n","                yield tuple([(start[component]\n","                              + (float(substep) / (substeps - 1))\n","                              * (finish[component] - start[component]))\n","                             for component in range(components)])\n","\n","        def pairs(seq):\n","            first_color, second_color = tee(seq)\n","            next(second_color, None)\n","\n","            return zip(first_color, second_color)\n","\n","        result = []\n","        substeps = int(float(steps) / (len(colors) - 1))\n","\n","        for first_color, second_color in pairs(colors):\n","            for gradient_color in linear_gradient(first_color, second_color,\n","                                                  substeps):\n","                result.append(gradient_color)\n","\n","        return result\n","\n","\n","def resource_path(relative_path):\n","    \"\"\"Function to return absolute paths. Used while creating .exe file.\"\"\"\n","    if hasattr(sys, '_MEIPASS'):\n","        return path.join(sys._MEIPASS, relative_path)\n","\n","    return path.join(path.dirname(path.realpath(__file__)), relative_path)\n"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EyzmgPBlpC_L"},"source":["## 2. Experience Replay (memory)"]},{"cell_type":"markdown","metadata":{"id":"GyA5BM9psnPh"},"source":["### 2.1 Utilities <a name=\"experience-replay-utilities\"></a>"]},{"cell_type":"markdown","metadata":{"id":"UpNnJYNUtAyG"},"source":["#### 2.1.1 Sum Tree"]},{"cell_type":"code","metadata":{"id":"ivP835vDtEnG","executionInfo":{"status":"ok","timestamp":1613495337330,"user_tz":180,"elapsed":3835,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["import numpy as np\n","import sys\n","import time\n","import operator\n","from datetime import timedelta\n","import collections\n","\n","class SegmentTree(object):\n","    def __init__(self, capacity, operation, neutral_element):\n","        \"\"\"Build a Segment Tree data structure.\n","        https://en.wikipedia.org/wiki/Segment_tree\n","        Can be used as regular array, but with two\n","        important differences:\n","            a) setting item's value is slightly slower.\n","               It is O(lg capacity) instead of O(1).\n","            b) user has access to an efficient `reduce`\n","               operation which reduces `operation` over\n","               a contiguous subsequence of items in the\n","               array.\n","        Paramters\n","        ---------\n","        capacity: int\n","            Total size of the array - must be a power of two.\n","        operation: lambda obj, obj -> obj\n","            and operation for combining elements (eg. sum, max)\n","            must for a mathematical group together with the set of\n","            possible values for array elements.\n","        neutral_element: obj\n","            neutral element for the operation above. eg. float('-inf')\n","            for max and 0 for sum.\n","        \"\"\"\n","        assert capacity > 0 and capacity & (capacity - 1) == 0, \"capacity must be positive and a power of 2.\"\n","        self._capacity = capacity\n","        self._value = [neutral_element for _ in range(2 * capacity)]\n","        self._operation = operation\n","\n","    def _reduce_helper(self, start, end, node, node_start, node_end):\n","        if start == node_start and end == node_end:\n","            return self._value[node]\n","        mid = (node_start + node_end) // 2\n","        if end <= mid:\n","            return self._reduce_helper(start, end, 2 * node, node_start, mid)\n","        else:\n","            if mid + 1 <= start:\n","                return self._reduce_helper(start, end, 2 * node + 1, mid + 1, node_end)\n","            else:\n","                return self._operation(\n","                    self._reduce_helper(start, mid, 2 * node, node_start, mid),\n","                    self._reduce_helper(mid + 1, end, 2 * node + 1, mid + 1, node_end)\n","                )\n","\n","    def reduce(self, start=0, end=None):\n","        \"\"\"Returns result of applying `self.operation`\n","        to a contiguous subsequence of the array.\n","            self.operation(arr[start], operation(arr[start+1], operation(... arr[end])))\n","        Parameters\n","        ----------\n","        start: int\n","            beginning of the subsequence\n","        end: int\n","            end of the subsequences\n","        Returns\n","        -------\n","        reduced: obj\n","            result of reducing self.operation over the specified range of array elements.\n","        \"\"\"\n","        if end is None:\n","            end = self._capacity\n","        if end < 0:\n","            end += self._capacity\n","        end -= 1\n","        return self._reduce_helper(start, end, 1, 0, self._capacity - 1)\n","\n","    def __setitem__(self, idx, val):\n","        # index of the leaf\n","        idx += self._capacity\n","        self._value[idx] = val\n","        idx //= 2\n","        while idx >= 1:\n","            self._value[idx] = self._operation(\n","                self._value[2 * idx],\n","                self._value[2 * idx + 1]\n","            )\n","            idx //= 2\n","\n","    def __getitem__(self, idx):\n","        assert 0 <= idx < self._capacity\n","        return self._value[self._capacity + idx]\n","\n","\n","class SumSegmentTree(SegmentTree):\n","    def __init__(self, capacity):\n","        super(SumSegmentTree, self).__init__(\n","            capacity=capacity,\n","            operation=operator.add,\n","            neutral_element=0.0\n","        )\n","\n","    def sum(self, start=0, end=None):\n","        \"\"\"Returns arr[start] + ... + arr[end]\"\"\"\n","        return super(SumSegmentTree, self).reduce(start, end)\n","\n","    def find_prefixsum_idx(self, prefixsum):\n","        \"\"\"Find the highest index `i` in the array such that\n","            sum(arr[0] + arr[1] + ... + arr[i - i]) <= prefixsum\n","        if array values are probabilities, this function\n","        allows to sample indexes according to the discrete\n","        probability efficiently.\n","        Parameters\n","        ----------\n","        perfixsum: float\n","            upperbound on the sum of array prefix\n","        Returns\n","        -------\n","        idx: int\n","            highest index satisfying the prefixsum constraint\n","        \"\"\"\n","        assert 0 <= prefixsum <= self.sum() + 1e-5\n","        idx = 1\n","        while idx < self._capacity:  # while non-leaf\n","            if self._value[2 * idx] > prefixsum:\n","                idx = 2 * idx\n","            else:\n","                prefixsum -= self._value[2 * idx]\n","                idx = 2 * idx + 1\n","        return idx - self._capacity\n","\n","\n","class MinSegmentTree(SegmentTree):\n","    def __init__(self, capacity):\n","        super(MinSegmentTree, self).__init__(\n","            capacity=capacity,\n","            operation=min,\n","            neutral_element=float('inf')\n","        )\n","\n","    def min(self, start=0, end=None):\n","        \"\"\"Returns min(arr[start], ...,  arr[end])\"\"\"\n","\n","        return super(MinSegmentTree, self).reduce(start, end)\n","\n","\n","class SumTree:\n","    def __init__(self, capacity):\n","        self._capacity = capacity\n","        self._tree = np.zeros(2 * self._capacity - 1)\n","        self._data = np.zeros(self._capacity, dtype = object)\n","        self._data_idx = 0\n","\n","    @property\n","    def capacity(self):\n","        return self._capacity\n","\n","    @property\n","    def tree(self):\n","        return self._tree\n","\n","    @property\n","    def data(self):\n","        return self._data\n","\n","    def sum(self):\n","        return self._tree[0]\n","\n","    def insert(self, data, priority):\n","#        print(\"Data shape: {}\".format(data.shape))\n","#        print(\"Stored data shape: {}\".format(self._data.shape))\n","        self._data[self._data_idx] = data\n","        tree_idx = self._data_idx + self._capacity - 1\n","        self.update(tree_idx, priority)\n","        self._data_idx += 1\n","        if self._data_idx >= self._capacity:\n","            self._data_idx = 0\n","\n","    def update(self, tree_idx, priority):\n","        delta = priority - self._tree[tree_idx]\n","        self._tree[tree_idx] = priority\n","        while tree_idx != 0:\n","            tree_idx = (tree_idx - 1) // 2  # Get parent\n","            self._tree[tree_idx] += delta\n","\n","    def retrieve(self, val):\n","        tree_idx, parent = None, 0\n","        while True:\n","            left = 2 * parent + 1\n","            right = left + 1\n","            if left >= len(self._tree):  # Leaf\n","                tree_idx = parent\n","                break\n","            else:\n","                if val <= self._tree[left]:\n","                    parent = left\n","                else:\n","                    val -= self._tree[left]\n","                    parent = right\n","\n","        priority = self._tree[tree_idx]\n","        data = self._data[tree_idx - self._capacity + 1]\n","\n","        return tree_idx, priority, data\n","\n","    def max_leaf(self):\n","        return np.max(self.leaves())\n","\n","    def min_leaf(self):\n","        return np.min(self.leaves())\n","\n","    def leaves(self):\n","        return self._tree[-self._capacity:]\n"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tgIFwsvbtLbl"},"source":["### 2.1.2 Linear Schedule"]},{"cell_type":"code","metadata":{"id":"eJp_3r3nsy0b","executionInfo":{"status":"ok","timestamp":1613495337331,"user_tz":180,"elapsed":3817,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["class LinearSchedule(object):\n","    def __init__(self, schedule_timesteps, final_p, initial_p):\n","        \"\"\"Linear interpolation between initial_p and final_p over\n","        schedule_timesteps. After this many timesteps pass final_p is\n","        returned.\n","        Parameters\n","        ----------\n","        schedule_timesteps: int\n","            Number of timesteps for which to linearly anneal initial_p\n","            to final_p\n","        initial_p: float\n","            initial output value\n","        final_p: float\n","            final output value\n","        \"\"\"\n","        self.schedule_timesteps = schedule_timesteps\n","        self.final_p = final_p\n","        self.initial_p = initial_p\n","\n","    def value(self, t):\n","        \"\"\"See Schedule.value\"\"\"\n","        fraction = min(float(t) / self.schedule_timesteps, 1.0)\n","        return self.initial_p + fraction * (self.final_p - self.initial_p)"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nPTOzs8asNKS"},"source":["### 2.2 Imports <a name=\"experience-replay-imports\"></a>"]},{"cell_type":"code","metadata":{"id":"12HjK_vPsMrm","executionInfo":{"status":"ok","timestamp":1613495337332,"user_tz":180,"elapsed":3797,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["import numpy as np\n","from random import sample, uniform, random\n","from array import array  # Efficient numeric arrays"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"-uyxpIitpAnt","executionInfo":{"status":"ok","timestamp":1613495338246,"user_tz":180,"elapsed":4667,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["class ExperienceReplay:\n","    \"\"\"The class that handles memory and experiences replay.\n","\n","    Attributes\n","    ----------\n","    memory: list of experiences\n","        Memory list to insert experiences.\n","    memory_size: int, optional, default = 150000\n","        The ammount of experiences to be stored in the memory.\n","    input_shape: tuple of 3 * int\n","        The shape of the input which will be stored.\n","    \"\"\"\n","    def __init__(self, memory_size = 150000):\n","        \"\"\"Initialize parameters and the memory array.\"\"\"\n","        self.memory_size = memory_size\n","        self.reset_memory() # Initiate the memory\n","\n","    def exp_size(self):\n","        \"\"\"Returns how much memory is stored.\"\"\"\n","        return len(self.memory)\n","\n","    def remember(self, s, a, r, s_prime, game_over):\n","        \"\"\"Remember SARS' experiences, with the game_over parameter (done).\"\"\"\n","        if not hasattr(self, 'input_shape'):\n","            self.input_shape = s.shape[1:] # set attribute only once\n","\n","        experience = np.concatenate([s.flatten(),\n","                                     np.array(a).flatten(),\n","                                     np.array(r).flatten(),\n","                                     s_prime.flatten(),\n","                                     1 * np.array(game_over).flatten()])\n","\n","        self.memory.append(experience)\n","\n","        if self.memory_size > 0 and self.exp_size() > self.memory_size:\n","            self.memory.pop(0)\n","\n","    def get_samples(self, batch_size):\n","        \"\"\"Sample the memory according to PER flag.\n","\n","        Return\n","        ----------\n","        batch: np.array of batch_size experiences\n","            The batched experiences from memory.\n","        IS_weights: np.array of batch_size of the weights\n","            As it's used only in PER, is an array of ones in this case.\n","        Indexes: list of batch_size * int\n","            As it's used only in PER, return None.\n","        \"\"\"\n","        IS_weights = np.ones((batch_size, ))\n","        batch = np.array(sample(self.memory, batch_size))\n","\n","        return batch, IS_weights, None\n","\n","    def get_targets(self, target, model, batch_size, nb_actions, gamma = 0.9,\n","                    n_steps = 1):\n","        \"\"\"Function to sample, set batch function and use it for targets.\"\"\"\n","        if self.exp_size() < batch_size:\n","            return None\n","\n","        samples, IS_weights, tree_indices = self.get_samples(batch_size)\n","        input_dim = np.prod(self.input_shape) # Get the input shape, multiplied\n","\n","        S = samples[:, 0 : input_dim] # Seperate the states\n","        a = samples[:, input_dim] # Separate the actions\n","        r = samples[:, input_dim + 1] # Separate the rewards\n","        S_prime = samples[:, input_dim + 2 : 2 * input_dim + 2] # Next_actions\n","        game_over = samples[:, 2 * input_dim + 2] # Separate terminal flags\n","\n","        # Reshape the arrays to make them usable by the model.\n","        S = S.reshape((batch_size, ) + self.input_shape)\n","        S_prime = S_prime.reshape((batch_size, ) + self.input_shape)\n","\n","        X = np.concatenate([S, S_prime], axis = 0)\n","        Y = model.predict(X)\n","\n","        if target is not None: # Use Double DQN logic:\n","            Qsa = [None] * 64\n","            actions = np.argmax(Y[batch_size:], axis = 1)\n","            Y_target = target.predict(X[batch_size:])\n","\n","            for idx, target in enumerate(Y_target):\n","                Qsa[idx] = target[actions[idx]]\n","\n","            Qsa = np.array(Qsa)\n","        else:\n","            Qsa = np.max(Y[batch_size:], axis = 1)\n","\n","        # Where the action happened, replace with the Q values of S_prime\n","        targets = np.array(Y[:batch_size])\n","        value = r + (gamma ** n_steps) * (1 - game_over) * Qsa\n","        targets[range(batch_size), a.astype(int)] = value\n","\n","        return S, targets, IS_weights\n","\n","    def reset_memory(self):\n","        \"\"\"Set the memory as a blank list.\"\"\"\n","        if self.memory_size <= 100:\n","            memory_size = 150000\n","\n","        self.memory = []\n","\n","\n","class PrioritizedExperienceReplayNaive:\n","    \"\"\"The class that handles memory and experiences replay.\n","\n","    Attributes:\n","        memory: memory array to insert experiences.\n","        memory_size: the ammount of experiences to be stored in the memory.\n","        input_shape: the shape of the input which will be stored.\n","        batch_function: returns targets according to S.\n","        per: flag for PER usage.\n","        per_epsilon: used to replace \"0\" probabilities cases.\n","        per_alpha: how much prioritization to use.\n","        per_beta: importance sampling weights (IS_weights).\n","    \"\"\"\n","    def __init__(self, memory_size = 150000, alpha = 0.6, epsilon = 0.001,\n","                 beta = 0.4, nb_epoch = 10000, decay = 0.5):\n","        \"\"\"Initialize parameters and the memory array.\"\"\"\n","        self.memory_size = memory_size\n","        self.epsilon = epsilon\n","        self.alpha = alpha\n","        self.beta = beta\n","        self.schedule = LinearSchedule(nb_epoch * decay, 1.0, beta)\n","        self.reset_memory() # Initiate the memory\n","\n","    def exp_size(self):\n","        \"\"\"Returns how much memory is stored.\"\"\"\n","        return self.exp\n","\n","    def get_priority(self, errors):\n","        \"\"\"Returns priority based on how much prioritization to use.\"\"\"\n","        return (errors + self.epsilon) ** self.alpha\n","\n","    def update(self, tree_indices, errors):\n","        \"\"\"Update a list of nodes, based on their errors.\"\"\"\n","        priorities = self.get_priority(errors)\n","\n","        for index, priority in zip(tree_indices, priorities):\n","            self.memory.update(index, priority)\n","\n","    def remember(self, s, a, r, s_prime, game_over):\n","        \"\"\"Remember SARS' experiences, with the game_over parameter (done).\"\"\"\n","        if not hasattr(self, 'input_shape'):\n","            self.input_shape = s.shape[1:] # set attribute only once\n","\n","        experience = np.concatenate([s.flatten(),\n","                                     np.array(a).flatten(),\n","                                     np.array(r).flatten(),\n","                                     s_prime.flatten(),\n","                                     1 * np.array(game_over).flatten()])\n","\n","        max_priority = self.memory.max_leaf()\n","\n","        if max_priority == 0:\n","            max_priority = self.get_priority(0)\n","\n","        self.memory.insert(experience, max_priority)\n","        self.exp += 1\n","\n","    def get_samples(self, batch_size):\n","        \"\"\"Sample the memory according to PER flag.\"\"\"\n","        batch = [None] * batch_size\n","        IS_weights = np.zeros((batch_size, ))\n","        tree_indices = [0] * batch_size\n","\n","        memory_sum = self.memory.sum()\n","        len_seg = memory_sum / batch_size\n","        min_prob = self.memory.min_leaf() / memory_sum\n","\n","        for i in range(batch_size):\n","            val = uniform(len_seg * i, len_seg * (i + 1))\n","            tree_indices[i], priority, batch[i] = self.memory.retrieve(val)\n","            prob = priority / self.memory.sum()\n","            IS_weights[i] = np.power(prob / min_prob, -self.beta)\n","\n","        return np.array(batch), IS_weights, tree_indices\n","\n","    def get_targets(self, target, model, batch_size, nb_actions, gamma = 0.9,\n","                    n_steps = 1):\n","        \"\"\"Function to sample, set batch function and use it for targets.\"\"\"\n","        if self.exp_size() < batch_size:\n","            return None\n","\n","        samples, IS_weights, tree_indices = self.get_samples(batch_size)\n","        input_dim = np.prod(self.input_shape) # Get the input shape, multiplied\n","\n","        S = samples[:, 0 : input_dim] # Seperate the states\n","        a = samples[:, input_dim] # Separate the actions\n","        r = samples[:, input_dim + 1] # Separate the rewards\n","        S_prime = samples[:, input_dim + 2 : 2 * input_dim + 2] # Next_actions\n","        game_over = samples[:, 2 * input_dim + 2] # Separate terminal flags\n","\n","        # Reshape the arrays to make them usable by the model.\n","        S = S.reshape((batch_size, ) + self.input_shape)\n","        S_prime = S_prime.reshape((batch_size, ) + self.input_shape)\n","\n","        X = np.concatenate([S, S_prime], axis = 0)\n","        Y = model.predict(X)\n","\n","        if target is not None: # Use Double DQN logic:\n","            Qsa = [None] * 64\n","            actions = np.argmax(Y[batch_size:], axis = 1)\n","            Y_target = target.predict(X[batch_size:])\n","\n","            for idx, target in enumerate(Y_target):\n","                Qsa[idx] = target[actions[idx]]\n","\n","            Qsa = np.array(Qsa)\n","        else:\n","            Qsa = np.max(Y[batch_size:], axis = 1)\n","\n","        # Where the action happened, replace with the Q values of S_prime\n","        targets = np.array(Y[:batch_size])\n","        value = r + (gamma ** n_steps) * (1 - game_over) * Qsa\n","        targets[range(batch_size), a.astype(int)] = value\n","\n","        errors = np.abs(value - Y[:batch_size].max(axis = 1)).clip(max = 1.)\n","        self.update_priorities(tree_indices, errors)\n","\n","        return S, targets, IS_weights\n","\n","    def reset_memory(self):\n","        \"\"\"Set the memory as a blank list.\"\"\"\n","        if self.memory_size <= 100:\n","            self.memory_size = 150000\n","\n","        self.memory = SumTree(self.memory_size)\n","        self.exp = 0\n","\n","\n","class PrioritizedExperienceReplay:\n","    def __init__(self, memory_size, nb_epoch = 10000, epsilon = 0.001,\n","                 alpha = 0.6, beta = 0.4, decay = 0.5):\n","        self.memory_size = memory_size\n","        self.alpha = alpha\n","        self.epsilon = epsilon\n","        self.beta = beta\n","        self.schedule = LinearSchedule(nb_epoch * decay, 1.0, beta)\n","        self.max_priority = 1.0\n","        self.reset_memory()\n","\n","    def exp_size(self):\n","        \"\"\"Returns how much memory is stored.\"\"\"\n","        return len(self.memory)\n","\n","    def remember(self, s, a, r, s_prime, game_over):\n","        if not hasattr(self, 'input_shape'):\n","            self.input_shape = s.shape[1:] # set attribute only once\n","\n","        experience = np.concatenate([s.flatten(),\n","                                     np.array(a).flatten(),\n","                                     np.array(r).flatten(),\n","                                     s_prime.flatten(),\n","                                     1 * np.array(game_over).flatten()])\n","        if self.exp_size() < self.memory_size:\n","            self.memory.append(experience)\n","            self.pos += 1\n","        else:\n","            self.memory[self.pos] = experience\n","            self.pos = (self.pos + 1) % self.memory_size\n","\n","        self._it_sum[self.pos] = self.max_priority ** self.alpha\n","        self._it_min[self.pos] = self.max_priority ** self.alpha\n","\n","    def _sample_proportional(self, batch_size):\n","        res = array('i')\n","\n","        for _ in range(batch_size):\n","            mass = random() * self._it_sum.sum(0, self.exp_size() - 1)\n","            idx = self._it_sum.find_prefixsum_idx(mass)\n","            res.append(idx)\n","\n","        return res\n","\n","    def get_priority(self, errors):\n","        \"\"\"Returns priority based on how much prioritization to use.\"\"\"\n","        return (errors + self.epsilon) ** self.alpha\n","\n","    def get_samples(self, batch_size):\n","        idxes = self._sample_proportional(batch_size)\n","\n","        weights = array('f')\n","        p_min = self._it_min.min() / self._it_sum.sum()\n","        max_weight = (p_min * self.exp_size()) ** (-self.beta)\n","\n","        for idx in idxes:\n","            p_sample = self._it_sum[idx] / self._it_sum.sum()\n","            weight = (p_sample * self.exp_size()) ** (-self.beta)\n","            weights.append(weight / max_weight)\n","\n","        weights = np.array(weights, dtype=np.float32)\n","        samples = [self.memory[idx] for idx in idxes]\n","\n","        return np.array(samples), weights, idxes\n","\n","    def get_targets(self, target, model, batch_size, nb_actions, gamma = 0.9,\n","                    n_steps = 1):\n","        \"\"\"Function to sample, set batch function and use it for targets.\"\"\"\n","        if self.exp_size() < batch_size:\n","            return None\n","\n","        samples, IS_weights, tree_indices = self.get_samples(batch_size)\n","        input_dim = np.prod(self.input_shape) # Get the input shape, multiplied\n","\n","        S = samples[:, 0 : input_dim] # Seperate the states\n","        a = samples[:, input_dim] # Separate the actions\n","        r = samples[:, input_dim + 1] # Separate the rewards\n","        S_prime = samples[:, input_dim + 2 : 2 * input_dim + 2] # Next_actions\n","        game_over = samples[:, 2 * input_dim + 2] # Separate terminal flags\n","\n","        # Reshape the arrays to make them usable by the model.\n","        S = S.reshape((batch_size, ) + self.input_shape)\n","        S_prime = S_prime.reshape((batch_size, ) + self.input_shape)\n","\n","        X = np.concatenate([S, S_prime], axis = 0)\n","        Y = model.predict(X)\n","\n","        if target is not None: # Use Double DQN logic:\n","            Qsa = [None] * 64\n","            actions = np.argmax(Y[batch_size:], axis = 1)\n","            Y_target = target.predict(X[batch_size:])\n","\n","            for idx, target in enumerate(Y_target):\n","                Qsa[idx] = target[actions[idx]]\n","\n","            Qsa = np.array(Qsa)\n","        else:\n","            Qsa = np.max(Y[batch_size:], axis = 1)\n","\n","        # Where the action happened, replace with the Q values of S_prime\n","        targets = np.array(Y[:batch_size])\n","        value = r + (gamma ** n_steps) * (1 - game_over) * Qsa\n","        targets[range(batch_size), a.astype(int)] = value\n","\n","        errors = np.abs(value - Y[:batch_size].max(axis = 1)).clip(max = 1.)\n","        self.update_priorities(tree_indices, errors)\n","\n","        return S, targets, IS_weights\n","\n","    def update_priorities(self, idxes, errors):\n","        priorities = self.get_priority(errors)\n","\n","        for idx, priority in zip(idxes, priorities):\n","            self._it_sum[idx] = priority ** self.alpha\n","            self._it_min[idx] = priority ** self.alpha\n","\n","            self.max_priority = max(self.max_priority, priority)\n","\n","    def reset_memory(self):\n","        \"\"\"Set the memory as a blank list.\"\"\"\n","        if self.memory_size <= 100:\n","            self.memory_size = 150000\n","\n","        self.memory = []\n","        self.pos = 0\n","\n","        it_capacity = 1\n","\n","        while it_capacity < self.memory_size:\n","            it_capacity *= 2\n","\n","        self._it_sum = SumSegmentTree(it_capacity)\n","        self._it_min = MinSegmentTree(it_capacity)\n"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hDWB9sUZtf9C"},"source":["### 2.2 Experience Replay (ER)"]},{"cell_type":"code","metadata":{"id":"xxiGVK4std7v","executionInfo":{"status":"ok","timestamp":1613495338250,"user_tz":180,"elapsed":4632,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["class ExperienceReplay:\n","    \"\"\"The class that handles memory and experiences replay.\n","\n","    Attributes\n","    ----------\n","    memory: list of experiences\n","        Memory list to insert experiences.\n","    memory_size: int, optional, default = 150000\n","        The ammount of experiences to be stored in the memory.\n","    input_shape: tuple of 3 * int\n","        The shape of the input which will be stored.\n","    \"\"\"\n","    def __init__(self, memory_size = 150000):\n","        \"\"\"Initialize parameters and the memory array.\"\"\"\n","        self.memory_size = memory_size\n","        self.reset_memory() # Initiate the memory\n","\n","    def exp_size(self):\n","        \"\"\"Returns how much memory is stored.\"\"\"\n","        return len(self.memory)\n","\n","    def remember(self, s, a, r, s_prime, game_over):\n","        \"\"\"Remember SARS' experiences, with the game_over parameter (done).\"\"\"\n","        if not hasattr(self, 'input_shape'):\n","            self.input_shape = s.shape[1:] # set attribute only once\n","\n","        experience = np.concatenate([s.flatten(),\n","                                     np.array(a).flatten(),\n","                                     np.array(r).flatten(),\n","                                     s_prime.flatten(),\n","                                     1 * np.array(game_over).flatten()])\n","\n","        self.memory.append(experience)\n","\n","        if self.memory_size > 0 and self.exp_size() > self.memory_size:\n","            self.memory.pop(0)\n","\n","    def get_samples(self, batch_size):\n","        \"\"\"Sample the memory according to PER flag.\n","\n","        Return\n","        ----------\n","        batch: np.array of batch_size experiences\n","            The batched experiences from memory.\n","        IS_weights: np.array of batch_size of the weights\n","            As it's used only in PER, is an array of ones in this case.\n","        Indexes: list of batch_size * int\n","            As it's used only in PER, return None.\n","        \"\"\"\n","        IS_weights = np.ones((batch_size, ))\n","        batch = np.array(sample(self.memory, batch_size))\n","\n","        return batch, IS_weights, None\n","\n","    def get_targets(self, target, model, batch_size, nb_actions, gamma = 0.9,\n","                    n_steps = 1):\n","        \"\"\"Function to sample, set batch function and use it for targets.\"\"\"\n","        if self.exp_size() < batch_size:\n","            return None\n","\n","        samples, IS_weights, tree_indices = self.get_samples(batch_size)\n","        input_dim = np.prod(self.input_shape) # Get the input shape, multiplied\n","\n","        S = samples[:, 0 : input_dim] # Seperate the states\n","        a = samples[:, input_dim] # Separate the actions\n","        r = samples[:, input_dim + 1] # Separate the rewards\n","        S_prime = samples[:, input_dim + 2 : 2 * input_dim + 2] # Next_actions\n","        game_over = samples[:, 2 * input_dim + 2] # Separate terminal flags\n","\n","        # Reshape the arrays to make them usable by the model.\n","        S = S.reshape((batch_size, ) + self.input_shape)\n","        S_prime = S_prime.reshape((batch_size, ) + self.input_shape)\n","\n","        X = np.concatenate([S, S_prime], axis = 0)\n","        Y = model.predict(X)\n","\n","        if target is not None: # Use Double DQN logic:\n","            Qsa = [None] * 64\n","            actions = np.argmax(Y[batch_size:], axis = 1)\n","            Y_target = target.predict(X[batch_size:])\n","\n","            for idx, target in enumerate(Y_target):\n","                Qsa[idx] = target[actions[idx]]\n","\n","            Qsa = np.array(Qsa)\n","        else:\n","            Qsa = np.max(Y[batch_size:], axis = 1)\n","\n","        # Where the action happened, replace with the Q values of S_prime\n","        targets = np.array(Y[:batch_size])\n","        value = r + (gamma ** n_steps) * (1 - game_over) * Qsa\n","        targets[range(batch_size), a.astype(int)] = value\n","\n","        return S, targets, IS_weights\n","\n","    def reset_memory(self):\n","        \"\"\"Set the memory as a blank list.\"\"\"\n","        if self.memory_size <= 100:\n","            memory_size = 150000\n","\n","        self.memory = []\n"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WVhJ1taVtk4a"},"source":["### 2.3 Naive Prioritized Experience Replay (NPER)"]},{"cell_type":"code","metadata":{"id":"glOfwZ04tfzC","executionInfo":{"status":"ok","timestamp":1613495338251,"user_tz":180,"elapsed":4608,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["class PrioritizedExperienceReplayNaive:\n","    \"\"\"The class that handles memory and experiences replay.\n","\n","    Attributes:\n","        memory: memory array to insert experiences.\n","        memory_size: the ammount of experiences to be stored in the memory.\n","        input_shape: the shape of the input which will be stored.\n","        batch_function: returns targets according to S.\n","        per: flag for PER usage.\n","        per_epsilon: used to replace \"0\" probabilities cases.\n","        per_alpha: how much prioritization to use.\n","        per_beta: importance sampling weights (IS_weights).\n","    \"\"\"\n","    def __init__(self, memory_size = 150000, alpha = 0.6, epsilon = 0.001,\n","                 beta = 0.4, nb_epoch = 10000, decay = 0.5):\n","        \"\"\"Initialize parameters and the memory array.\"\"\"\n","        self.memory_size = memory_size\n","        self.epsilon = epsilon\n","        self.alpha = alpha\n","        self.beta = beta\n","        self.schedule = LinearSchedule(nb_epoch * decay, 1.0, beta)\n","        self.reset_memory() # Initiate the memory\n","\n","    def exp_size(self):\n","        \"\"\"Returns how much memory is stored.\"\"\"\n","        return self.exp\n","\n","    def get_priority(self, errors):\n","        \"\"\"Returns priority based on how much prioritization to use.\"\"\"\n","        return (errors + self.epsilon) ** self.alpha\n","\n","    def update(self, tree_indices, errors):\n","        \"\"\"Update a list of nodes, based on their errors.\"\"\"\n","        priorities = self.get_priority(errors)\n","\n","        for index, priority in zip(tree_indices, priorities):\n","            self.memory.update(index, priority)\n","\n","    def remember(self, s, a, r, s_prime, game_over):\n","        \"\"\"Remember SARS' experiences, with the game_over parameter (done).\"\"\"\n","        if not hasattr(self, 'input_shape'):\n","            self.input_shape = s.shape[1:] # set attribute only once\n","\n","        experience = np.concatenate([s.flatten(),\n","                                     np.array(a).flatten(),\n","                                     np.array(r).flatten(),\n","                                     s_prime.flatten(),\n","                                     1 * np.array(game_over).flatten()])\n","\n","        max_priority = self.memory.max_leaf()\n","\n","        if max_priority == 0:\n","            max_priority = self.get_priority(0)\n","\n","        self.memory.insert(experience, max_priority)\n","        self.exp += 1\n","\n","    def get_samples(self, batch_size):\n","        \"\"\"Sample the memory according to PER flag.\"\"\"\n","        batch = [None] * batch_size\n","        IS_weights = np.zeros((batch_size, ))\n","        tree_indices = [0] * batch_size\n","\n","        memory_sum = self.memory.sum()\n","        len_seg = memory_sum / batch_size\n","        min_prob = self.memory.min_leaf() / memory_sum\n","\n","        for i in range(batch_size):\n","            val = uniform(len_seg * i, len_seg * (i + 1))\n","            tree_indices[i], priority, batch[i] = self.memory.retrieve(val)\n","            prob = priority / self.memory.sum()\n","            IS_weights[i] = np.power(prob / min_prob, -self.beta)\n","\n","        return np.array(batch), IS_weights, tree_indices\n","\n","    def get_targets(self, target, model, batch_size, nb_actions, gamma = 0.9,\n","                    n_steps = 1):\n","        \"\"\"Function to sample, set batch function and use it for targets.\"\"\"\n","        if self.exp_size() < batch_size:\n","            return None\n","\n","        samples, IS_weights, tree_indices = self.get_samples(batch_size)\n","        input_dim = np.prod(self.input_shape) # Get the input shape, multiplied\n","\n","        S = samples[:, 0 : input_dim] # Seperate the states\n","        a = samples[:, input_dim] # Separate the actions\n","        r = samples[:, input_dim + 1] # Separate the rewards\n","        S_prime = samples[:, input_dim + 2 : 2 * input_dim + 2] # Next_actions\n","        game_over = samples[:, 2 * input_dim + 2] # Separate terminal flags\n","\n","        # Reshape the arrays to make them usable by the model.\n","        S = S.reshape((batch_size, ) + self.input_shape)\n","        S_prime = S_prime.reshape((batch_size, ) + self.input_shape)\n","\n","        X = np.concatenate([S, S_prime], axis = 0)\n","        Y = model.predict(X)\n","\n","        if target is not None: # Use Double DQN logic:\n","            Qsa = [None] * 64\n","            actions = np.argmax(Y[batch_size:], axis = 1)\n","            Y_target = target.predict(X[batch_size:])\n","\n","            for idx, target in enumerate(Y_target):\n","                Qsa[idx] = target[actions[idx]]\n","\n","            Qsa = np.array(Qsa)\n","        else:\n","            Qsa = np.max(Y[batch_size:], axis = 1)\n","\n","        # Where the action happened, replace with the Q values of S_prime\n","        targets = np.array(Y[:batch_size])\n","        value = r + (gamma ** n_steps) * (1 - game_over) * Qsa\n","        targets[range(batch_size), a.astype(int)] = value\n","\n","        errors = np.abs(value - Y[:batch_size].max(axis = 1)).clip(max = 1.)\n","        self.update_priorities(tree_indices, errors)\n","\n","        return S, targets, IS_weights\n","\n","    def reset_memory(self):\n","        \"\"\"Set the memory as a blank list.\"\"\"\n","        if self.memory_size <= 100:\n","            self.memory_size = 150000\n","\n","        self.memory = SumTree(self.memory_size)\n","        self.exp = 0\n"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SboDvSwptq0Y"},"source":["### 2.4 Prioritized Experience Replay"]},{"cell_type":"code","metadata":{"id":"c4jOQ046tXv-","executionInfo":{"status":"ok","timestamp":1613495338830,"user_tz":180,"elapsed":5169,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["class PrioritizedExperienceReplay:\n","    def __init__(self, memory_size, nb_epoch = 10000, epsilon = 0.001,\n","                 alpha = 0.6, beta = 0.4, decay = 0.5):\n","        self.memory_size = memory_size\n","        self.alpha = alpha\n","        self.epsilon = epsilon\n","        self.beta = beta\n","        self.schedule = LinearSchedule(nb_epoch * decay, 1.0, beta)\n","        self.max_priority = 1.0\n","        self.reset_memory()\n","\n","    def exp_size(self):\n","        \"\"\"Returns how much memory is stored.\"\"\"\n","        return len(self.memory)\n","\n","    def remember(self, s, a, r, s_prime, game_over):\n","        if not hasattr(self, 'input_shape'):\n","            self.input_shape = s.shape[1:] # set attribute only once\n","\n","        experience = np.concatenate([s.flatten(),\n","                                     np.array(a).flatten(),\n","                                     np.array(r).flatten(),\n","                                     s_prime.flatten(),\n","                                     1 * np.array(game_over).flatten()])\n","        if self.exp_size() < self.memory_size:\n","            self.memory.append(experience)\n","            self.pos += 1\n","        else:\n","            self.memory[self.pos] = experience\n","            self.pos = (self.pos + 1) % self.memory_size\n","\n","        self._it_sum[self.pos] = self.max_priority ** self.alpha\n","        self._it_min[self.pos] = self.max_priority ** self.alpha\n","\n","    def _sample_proportional(self, batch_size):\n","        res = array('i')\n","\n","        for _ in range(batch_size):\n","            mass = random() * self._it_sum.sum(0, self.exp_size() - 1)\n","            idx = self._it_sum.find_prefixsum_idx(mass)\n","            res.append(idx)\n","\n","        return res\n","\n","    def get_priority(self, errors):\n","        \"\"\"Returns priority based on how much prioritization to use.\"\"\"\n","        return (errors + self.epsilon) ** self.alpha\n","\n","    def get_samples(self, batch_size):\n","        idxes = self._sample_proportional(batch_size)\n","\n","        weights = array('f')\n","        p_min = self._it_min.min() / self._it_sum.sum()\n","        max_weight = (p_min * self.exp_size()) ** (-self.beta)\n","\n","        for idx in idxes:\n","            p_sample = self._it_sum[idx] / self._it_sum.sum()\n","            weight = (p_sample * self.exp_size()) ** (-self.beta)\n","            weights.append(weight / max_weight)\n","\n","        weights = np.array(weights, dtype=np.float32)\n","        samples = [self.memory[idx] for idx in idxes]\n","\n","        return np.array(samples), weights, idxes\n","\n","    def get_targets(self, target, model, batch_size, nb_actions, gamma = 0.9,\n","                    n_steps = 1):\n","        \"\"\"Function to sample, set batch function and use it for targets.\"\"\"\n","        if self.exp_size() < batch_size:\n","            return None\n","\n","        samples, IS_weights, tree_indices = self.get_samples(batch_size)\n","        input_dim = np.prod(self.input_shape) # Get the input shape, multiplied\n","\n","        S = samples[:, 0 : input_dim] # Seperate the states\n","        a = samples[:, input_dim] # Separate the actions\n","        r = samples[:, input_dim + 1] # Separate the rewards\n","        S_prime = samples[:, input_dim + 2 : 2 * input_dim + 2] # Next_actions\n","        game_over = samples[:, 2 * input_dim + 2] # Separate terminal flags\n","\n","        # Reshape the arrays to make them usable by the model.\n","        S = S.reshape((batch_size, ) + self.input_shape)\n","        S_prime = S_prime.reshape((batch_size, ) + self.input_shape)\n","\n","        X = np.concatenate([S, S_prime], axis = 0)\n","        Y = model.predict(X)\n","\n","        if target is not None: # Use Double DQN logic:\n","            Qsa = [None] * 64\n","            actions = np.argmax(Y[batch_size:], axis = 1)\n","            Y_target = target.predict(X[batch_size:])\n","\n","            for idx, target in enumerate(Y_target):\n","                Qsa[idx] = target[actions[idx]]\n","\n","            Qsa = np.array(Qsa)\n","        else:\n","            Qsa = np.max(Y[batch_size:], axis = 1)\n","\n","        # Where the action happened, replace with the Q values of S_prime\n","        targets = np.array(Y[:batch_size])\n","        value = r + (gamma ** n_steps) * (1 - game_over) * Qsa\n","        targets[range(batch_size), a.astype(int)] = value\n","\n","        errors = np.abs(value - Y[:batch_size].max(axis = 1)).clip(max = 1.)\n","        self.update_priorities(tree_indices, errors)\n","\n","        return S, targets, IS_weights\n","\n","    def update_priorities(self, idxes, errors):\n","        priorities = self.get_priority(errors)\n","\n","        for idx, priority in zip(idxes, priorities):\n","            self._it_sum[idx] = priority ** self.alpha\n","            self._it_min[idx] = priority ** self.alpha\n","\n","            self.max_priority = max(self.max_priority, priority)\n","\n","    def reset_memory(self):\n","        \"\"\"Set the memory as a blank list.\"\"\"\n","        if self.memory_size <= 100:\n","            self.memory_size = 150000\n","\n","        self.memory = []\n","        self.pos = 0\n","\n","        it_capacity = 1\n","\n","        while it_capacity < self.memory_size:\n","            it_capacity *= 2\n","\n","        self._it_sum = SumSegmentTree(it_capacity)\n","        self._it_min = MinSegmentTree(it_capacity)\n"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uPSd7lKRuD74"},"source":["## 3. DQN Agent"]},{"cell_type":"markdown","metadata":{"id":"B4a4ukvGuRtv"},"source":["### 3.1 Exploration Policies"]},{"cell_type":"code","metadata":{"id":"SgjZMhgAuhms","executionInfo":{"status":"ok","timestamp":1613495338833,"user_tz":180,"elapsed":5159,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["import random\n","import numpy as np\n","\n","class GreedyQPolicy:\n","    \"\"\"Implement the greedy policy\n","\n","    Greedy policy always takes current best action.\n","    \"\"\"\n","    def __init__(self):\n","        super(GreedyQPolicy, self).__init__()\n","\n","    def select_action(self, model, state, epoch, nb_actions):\n","        \"\"\"Return the selected action\n","        # Arguments\n","            q_values (np.ndarray): List of the estimations of Q for each action\n","        # Returns\n","            Selection action\n","        \"\"\"\n","        q = model.predict(state)\n","        action = int(np.argmax(q[0]))\n","\n","        return action, 0\n","\n","    def get_config(self):\n","        \"\"\"Return configurations of GreedyQPolicy\n","        # Returns\n","            Dict of config\n","        \"\"\"\n","        config = super(GreedyQPolicy, self).get_config()\n","        return config\n","\n","\n","class EpsGreedyQPolicy:\n","    \"\"\"Implement the epsilon greedy policy\n","\n","    Eps Greedy policy either:\n","\n","    - takes a random action with probability epsilon\n","    - takes current best action with prob (1 - epsilon)\n","    \"\"\"\n","    def __init__(self, max_eps=1., min_eps = .01, nb_epoch = 10000):\n","        super(EpsGreedyQPolicy, self).__init__()\n","        self.schedule = LinearSchedule(nb_epoch, min_eps, max_eps)\n","\n","    def select_action(self, model, state, epoch, nb_actions):\n","        \"\"\"Return the selected action\n","        # Arguments\n","            q_values (np.ndarray): List of the estimations of Q for each action\n","        # Returns\n","            Selection action\n","        \"\"\"\n","        rand = random.random()\n","        self.eps = self.schedule.value(epoch)\n","\n","        if rand < self.eps:\n","            action = int(nb_actions * rand)\n","        else:\n","            q = model.predict(state)\n","            action = int(np.argmax(q[0]))\n","\n","        return action, self.eps\n","\n","    def get_config(self):\n","        \"\"\"Return configurations of EpsGreedyQPolicy\n","        # Returns\n","            Dict of config\n","        \"\"\"\n","        config = super(EpsGreedyQPolicy, self).get_config()\n","        config['eps'] = self.eps\n","        return config\n","\n","\n","class BoltzmannQPolicy:\n","    \"\"\"Implement the Boltzmann Q Policy\n","    Boltzmann Q Policy builds a probability law on q values and returns\n","    an action selected randomly according to this law.\n","    \"\"\"\n","    def __init__(self, max_temp = 1., min_temp = .01, nb_epoch = 10000, clip = (-500., 500.)):\n","        super(BoltzmannQPolicy, self).__init__()\n","        self.schedule = LinearSchedule(nb_epoch, min_temp, max_temp)\n","        self.clip = clip\n","\n","    def select_action(self, model, state, epoch, nb_actions):\n","        \"\"\"Return the selected action\n","        # Arguments\n","            q_values (np.ndarray): List of the estimations of Q for each action\n","        # Returns\n","            Selection action\n","        \"\"\"\n","        q = model.predict(state)[0]\n","        self.temp = self.schedule.value(epoch)\n","        arg = q / self.temp\n","\n","        exp_values = np.exp(arg - arg.max())\n","        probs = exp_values / exp_values.sum()\n","        action = np.random.choice(range(nb_actions), p = probs)\n","\n","        return action, self.temp\n","\n","    def get_config(self):\n","        \"\"\"Return configurations of BoltzmannQPolicy\n","        # Returns\n","            Dict of config\n","        \"\"\"\n","        config = super(BoltzmannQPolicy, self).get_config()\n","        config['temp'] = self.temp\n","        config['clip'] = self.clip\n","        return config\n","\n","\n","class BoltzmannGumbelQPolicy:\n","    \"\"\"Implements Boltzmann-Gumbel exploration (BGE) adapted for Q learning\n","    based on the paper Boltzmann Exploration Done Right\n","    (https://arxiv.org/pdf/1705.10257.pdf).\n","    BGE is invariant with respect to the mean of the rewards but not their\n","    variance. The parameter C, which defaults to 1, can be used to correct for\n","    this, and should be set to the least upper bound on the standard deviation\n","    of the rewards.\n","    BGE is only available for training, not testing. For testing purposes, you\n","    can achieve approximately the same result as BGE after training for N steps\n","    on K actions with parameter C by using the BoltzmannQPolicy and setting\n","    tau = C/sqrt(N/K).\"\"\"\n","\n","    def __init__(self, C = 1.0):\n","        super(BoltzmannGumbelQPolicy, self).__init__()\n","        self.C = C\n","        self.action_counts = None\n","\n","    def select_action(self, model, state, epoch, nb_actions):\n","        \"\"\"Return the selected action\n","        # Arguments\n","            q_values (np.ndarray): List of the estimations of Q for each action\n","        # Returns\n","            Selection action\n","        \"\"\"\n","        q = model.predict(state)[0]\n","        q = q.astype('float64')\n","\n","        # If we are starting training, we should reset the action_counts.\n","        # Otherwise, action_counts should already be initialized, since we\n","        # always do so when we begin training.\n","        if epoch == 0:\n","            self.action_counts = np.ones(q.shape)\n","\n","        beta = self.C/np.sqrt(self.action_counts)\n","        Z = np.random.gumbel(size = q.shape)\n","\n","        perturbation = beta * Z\n","        perturbed_q_values = q + perturbation\n","        action = np.argmax(perturbed_q_values)\n","\n","        self.action_counts[action] += 1\n","        return action, np.sum(self.action_counts)\n","\n","    def get_config(self):\n","        \"\"\"Return configurations of BoltzmannGumbelQPolicy\n","        # Returns\n","            Dict of config\n","        \"\"\"\n","        config = super(BoltzmannGumbelQPolicy, self).get_config()\n","        config['C'] = self.C\n","        return config\n"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bVT025fgusjo"},"source":["### 3.2 Networks"]},{"cell_type":"markdown","metadata":{"id":"HImaaq9ovNv3"},"source":["#### 3.2.1 Utilities\n"]},{"cell_type":"code","metadata":{"id":"n_XXrFzJvSR-","executionInfo":{"status":"ok","timestamp":1613495338834,"user_tz":180,"elapsed":5147,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["def huber_loss(y_true, y_pred, clip_value):\n","\t# Huber loss, see https://en.wikipedia.org/wiki/Huber_loss and\n","\t# https://medium.com/@karpathy/yes-you-should-understand-backprop-e2f06eab496b\n","\t# for details.\n","\tassert clip_value > 0.\n","\n","\tx = y_true - y_pred\n","\tif np.isinf(clip_value):\n","\t\t# Spacial case for infinity since Tensorflow does have problems\n","\t\t# if we compare `K.abs(x) < np.inf`.\n","\t\treturn .5 * K.square(x)\n","\n","\tcondition = K.abs(x) < clip_value\n","\tsquared_loss = .5 * K.square(x)\n","\tlinear_loss = clip_value * (K.abs(x) - .5 * clip_value)\n","\n","\tif hasattr(tf, 'select'):\n","\t\treturn tf.select(condition, squared_loss, linear_loss)  # condition, true, false\n","\telse:\n","\t\treturn tf.where(condition, squared_loss, linear_loss)  # condition, true, false\n","\n","def clipped_error(y_true, y_pred):\n","\treturn K.mean(huber_loss(y_true, y_pred, clip_value = 1.), axis = -1)"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aaPcM8lLvaYT"},"source":["#### 3.2.2 Noisy layers"]},{"cell_type":"code","metadata":{"id":"2T-q75K2vaJj","executionInfo":{"status":"ok","timestamp":1613495340341,"user_tz":180,"elapsed":6645,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["\"\"\"THIS\"\"\"\n","#!/usr/bin/env python3\n","# -*- coding: utf-8 -*-\n","\n","import numpy as np\n","\n","import tensorflow as tf\n","from tensorflow.python.framework import tensor_shape\n","from tensorflow.python.layers import base\n","from tensorflow.python.ops.init_ops import Constant\n","\n","import keras\n","from keras.layers import Dense\n","from keras import backend as K\n","from keras.engine.topology import Layer\n","from keras import activations, initializers, regularizers, constraints\n","\n","\n","class SimplifiedNoisyDense(Layer):\n","    \"\"\"From OctThe16th repo.\"\"\"\n","    def __init__(self, units,\n","                 sigma_init=0.02,\n","                 activation=None,\n","                 use_bias=True,\n","                 kernel_initializer='glorot_uniform',\n","                 bias_initializer='zeros',\n","                 kernel_regularizer=None,\n","                 bias_regularizer=None,\n","                 activity_regularizer=None,\n","                 kernel_constraint=None,\n","                 bias_constraint=None,\n","                 **kwargs):\n","        if 'input_shape' not in kwargs and 'input_dim' in kwargs:\n","            kwargs['input_shape'] = (kwargs.pop('input_dim'),)\n","        super(SimplifiedNoisyDense, self).__init__(**kwargs)\n","        self.units = units\n","        self.sigma_init = sigma_init\n","        self.activation = activations.get(activation)\n","        self.use_bias = use_bias\n","        self.kernel_initializer = initializers.get(kernel_initializer)\n","        self.bias_initializer = initializers.get(bias_initializer)\n","        self.kernel_regularizer = regularizers.get(kernel_regularizer)\n","        self.bias_regularizer = regularizers.get(bias_regularizer)\n","        self.activity_regularizer = regularizers.get(activity_regularizer)\n","        self.kernel_constraint = constraints.get(kernel_constraint)\n","        self.bias_constraint = constraints.get(bias_constraint)\n","\n","    def build(self, input_shape):\n","        assert len(input_shape) >= 2\n","        self.input_dim = input_shape[-1]\n","\n","        self.kernel = self.add_weight(shape=(self.input_dim, self.units),\n","                                      initializer=self.kernel_initializer,\n","                                      name='kernel',\n","                                      regularizer=self.kernel_regularizer,\n","                                      constraint=self.kernel_constraint)\n","\n","        self.sigma_kernel = self.add_weight(shape=(self.input_dim, self.units),\n","                                      initializer=initializers.Constant(value=self.sigma_init),\n","                                      name='sigma_kernel'\n","                                      )\n","\n","\n","        if self.use_bias:\n","            self.bias = self.add_weight(shape=(self.units,),\n","                                        initializer=self.bias_initializer,\n","                                        name='bias',\n","                                        regularizer=self.bias_regularizer,\n","                                        constraint=self.bias_constraint)\n","            self.sigma_bias = self.add_weight(shape=(self.units,),\n","                                        initializer=initializers.Constant(value=self.sigma_init),\n","                                        name='sigma_bias')\n","        else:\n","            self.bias = None\n","            self.epsilon_bias = None\n","\n","        self.epsilon_kernel = K.zeros(shape=(self.input_dim, self.units))\n","        self.epsilon_bias = K.zeros(shape=(self.units,))\n","\n","        self.sample_noise()\n","        super(SimplifiedNoisyDense, self).build(input_shape)\n","\n","\n","    def call(self, X):\n","        perturbation = self.sigma_kernel * self.epsilon_kernel\n","        perturbed_kernel = self.kernel + perturbation\n","        output = K.dot(X, perturbed_kernel)\n","        if self.use_bias:\n","            bias_perturbation = self.sigma_bias * self.epsilon_bias\n","            perturbed_bias = self.bias + bias_perturbation\n","            output = K.bias_add(output, perturbed_bias)\n","        if self.activation is not None:\n","            output = self.activation(output)\n","        return output\n","\n","    def compute_output_shape(self, input_shape):\n","        assert input_shape and len(input_shape) >= 2\n","        assert input_shape[-1]\n","        output_shape = list(input_shape)\n","        output_shape[-1] = self.units\n","        return tuple(output_shape)\n","\n","    def sample_noise(self):\n","        K.set_value(self.epsilon_kernel, np.random.normal(0, 1, (self.input_dim, self.units)))\n","        K.set_value(self.epsilon_bias, np.random.normal(0, 1, (self.units,)))\n","\n","    def remove_noise(self):\n","        K.set_value(self.epsilon_kernel, np.zeros(shape=(self.input_dim, self.units)))\n","        K.set_value(self.epsilon_bias, np.zeros(shape=self.units,))\n","\n","class NoisyDense(Dense):\n","    \"\"\"From spring01's drlbox repo.\"\"\"\n","    def build(self, input_shape):\n","        input_shape = tensor_shape.TensorShape(input_shape)\n","        if input_shape[-1].value is None:\n","            raise ValueError('The last dimension of the inputs to `Dense` '\n","                             'should be defined. Found `None`.')\n","        self.input_spec = base.InputSpec(min_ndim=2,\n","                                         axes={-1: input_shape[-1].value})\n","        kernel_shape = [input_shape[-1].value, self.units]\n","        kernel_quiet = self.add_weight('kernel_quiet',\n","                                         shape=kernel_shape,\n","                                         initializer=self.kernel_initializer,\n","                                         regularizer=self.kernel_regularizer,\n","                                         constraint=self.kernel_constraint,\n","                                         trainable=True)\n","        scale_init = Constant(value=(0.5 / np.sqrt(kernel_shape[0])))\n","        kernel_noise_scale = self.add_weight('kernel_noise_scale',\n","                                               shape=kernel_shape,\n","                                               initializer=scale_init,\n","                                               trainable=True)\n","        kernel_noise = self.make_kernel_noise(shape=kernel_shape)\n","        self.kernel = kernel_quiet + kernel_noise_scale * kernel_noise\n","        if self.use_bias:\n","            bias_shape = [self.units,]\n","            bias_quiet = self.add_weight('bias_quiet',\n","                                           shape=bias_shape,\n","                                           initializer=self.bias_initializer,\n","                                           regularizer=self.bias_regularizer,\n","                                           constraint=self.bias_constraint,\n","                                           trainable=True)\n","            bias_noise_scale = self.add_weight(name='bias_noise_scale',\n","                                                 shape=bias_shape,\n","                                                 initializer=scale_init,\n","                                                 trainable=True)\n","            bias_noise = self.make_bias_noise(shape=bias_shape)\n","            self.bias = bias_quiet + bias_noise_scale * bias_noise\n","        else:\n","            self.bias = None\n","        self.built = True\n","\n","    def make_kernel_noise(self, shape):\n","        raise NotImplementedError\n","\n","    def make_bias_noise(self, shape):\n","        raise NotImplementedError\n","\n","\n","class NoisyDenseIG(NoisyDense):\n","    '''\n","    Noisy dense layer with independent Gaussian noise\n","    '''\n","    def make_kernel_noise(self, shape):\n","        noise = tf.random_normal(shape)\n","        kernel_noise = tf.Variable(noise, trainable=False)\n","        self.noise_list = [kernel_noise]\n","        return kernel_noise\n","\n","    def make_bias_noise(self, shape):\n","        noise = tf.random_normal(shape)\n","        bias_noise = tf.Variable(noise, trainable=False)\n","        self.noise_list.append(bias_noise)\n","        return bias_noise\n","\n","\n","class NoisyDenseFG(NoisyDense):\n","    '''\n","    Noisy dense layer with factorized Gaussian noise\n","    '''\n","    def make_kernel_noise(self, shape):\n","        kernel_noise_input = self.make_fg_noise(shape=[shape[0]])\n","        kernel_noise_output = self.make_fg_noise(shape=[shape[1]])\n","        self.noise_list = [kernel_noise_input, kernel_noise_output]\n","        kernel_noise = kernel_noise_input[:, tf.newaxis] * kernel_noise_output\n","        return kernel_noise\n","\n","    def make_bias_noise(self, shape):\n","        return self.noise_list[1] # kernel_noise_output\n","\n","    def make_fg_noise(self, shape):\n","        noise = tf.random_normal(shape)\n","        trans_noise = tf.sign(noise) * tf.sqrt(tf.abs(noise))\n","        return tf.Variable(trans_noise, trainable=False)\n"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4U6wkiWV1Y3k"},"source":["#### 3.2.3 Custom optimizers"]},{"cell_type":"code","metadata":{"id":"BPP-T0p11bwQ","executionInfo":{"status":"ok","timestamp":1613495342138,"user_tz":180,"elapsed":8432,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["from __future__ import absolute_import\n","\n","from keras import backend as K\n","from keras.optimizers import Optimizer\n","#from keras.legacy import interfaces\n","\n","from tensorflow.python.ops import state_ops\n","from tensorflow.python.ops import math_ops\n","from tensorflow.python.util.tf_export import tf_export\n","\n","if K.backend() == 'tensorflow':\n","    import tensorflow as tf\n","\n","class COCOB(Optimizer):\n","    \"\"\"COCOB-Backprop optimizer.\n","    It is recommended to leave the parameters of this optimizer\n","    at their default values\n","    (except the learning rate, which can be freely tuned).\n","    This optimizer, unlike other stochastic gradient based optimizers, optimize the function by\n","    finding individual learning rates in a coin-betting way.\n","    # Arguments\n","        alphs: float >= 0. Multiples of the largest absolute magtitude of gradients.\n","        epsilon: float >= 0. Fuzz factor.\n","    # References\n","        - [Training Deep Networks without Learning Rates Through Coin Betting](http://https://arxiv.org/pdf/1705.07795.pdf)\n","    \"\"\"\n","\n","    def __init__(self, alpha=100, epsilon=1e-8, **kwargs):\n","        super(COCOB, self).__init__(**kwargs)\n","        with K.name_scope(self.__class__.__name__):\n","            self.alpha = K.variable(alpha, name='alpha')\n","            self.iterations = K.variable(0., name='iterations')\n","        self.epsilon = epsilon\n","\n","    def get_updates(self, loss, params):\n","        grads = self.get_gradients(loss, params)\n","        self.updates = [K.update_add(self.iterations, 1)]\n","\n","        L = [K.zeros(K.get_variable_shape(p), dtype=K.dtype(p)) for p in params]\n","        M = [K.zeros(K.get_variable_shape(p), dtype=K.dtype(p)) for p in params]\n","        Reward = [K.zeros(K.get_variable_shape(p), dtype=K.dtype(p)) for p in params]\n","        grad_sum = [K.zeros(K.get_variable_shape(p), dtype=K.dtype(p)) for p in params]\n","\n","        if K.eval(self.iterations) == 0:\n","            old_params = [K.constant(K.eval(p)) for p in params]\n","            # [K.eval(p) for p in params]\n","\n","        self.weights = [self.iterations] + L + M + Reward + grad_sum\n","\n","        for old_p, p, g, gs, l, m, r in zip(old_params, params, grads, grad_sum, L, M, Reward):\n","            # update accumulator\n","            # old_p = K.variable(old_p)\n","\n","            new_l = K.maximum(l, K.abs(g))\n","            self.updates.append(K.update(l, new_l))\n","\n","            new_m = m + K.abs(g)\n","            self.updates.append(K.update(m, new_m))\n","\n","            new_r = K.maximum(r - (p - old_p)*g, 0)\n","            self.updates.append(K.update(r, new_r))\n","\n","            new_gs = gs + g\n","            self.updates.append(K.update(gs, new_gs))\n","\n","            new_p = old_p - (new_gs/(self.epsilon + new_l*K.maximum(new_m+new_l, self.alpha*new_l)))*(new_l + new_r)\n","\n","            # Apply constraints.\n","            if getattr(p, 'constraint', None) is not None:\n","                new_p = p.constraint(new_p)\n","\n","            self.updates.append(K.update(p, new_p))\n","        return self.updates\n","\n","    def get_config(self):\n","        config = {'alpha': float(K.get_value(self.alpha)),\n","                  'epsilon': self.epsilon}\n","        base_config = super(COCOB, self).get_config()\n","        return dict(list(base_config.items()) + list(config.items()))\n","\n","\n","class SMORMS3(Optimizer):\n","    '''SMORMS3 optimizer.\n","    Implemented based on http://sifter.org/~simon/journal/20150420.html\n","    # Arguments\n","        lr: float >= 0. Learning rate.\n","        epsilon: float >= 0. Fuzz factor.\n","        decay: float >= 0. Learning rate decay over each update.\n","    '''\n","\n","    def __init__(self, lr=0.001, epsilon=1e-16, decay=0.,\n","                 **kwargs):\n","        super(SMORMS3, self).__init__(**kwargs)\n","        self.__dict__.update(locals())\n","        with K.name_scope(self.__class__.__name__):\n","            self.lr = K.variable(lr)\n","            # self.rho = K.variable(rho)\n","            self.decay = K.variable(decay)\n","            self.inital_decay = decay\n","            self.iterations = K.variable(0.)\n","        self.epsilon = epsilon\n","        self.initial_decay = decay\n","\n","    def get_updates(self, loss, params):\n","        grads = self.get_gradients(loss, params)\n","        shapes = [K.get_variable_shape(p) for p in params]\n","        self.updates.append(K.update_add(self.iterations, 1))\n","\n","        g1s = [K.zeros(shape) for shape in shapes]\n","        g2s = [K.zeros(shape) for shape in shapes]\n","        mems = [K.ones(shape) for shape in shapes]\n","\n","        lr = self.lr\n","        if self.inital_decay > 0:\n","            lr *= (1. / (1. + self.decay * self.iterations))\n","\n","        self.weights = [self.iterations] + g1s + g2s + mems\n","\n","        for p, g, g1, g2, m in zip(params, grads, g1s, g2s, mems):\n","            r = 1. / (m + 1)\n","            new_g1 = (1. - r) * g1 + r * g\n","            new_g2 = (1. - r) * g2 + r * K.square(g)\n","            # update accumulators\n","            self.updates.append(K.update(g1, new_g1))\n","            self.updates.append(K.update(g2, new_g2))\n","            new_p = p - g * K.minimum(lr, K.square(new_g1) / (new_g2 + self.epsilon)) / (\n","            K.sqrt(new_g2) + self.epsilon)\n","            new_m = 1 + m * (1 - K.square(new_g1) / (new_g2 + self.epsilon))\n","            # update rho\n","            self.updates.append(K.update(m, new_m))\n","            # apply constraints\n","            if getattr(p, 'constraint', None) is not None:\n","                new_p = p.constraint(new_p)\n","\n","            self.updates.append(K.update(p, new_p))\n","        return self.updates\n","\n","    def get_config(self):\n","        config = {'lr': float(K.get_value(self.lr)),\n","                  'decay': float(K.get_value(self.decay)),\n","                  'epsilon': self.epsilon}\n","        base_config = super(SMORMS3, self).get_config()\n","        return dict(list(base_config.items()) + list(config.items()))\n","\n","class Yogi(Optimizer):\n","    \"\"\"Yogi optimizer.\n","    Default parameters follow those provided in the original paper.\n","    Arguments:\n","      lr: float >= 0. Learning rate.\n","      beta_1: float, 0 < beta < 1. Generally close to 1.\n","      beta_2: float, 0 < beta < 1. Generally close to 1.\n","      epsilon: float >= 0. Fuzz factor. If `None`, defaults to `K.epsilon()`.\n","      decay: float >= 0. Learning rate decay over each update.\n","      amsgrad: boolean. Whether to apply the AMSGrad variant of this\n","          algorithm from the paper \"On the Convergence of Adam and\n","          Beyond\".\n","    \"\"\"\n","\n","    def __init__(self,\n","               lr=0.001,\n","               beta_1=0.9,\n","               beta_2=0.999,\n","               epsilon=None,\n","               decay=0.00000001,\n","               amsgrad=False,\n","               **kwargs):\n","        super(Yogi, self).__init__(**kwargs)\n","        with K.name_scope(self.__class__.__name__):\n","            self.iterations = K.variable(0, dtype='int64', name='iterations')\n","            self.lr = K.variable(lr, name='lr')\n","            self.beta_1 = K.variable(beta_1, name='beta_1')\n","            self.beta_2 = K.variable(beta_2, name='beta_2')\n","            self.decay = K.variable(decay, name='decay')\n","        if epsilon is None:\n","            epsilon = K.epsilon()\n","        self.epsilon = epsilon\n","        self.initial_decay = decay\n","        self.amsgrad = amsgrad\n","\n","    def get_updates(self, loss, params):\n","        grads = self.get_gradients(loss, params)\n","        self.updates = [state_ops.assign_add(self.iterations, 1)]\n","\n","        lr = self.lr\n","        if self.initial_decay > 0:\n","            lr = lr * (  # pylint: disable=g-no-augmented-assignment\n","                1. / (1. + self.decay * math_ops.cast(self.iterations,\n","                                                    K.dtype(self.decay))))\n","\n","        t = math_ops.cast(self.iterations, K.floatx()) + 1\n","        lr_t = lr * (\n","            K.sqrt(1. - math_ops.pow(self.beta_2, t)) /\n","            (1. - math_ops.pow(self.beta_1, t)))\n","\n","        ms = [K.zeros(K.int_shape(p), dtype=K.dtype(p)) for p in params]\n","        vs = [K.zeros(K.int_shape(p), dtype=K.dtype(p)) for p in params]\n","        if self.amsgrad:\n","            vhats = [K.zeros(K.int_shape(p), dtype=K.dtype(p)) for p in params]\n","        else:\n","            vhats = [K.zeros(1) for _ in params]\n","        self.weights = [self.iterations] + ms + vs + vhats\n","\n","        for p, g, m, v, vhat in zip(params, grads, ms, vs, vhats):\n","            m_t = (self.beta_1 * m) + (1. - self.beta_1) * g\n","            #v_t = (self.beta_2 * v) + (1. - self.beta_2) * math_ops.square(g) # from amsgrad\n","            v_t = v - (1-self.beta_2)*K.sign(v-math_ops.square(g))*math_ops.square(g)\n","            p_t = p - lr_t * m_t / (K.sqrt(v_t) + self.epsilon)\n","\n","            self.updates.append(state_ops.assign(m, m_t))\n","            self.updates.append(state_ops.assign(v, v_t))\n","            new_p = p_t\n","\n","            # Apply constraints.\n","            if getattr(p, 'constraint', None) is not None:\n","                new_p = p.constraint(new_p)\n","\n","            self.updates.append(state_ops.assign(p, new_p))\n","        return self.updates\n","\n","    def get_config(self):\n","        config = {\n","            'lr': float(K.get_value(self.lr)),\n","            'beta_1': float(K.get_value(self.beta_1)),\n","            'beta_2': float(K.get_value(self.beta_2)),\n","            'decay': float(K.get_value(self.decay)),\n","            'epsilon': self.epsilon,\n","            'amsgrad': self.amsgrad\n","            }\n","        base_config = super(Yogi, self).get_config()\n","        return dict(list(base_config.items()) + list(config.items()))\n","\n","class Nadamax(Optimizer):\n","    \"\"\"Nesterov Adam optimizer with infinity norm.\n","    Much like Adam is essentially RMSprop with momentum,\n","    Nadam is Adam RMSprop with Nesterov momentum.\n","    Default parameters follow those provided in the paper.\n","    It is recommended to leave the parameters of this optimizer\n","    at their default values.\n","    # Arguments\n","        lr: float >= 0. Learning rate.\n","        beta_1/beta_2: floats, 0 < beta < 1. Generally close to 1.\n","        epsilon: float >= 0. Fuzz factor.\n","    # References\n","        - [Nadam report](http://cs229.stanford.edu/proj2015/054_report.pdf)\n","        - [On the importance of initialization and momentum in deep learning](http://www.cs.toronto.edu/~fritz/absps/momentum.pdf)\n","    \"\"\"\n","\n","    def __init__(self, lr=0.002, beta_1=0.9, beta_2=0.999,\n","                 epsilon=1e-8, schedule_decay=0.004, **kwargs):\n","        super(Nadamax, self).__init__(**kwargs)\n","        with K.name_scope(self.__class__.__name__):\n","            self.iterations = K.variable(0, dtype='int64', name='iterations')\n","            self.m_schedule = K.variable(1., name='m_schedule')\n","            self.lr = K.variable(lr, name='lr')\n","            self.beta_1 = K.variable(beta_1, name='beta_1')\n","            self.beta_2 = K.variable(beta_2, name='beta_2')\n","        self.epsilon = epsilon\n","        self.schedule_decay = schedule_decay\n","\n","    #@interfaces.legacy_get_updates_support\n","    def get_updates(self, loss, params):\n","        grads = self.get_gradients(loss, params)\n","        self.updates = [K.update_add(self.iterations, 1)]\n","\n","        t = K.cast(self.iterations, K.floatx()) + 1\n","\n","        # Due to the recommendations in [2], i.e. warming momentum schedule\n","        momentum_cache_t = self.beta_1 * (1. - 0.5 * (K.pow(K.cast_to_floatx(0.96), t * self.schedule_decay)))\n","        momentum_cache_t_1 = self.beta_1 * (1. - 0.5 * (K.pow(K.cast_to_floatx(0.96), (t + 1) * self.schedule_decay)))\n","        m_schedule_new = self.m_schedule * momentum_cache_t\n","        m_schedule_next = self.m_schedule * momentum_cache_t * momentum_cache_t_1\n","        self.updates.append((self.m_schedule, m_schedule_new))\n","\n","        shapes = [K.int_shape(p) for p in params]\n","        ms = [K.zeros(shape) for shape in shapes]\n","        vs = [K.zeros(shape) for shape in shapes]\n","\n","        self.weights = [self.iterations] + ms + vs\n","\n","        for p, g, m, v in zip(params, grads, ms, vs):\n","            # the following equations given in [1]\n","            g_prime = g / (1. - m_schedule_new)\n","            m_t = self.beta_1 * m + (1. - self.beta_1) * g\n","            m_t_prime = m_t / (1. - m_schedule_next)\n","            v_t = K.maximum(self.beta_2 * v, K.abs(g))\n","            v_t_prime = v_t / (1. - K.pow(self.beta_2, t))\n","            m_t_bar = (1. - momentum_cache_t) * g_prime + momentum_cache_t_1 * m_t_prime\n","\n","            self.updates.append(K.update(m, m_t))\n","            self.updates.append(K.update(v, v_t))\n","\n","            p_t = p - self.lr * m_t_bar / (K.sqrt(v_t_prime) + self.epsilon)\n","            new_p = p_t\n","\n","            # Apply constraints.\n","            if getattr(p, 'constraint', None) is not None:\n","                new_p = p.constraint(new_p)\n","\n","            self.updates.append(K.update(p, new_p))\n","        return self.updates\n","\n","    def get_config(self):\n","        config = {'lr': float(K.get_value(self.lr)),\n","                  'beta_1': float(K.get_value(self.beta_1)),\n","                  'beta_2': float(K.get_value(self.beta_2)),\n","                  'epsilon': self.epsilon,\n","                  'schedule_decay': self.schedule_decay}\n","        base_config = super(Nadamax, self).get_config()\n","        return dict(list(base_config.items()) + list(config.items()))\n","\n","\n","class Radamax(Optimizer):\n","    \"\"\"Nesterov Adam optimizer with infinity norm.\n","    Much like Adam is essentially RMSprop with momentum,\n","    Nadam is Adam RMSprop with Nesterov momentum.\n","    Default parameters follow those provided in the paper.\n","    It is recommended to leave the parameters of this optimizer\n","    at their default values.\n","    # Arguments\n","        lr: float >= 0. Learning rate.\n","        beta_1/beta_2: floats, 0 < beta < 1. Generally close to 1.\n","        epsilon: float >= 0. Fuzz factor.\n","    # References\n","        - [Nadam report](http://cs229.stanford.edu/proj2015/054_report.pdf)\n","        - [On the importance of initialization and momentum in deep learning](http://www.cs.toronto.edu/~fritz/absps/momentum.pdf)\n","    \"\"\"\n","\n","    def __init__(self, lr=0.002, beta_1=0.9, beta_2=0.999,\n","                 epsilon=1e-8, schedule_decay=0.004, **kwargs):\n","        super(Radamax, self).__init__(**kwargs)\n","        with K.name_scope(self.__class__.__name__):\n","            self.iterations = K.variable(0, dtype='int64', name='iterations')\n","            self.m_schedule = K.variable(1., name='m_schedule')\n","            self.lr = K.variable(lr, name='lr')\n","            self.beta_1 = K.variable(beta_1, name='beta_1')\n","            self.beta_2 = K.variable(beta_2, name='beta_2')\n","        self.epsilon = epsilon\n","        self.schedule_decay = schedule_decay\n","\n","    #@interfaces.legacy_get_updates_support\n","    def get_updates(self, loss, params):\n","        grads = self.get_gradients(loss, params)\n","        self.updates = [K.update_add(self.iterations, 1)]\n","\n","        t = K.cast(self.iterations, K.floatx()) + 1\n","\n","        # Due to the recommendations in [2], i.e. warming momentum schedule\n","        momentum_cache_t = self.beta_1 * (1. - 0.5 * (K.pow(K.cast_to_floatx(0.96), t * self.schedule_decay)))\n","        momentum_cache_t_1 = self.beta_1 * (1. - 0.5 * (K.pow(K.cast_to_floatx(0.96), (t + 1) * self.schedule_decay)))\n","        m_schedule_new = self.m_schedule * momentum_cache_t\n","        m_schedule_next = self.m_schedule * momentum_cache_t * momentum_cache_t_1\n","        self.updates.append((self.m_schedule, m_schedule_new))\n","\n","        shapes = [K.int_shape(p) for p in params]\n","        ms = [K.zeros(shape) for shape in shapes]\n","        vs = [K.zeros(shape) for shape in shapes]\n","\n","        self.weights = [self.iterations] + ms + vs\n","\n","        for p, g, m, v in zip(params, grads, ms, vs):\n","            # the following equations given in [1]\n","            g_prime = g / (1. - m_schedule_new)\n","            m_t = self.beta_1 * m + (1. - self.beta_1) * g\n","            m_t_prime = m_t / (1. - m_schedule_next)\n","            if np.random.choice([1, -1]) == 1:\n","                v_t = self.beta_2 * v + (1. - self.beta_2) * K.square(g)\n","            else:\n","                v_t = K.maximum(self.beta_2 * v, K.abs(g))\n","            v_t_prime = v_t / (1. - K.pow(self.beta_2, t))\n","            m_t_bar = (1. - momentum_cache_t) * g_prime + momentum_cache_t_1 * m_t_prime\n","\n","            self.updates.append(K.update(m, m_t))\n","            self.updates.append(K.update(v, v_t))\n","\n","            p_t = p - self.lr * m_t_bar / (K.sqrt(v_t_prime) + self.epsilon)\n","            new_p = p_t\n","\n","            # Apply constraints.\n","            if getattr(p, 'constraint', None) is not None:\n","                new_p = p.constraint(new_p)\n","\n","            self.updates.append(K.update(p, new_p))\n","        return self.updates\n","\n","    def get_config(self):\n","        config = {'lr': float(K.get_value(self.lr)),\n","                  'beta_1': float(K.get_value(self.beta_1)),\n","                  'beta_2': float(K.get_value(self.beta_2)),\n","                  'epsilon': self.epsilon,\n","                  'schedule_decay': self.schedule_decay}\n","        base_config = super(Radamax, self).get_config()\n","        return dict(list(base_config.items()) + list(config.items()))\n","\n","\n","class AdamDelta(Optimizer):\n","    \"\"\"AdamDelta optimizer.\n","    Default parameters follow those provided in the original paper.\n","    # Arguments\n","        lr: float >= 0. Learning rate.\n","        beta_1: float, 0 < beta < 1. Generally close to 1.\n","        beta_2: float, 0 < beta < 1. Generally close to 1.\n","        epsilon: float >= 0. Fuzz factor.\n","        decay: float >= 0. Learning rate decay over each update.\n","    # References\n","        - [Adam - A Method for Stochastic Optimization](http://arxiv.org/abs/1412.6980v8)\n","    \"\"\"\n","\n","    def __init__(self, lr=0.001, beta_1=0.9, beta_2=0.999, rho=0.95,\n","                 epsilon=1e-8, decay=0., **kwargs):\n","        super(AdamDelta, self).__init__(**kwargs)\n","        with K.name_scope(self.__class__.__name__):\n","            self.iterations = K.variable(0, dtype='int64', name='iterations')\n","            self.lr = K.variable(lr, name='lr')\n","            self.beta_1 = K.variable(beta_1, name='beta_1')\n","            self.beta_2 = K.variable(beta_2, name='beta_2')\n","            self.rho = rho\n","            self.decay = K.variable(decay, name='decay')\n","        self.epsilon = epsilon\n","        self.initial_decay = decay\n","\n","    #@interfaces.legacy_get_updates_support\n","    def get_updates(self, loss, params):\n","        grads = self.get_gradients(loss, params)\n","        shapes = [K.int_shape(p) for p in params]\n","        accumulators = [K.zeros(shape) for shape in shapes]\n","        delta_accumulators = [K.zeros(shape) for shape in shapes]\n","\n","        self.updates = [K.update_add(self.iterations, 1)]\n","\n","        lr = self.lr\n","        if self.initial_decay > 0:\n","            lr *= (1. / (1. + self.decay * K.cast(self.iterations,\n","                                                  K.dtype(self.decay))))\n","\n","        t = K.cast(self.iterations, K.floatx()) + 1\n","        lr_t = lr * (K.sqrt(1. - K.pow(self.beta_2, t)) /\n","                     (1. - K.pow(self.beta_1, t)))\n","\n","        ms = [K.zeros(K.int_shape(p), dtype=K.dtype(p)) for p in params]\n","        vs = [K.zeros(K.int_shape(p), dtype=K.dtype(p)) for p in params]\n","\n","        self.weights = [self.iterations] + ms + vs\n","\n","        for p, g, m, v, a, d_a in zip(params, grads, ms, vs, accumulators, delta_accumulators):\n","            # update accumulator\n","            new_a = self.rho * a + (1. - self.rho) * K.square(g)\n","            self.updates.append(K.update(a, new_a))\n","\n","            # use the new accumulator and the *old* delta_accumulator\n","            update = g * K.sqrt(d_a + self.epsilon) / K.sqrt(new_a + self.epsilon)\n","\n","            m_t = (self.beta_1 * m) + (1. - self.beta_1) * update\n","            v_t = (self.beta_2 * v) + (1. - self.beta_2) * K.square(update)\n","            p_t = p - lr_t * m_t / (K.sqrt(v_t) + self.epsilon)\n","\n","            self.updates.append(K.update(m, m_t))\n","            self.updates.append(K.update(v, v_t))\n","            new_p = p_t\n","\n","            # Apply constraints.\n","            if getattr(p, 'constraint', None) is not None:\n","                new_p = p.constraint(new_p)\n","\n","            self.updates.append(K.update(p, new_p))\n","        return self.updates\n","\n","    def get_config(self):\n","        config = {'lr': float(K.get_value(self.lr)),\n","                  'beta_1': float(K.get_value(self.beta_1)),\n","                  'beta_2': float(K.get_value(self.beta_2)),\n","                  'decay': float(K.get_value(self.decay)),\n","                  'epsilon': self.epsilon}\n","        base_config = super(AdamDelta, self).get_config()\n","        return dict(list(base_config.items()) + list(config.items()))\n"],"execution_count":15,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mTEP4sBb06FZ"},"source":["#### 3.2.4 Model creation"]},{"cell_type":"code","metadata":{"id":"C5lCM8Kwu3v_","executionInfo":{"status":"ok","timestamp":1613495342149,"user_tz":180,"elapsed":8431,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["\"\"\"THIS\"\"\"\n","#!/usr/bin/env python\n","\n","\"\"\" Needs update!\n","\"\"\"\n","\n","import numpy as np\n","import tensorflow as tf\n","try:\n","    from keras.optimizers import RMSprop, Nadam, Adadelta, Adam, Ftrl\n","    from keras.models import Sequential, load_model, Model\n","    from keras.layers import *\n","    from keras.regularizers import l2\n","    from keras import backend as K\n","\n","    K.set_image_data_format('channels_first')\n","except ImportError:\n","    from tensorflow.keras.optimizers import RMSprop, Nadam, Adadelta, Adam, Ftrl\n","    from tensorflow.keras.models import Sequential, load_model, Model\n","    from tensorflow.keras.layers import *\n","\n","__author__ = \"Victor Neves\"\n","__license__ = \"MIT\"\n","__maintainer__ = \"Victor Neves\"\n","__email__ = \"victorneves478@gmail.com\"\n","\n","DENSES = {'dense': Dense,\n","          'noisy_dense_fg': NoisyDenseFG,\n","          'noisy_dense_ig': NoisyDenseIG,\n","          'simplified_noisy_dense': SimplifiedNoisyDense}\n","\n","def select_optimizer(optimizer):\n","    assert optimizer in {'Nadam',\n","                         'Adam-AMS',\n","                         'RMSprop',\n","                         'Adadelta',\n","                         'Adam',\n","                         'Ftrl'}, \"Optimizer should be RMSprop, Nadam, Adadelta, Adam or Ftrl.\"\n","\n","    if optimizer == 'Nadam':\n","        optimizer = Nadam()     \n","    elif optimizer == 'Adadelta':\n","        optimizer = Adadelta()\n","    elif optimizer == 'Adam':\n","        optimizer = Adam()\n","    elif optimizer == 'Adam-AMS':\n","        optimizer = Adam(amsgrad = True)           \n","    elif optimizer == 'Ftrl':\n","        optimizer = Ftrl()\n","    else:\n","        optimizer = RMSprop()\n","\n","    return optimizer\n","\n","def select_error(error):\n","    assert type(error) is str, \"Should use string to select error.\"\n","\n","    if error == 'huber_loss':\n","        error = tf.losses.Huber()\n","\n","    return error\n","\n","def CNN1(inputs):\n","    net = Conv2D(16, (3, 3), activation = 'relu')(inputs)\n","    net = Conv2D(32, (3, 3), activation = 'relu')(net)\n","\n","    return model\n","\n","def CNN2(inputs):\n","    net = Conv2D(16, (3, 3), activation = 'relu')(inputs)\n","    net = Conv2D(32, (3, 3), activation = 'relu')(net)\n","    net = Conv2D(32, (3, 3), activation = 'relu')(net)\n","    net = Flatten()(net)\n","\n","    return model\n","\n","def CNN3(inputs):\n","    \"\"\"From @Kaixhin implementation's of the Rainbow paper.\"\"\"\n","    net = Conv2D(32, (3, 3), activation = 'relu')(inputs)\n","    net = Conv2D(64, (2, 2), activation = 'relu')(net)\n","    net = Conv2D(64, (1, 1), activation = 'relu')(net)\n","    net = Flatten()(net)\n","\n","    return net\n","\n","def CNN4(inputs):\n","    \"\"\"From @aqtq314 implementation's of the AlphaZero.\"\"\"\n","    l2const = 1e-4\n","    \n","    net = Conv2D(32, (3, 3), kernel_regularizer = l2(l2const))(inputs)\n","    net = Activation(\"relu\")(net)    \n","    net = Conv2D(64, (2, 2), kernel_regularizer = l2(l2const))(net)\n","    net = Activation(\"relu\")(net)    \n","    net = Conv2D(64, (1, 1), kernel_regularizer = l2(l2const))(net)\n","    net = Activation(\"relu\")(net)\n","    net = Flatten()(net)   \n","\n","    return net\n","\n","def create_cnn(cnn, inputs):\n","    if cnn == \"CNN1\":\n","        net = CNN1(inputs)\n","    elif cnn == \"CNN2\":\n","        net = CNN2(inputs)\n","    elif cnn == \"CNN4\":\n","        net = CNN4(inputs)        \n","    else:\n","        net = CNN3(inputs)\n","\n","    return net\n","\n","def create_model(optimizer, loss, stack, input_size, output_size,\n","                 dueling = False, cnn = \"CNN3\", dense_type = \"dense\"):\n","    optimizer = select_optimizer(optimizer)\n","    loss = select_error(loss)\n","    inputs = Input(shape = (stack, input_size, input_size))\n","    net = create_cnn(cnn, inputs)\n","\n","    if dueling:\n","        advt = DENSES[dense_type](3136, activation = 'relu')(net)\n","        advt = DENSES[dense_type](output_size)(advt)\n","        value = DENSES[dense_type](3136, activation = 'relu')(net)\n","        value = DENSES[dense_type](1)(value)\n","\n","        # now to combine the two streams\n","        advt = Lambda(lambda advt: advt - tf.reduce_mean(advt, axis = -1,\n","                                                         keepdims = True))(advt)\n","        value = Lambda(lambda value: tf.tile(value, [1, output_size]))(value)\n","        final = Add()([value, advt])\n","    else:\n","        final = DENSES[dense_type](3136, activation = 'relu')(net)\n","        final = DENSES[dense_type](output_size)(final)\n","\n","    model = Model(inputs = inputs, outputs = final)\n","    model.compile(optimizer = optimizer, loss = loss)\n","    model.summary()\n","\n","    return model\n","\n","\n","class Networks(object):\n","\n","    @staticmethod\n","    def actor_network(input_shape, action_size, learning_rate):\n","        \"\"\"Actor Network for A2C\n","        \"\"\"\n","\n","        model = Sequential()\n","        model.add(Conv2D(32, (4, 4), input_shape=(input_shape), activation = 'relu'))\n","        model.add(Conv2D(64, (2, 2), activation = 'relu'))\n","        model.add(Conv2D(64, (2, 2), activation = 'relu'))\n","        model.add(Flatten())\n","        model.add(Dense(3136, activation = 'relu'))\n","        model.add(Dense(action_size))\n","\n","        optimizer = RMSprop()\n","        model.compile(loss = tf.losses.Huber(), optimizer = optimizer)\n","\n","        return model\n","\n","    @staticmethod\n","    def critic_network(input_shape, value_size, learning_rate):\n","        \"\"\"Critic Network for A2C\n","        \"\"\"\n","\n","        model = Sequential()\n","        model.add(Conv2D(32, (4, 4), input_shape=(input_shape), activation = 'relu'))\n","        model.add(Conv2D(64, (2, 2), activation = 'relu'))\n","        model.add(Conv2D(64, (2, 2), activation = 'relu'))\n","        model.add(Flatten())\n","        model.add(Dense(3136, activation = 'relu'))\n","        model.add(Dense(value_size, activation = 'linear'))\n","\n","        optimizer = RMSprop()\n","        model.compile(loss = tf.losses.Huber(), optimizer = optimizer)\n","\n","        return model\n"],"execution_count":16,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wve-DuiS1xxW"},"source":["### 3.3 The Agent"]},{"cell_type":"code","metadata":{"id":"4NeLppYW1wqz","executionInfo":{"status":"ok","timestamp":1613495342555,"user_tz":180,"elapsed":8824,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["#!/usr/bin/env python\n","\n","\"\"\"dqn: First try to create an AI for SnakeGame. Is it good enough?\n","\n","This algorithm is a implementation of DQN, Double DQN logic (using a target\n","network to have fixed Q-targets), Dueling DQN logic (Q(s,a) = Advantage + Value),\n","PER (Prioritized Experience Replay, using Sum Trees) and Multi-step returns. You\n","can read more about these on https://goo.gl/MctLzp\n","\n","Implemented algorithms\n","----------\n","    * Simple Deep Q-network (DQN with ExperienceReplay);\n","        Paper: https://arxiv.org/abs/1312.5602\n","    * Double Deep Q-network (Double DQN);\n","        Paper: https://arxiv.org/abs/1509.06461\n","    * Dueling Deep Q-network (Dueling DQN);\n","        Paper: https://arxiv.org/abs/1511.06581\n","    * Prioritized Experience Replay (PER);\n","        Paper: https://arxiv.org/abs/1511.05952\n","    * Multi-step returns (n-steps);\n","        Paper: https://arxiv.org/pdf/1703.01327\n","    * Noisy nets.\n","        Paper: https://arxiv.org/abs/1706.10295\n","\n","Arguments\n","----------\n","--load: 'file.h5'\n","    Load a previously trained model in '.h5' format.\n","--board_size: int, optional, default = 10\n","    Assign the size of the board.\n","--nb_frames: int, optional, default = 4\n","    Assign the number of frames per stack, default = 4.\n","--nb_actions: int, optional, default = 5\n","    Assign the number of actions possible.\n","--update_freq: int, optional, default = 0.001\n","    Whether to soft or hard update the target. Epochs or ammount of the update.\n","--visual: boolean, optional, default = False\n","    Select wheter or not to draw the game in pygame.\n","--double: boolean, optional, default = False\n","    Use a target network with double DQN logic.\n","--dueling: boolean, optional, default = False\n","    Whether to use dueling network logic, Q(s,a) = A + V.\n","--per: boolean, optional, default = False\n","    Use Prioritized Experience Replay (based on Sum Trees).\n","--local_state: boolean, optional, default = True\n","    Verify is possible next moves are dangerous (field expertise)\n","\"\"\"\n","\n","import numpy as np\n","from array import array\n","import random\n","\n","\n","__author__ = \"Victor Neves\"\n","__license__ = \"MIT\"\n","__maintainer__ = \"Victor Neves\"\n","__email__ = \"victorneves478@gmail.com\"\n","__status__ = \"Production\"\n","\n","\n","class Agent:\n","    \"\"\"Agent based in a simple DQN that can read states, remember and play.\n","\n","    Attributes\n","    ----------\n","    memory: object\n","        Memory used in training. ExperienceReplay or PrioritizedExperienceReplay\n","    memory_size: int, optional, default = -1\n","        Capacity of the memory used.\n","    model: keras model\n","        The input model in Keras.\n","    target: keras model, optional, default = None\n","        The target model, used to calculade the fixed Q-targets.\n","    nb_frames: int, optional, default = 4\n","        Ammount of frames for each experience (sars).\n","    board_size: int, optional, default = 10\n","        Size of the board used.\n","    frames: list of experiences\n","        The buffer of frames, store sars experiences.\n","    per: boolean, optional, default = False\n","        Flag for PER usage.\n","    update_target_freq: int or float, default = 0.001\n","        Whether soft or hard updates occur. If < 1, soft updated target model.\n","    n_steps: int, optional, default = 1\n","        Size of the rewards buffer, to use Multi-step returns.\n","    \"\"\"\n","    def __init__(self, model, target = None, memory_size = -1, nb_frames = 4,\n","                 board_size = 10, per = False, update_target_freq = 0.01):\n","        \"\"\"Initialize the agent with given attributes.\"\"\"\n","        if per == 'per':\n","            self.memory = PrioritizedExperienceReplay(memory_size = memory_size)\n","        elif per == 'per_naive':\n","            self.memory = PrioritizedExperienceReplayNaive(memory_size = memory_size)\n","        else:\n","            self.memory = ExperienceReplay(memory_size = memory_size)\n","\n","        self.per = per\n","        self.model = model\n","        self.target = target\n","        self.nb_frames = nb_frames\n","        self.board_size = board_size\n","        self.update_target_freq = update_target_freq\n","        #self.sess = sess # Needs fix, tf v2\n","        self.clear_frames()\n","        self.set_noise_list()\n","\n","    def reset_memory(self):\n","        \"\"\"Reset memory if necessary.\"\"\"\n","        self.memory.reset_memory()\n","\n","    def set_noise_list(self):\n","        \"\"\"Set a list of noise variables if NoisyNet is involved.\"\"\"\n","        self.noise_list = []\n","        self.simplified_noise_layers = []\n","\n","        for layer in self.model.layers:\n","            if type(layer) in {NoisyDenseFG, NoisyDenseIG}:\n","                self.noise_list.extend(layer.noise_list)\n","            if type(layer) in {SimplifiedNoisyDense}:\n","                self.simplified_noise_layers.append(layer)\n","\n","    def sample_noise(self):\n","        \"\"\"Resample noise variables in NoisyNet.\"\"\"\n","        # for noise in self.noise_list:\n","            # self.sess.run(noise.initializer) # Needs fix, tf v2\n","        for simplified_noise in self.simplified_noise_layers:\n","            simplified_noise.sample_noise()\n","\n","    def get_game_data(self, game):\n","        \"\"\"Create a list with 4 frames and append/pop them each frame.\n","\n","        Return\n","        ----------\n","        expanded_frames: list of experiences\n","            The buffer of frames, shape = (nb_frames, board_size, board_size)\n","        \"\"\"\n","        frame = game.state()\n","\n","        if self.frames is None:\n","            self.frames = [frame] * self.nb_frames\n","        else:\n","            self.frames.append(frame)\n","            self.frames.pop(0)\n","\n","        expanded_frames = np.expand_dims(self.frames, 0)\n","        # expanded_frames = np.transpose(expanded_frames, [0, 3, 2, 1]) # NCHW to NHWC\n","\n","        return expanded_frames\n","\n","    def clear_frames(self):\n","        \"\"\"Reset frames to restart appending.\"\"\"\n","        self.frames = None\n","\n","    def update_target_model_hard(self):\n","        \"\"\"Update the target model with the main model's weights.\"\"\"\n","        self.target.set_weights(self.model.get_weights())\n","\n","    def transfer_weights(self):\n","        \"\"\"Transfer Weights from Model to Target at rate update_target_freq.\"\"\"\n","        model_weights = self.model.get_weights()\n","        target_weights = self.target.get_weights()\n","\n","        for i in range(len(model_weights)):\n","            target_weights[i] = (self.update_target_freq * model_weights[i]\n","                                 + ((1 - self.update_target_freq)\n","                                    * target_weights[i]))\n","\n","        self.target.set_weights(target_weights)\n","\n","    def print_metrics(self, epoch, nb_epoch, history_size, policy, value,\n","                      win_count, history_step, history_reward,\n","                      history_loss = None, verbose = 1):\n","        \"\"\"Function to print metrics of training steps.\"\"\"\n","        if verbose == 0:\n","            pass\n","        elif verbose == 1:\n","            text_epoch = ('Epoch: {:03d}/{:03d} | Mean size 10: {:.1f} | '\n","                           + 'Longest 10: {:03d} | Mean steps 10: {:.1f} | '\n","                           + 'Wins: {:d} | {:.1f}%')\n","            print(text_epoch.format(epoch + 1, nb_epoch,\n","                                    np.mean(history_size[-10:]),\n","                                    max(history_size[-10:]),\n","                                    np.mean(history_step[-10:]),\n","                                    win_count, 100 * win_count/(epoch + 1)))\n","        else:\n","            text_epoch = 'Epoch: {:03d}/{:03d}'  # Print epoch info\n","            print(text_epoch.format(epoch + 1, nb_epoch))\n","\n","            if loss is not None:  # Print training performance\n","                text_train = ('\\t\\x1b[0;30;47m' + ' Training metrics ' + '\\x1b[0m'\n","                              + '\\tTotal loss: {:.4f} | Loss per step: {:.4f} | '\n","                              + 'Mean loss - 100 episodes: {:.4f}')\n","                print(text_perf.format(history_loss[-1],\n","                                       history_loss[-1] / history_step[-1],\n","                                       np.mean(history_loss[-100:])))\n","\n","            text_game = ('\\t\\x1b[0;30;47m' + ' Game metrics ' + '\\x1b[0m'\n","                         + '\\t\\tSize: {:d} | Ammount of steps: {:d} | '\n","                         + 'Steps per food eaten: {:.1f} | '\n","                         + 'Mean size - 100 episodes: {:.1f}')\n","            print(text_game.format(history_size[-1], history_step[-1],\n","                                   history_size[-1] / history_step[-1],\n","                                   np.mean(history_step[-100:])))\n","\n","            # Print policy metrics\n","            if policy == \"BoltzmannQPolicy\":\n","                text_policy = ('\\t\\x1b[0;30;47m' + ' Policy metrics ' + '\\x1b[0m'\n","                               + '\\tBoltzmann Temperature: {:.2f} | '\n","                               + 'Episode reward: {:.1f} | Wins: {:d} | '\n","                               + '{:.1f}%')\n","                print(text_policy.format(value, history_reward[-1], win_count,\n","                                         100 * win_count/(epoch + 1)))\n","            elif policy == \"BoltzmannGumbelQPolicy\":\n","                text_policy = ('\\t\\x1b[0;30;47m' + ' Policy metrics ' + '\\x1b[0m'\n","                               + '\\tNumber of actions: {:.0f} | '\n","                               + 'Episode reward: {:.1f} | Wins: {:d} | '\n","                               + '{:.1f}%')\n","                print(text_policy.format(value, history_reward[-1], win_count,\n","                                         100 * win_count/(epoch + 1)))\n","            else:\n","                text_policy = ('\\t\\x1b[0;30;47m' + ' Policy metrics ' + '\\x1b[0m'\n","                               + '\\tEpsilon: {:.2f} | Episode reward: {:.1f} | '\n","                               + 'Wins: {:d} | {:.1f}%')\n","                print(text_policy.format(value, history_reward[-1], win_count,\n","                                         100 * win_count/(epoch + 1)))\n","\n","    def train_model(self, model, target, batch_size, gamma, nb_actions, epoch = 0):\n","        \"\"\"Function to train the model on a batch of the data. The optimization\n","        flag is used when we are not playing, just batching and optimizing.\n","\n","        Return\n","        ----------\n","        loss: float\n","            Training loss of given batch.\n","        \"\"\"\n","        loss = 0.\n","        batch = self.memory.get_targets(model = self.model,\n","                                        target = self.target,\n","                                        batch_size = (batch_size),\n","                                        gamma = gamma,\n","                                        nb_actions = nb_actions,\n","                                        n_steps = self.n_steps)\n","\n","        if batch:\n","            inputs, targets, IS_weights = batch\n","\n","            if inputs is not None and targets is not None:\n","                loss = float(self.model.train_on_batch(inputs,\n","                                                       targets,\n","                                                       IS_weights))\n","\n","        return loss\n","\n","    def train(self, game, nb_epoch = 10000, batch_size = 64, gamma = 0.95,\n","              eps = [1., .01], temp = [1., 0.01], learning_rate = 0.5,\n","              observe = 0, optim_rounds = 1, policy = \"EpsGreedyQPolicy\",\n","              verbose = 1, n_steps = 1):\n","        \"\"\"The main training function, loops the game, remember and choose best\n","        action given game state (frames).\"\"\"\n","        if not hasattr(self, 'n_steps'):\n","            self.n_steps = n_steps  # Set attribute only once\n","\n","        history_size = array('i')  # Holds all the sizes\n","        history_step = array('f')  # Holds all the steps\n","        history_loss = array('f')  # Holds all the losses\n","        history_reward = array('f')  # Holds all the rewards\n","\n","        q_policy = self.select_policy(policy, eps, temp, nb_epoch, learning_rate)\n","\n","        nb_actions = game.nb_actions\n","        win_count = 0\n","\n","        # If optim_rounds is bigger than one, the model will keep optimizing\n","        # after the exploration, in turns of nb_epoch size.\n","        for turn in range(optim_rounds):\n","            if turn > 0:\n","                for epoch in range(nb_epoch):\n","                    loss = self.train_model(model = self.model,\n","                                            epoch = epoch,\n","                                            target = self.target,\n","                                            batch_size = batch_size,\n","                                            gamma = gamma,\n","                                            nb_actions = nb_actions)\n","                    text_optim = ('Optimizer turn: {:2d} | Epoch: {:03d}/{:03d}'\n","                                  + '| Loss: {:.4f}')\n","                    print(text_optim.format(turn, epoch + 1, nb_epoch, loss))\n","            else:  # Exploration and training\n","                for epoch in range(nb_epoch):\n","                    loss = 0.\n","                    total_reward = 0.\n","                    game.reset_game()\n","                    self.clear_frames()\n","\n","                    S = self.get_game_data(game)\n","\n","                    if n_steps > 1:  # Create multi-step returns buffer.\n","                        n_step_buffer = array('f')\n","\n","                    while not game.game_over:  # Main loop, until game_over\n","                        game.food_pos = game.generate_food()\n","                        self.sample_noise()\n","                        action, value = q_policy.select_action(self.model,\n","                                                               S, epoch,\n","                                                               nb_actions)\n","                        game.play(action)\n","                        r = game.get_reward()\n","                        total_reward += r\n","\n","                        if n_steps > 1:\n","                            n_step_buffer.append(r)\n","\n","                            if len(n_step_buffer) < n_steps:\n","                                R = r\n","                            else:\n","                                R = sum([n_step_buffer[i] * (gamma ** i)\\\n","                                        for i in range(n_steps)])\n","\n","                                n_step_buffer.pop(0)\n","                        else:\n","                            R = r\n","\n","                        S_prime = self.get_game_data(game)\n","                        experience = [S, action, R, S_prime, game.game_over]\n","                        self.memory.remember(*experience)  # Add to the memory\n","                        S = S_prime  # Advance to the next state (stack of S)\n","\n","                        if epoch >= observe:  # Get the batchs and train\n","                            loss += self.train_model(model = self.model,\n","                                                     target = self.target,\n","                                                     batch_size = batch_size,\n","                                                     gamma = gamma,\n","                                                     nb_actions = nb_actions)\n","\n","                    if game.is_won():\n","                        win_count += 1  # Counter of wins for metrics\n","\n","                    if self.per:  # Advance beta, used in PER\n","                        self.memory.beta = self.memory.schedule.value(epoch)\n","\n","                    if self.target is not None:  # Update the target model\n","                        if self.update_target_freq >= 1: # Hard updates\n","                            if epoch % self.update_target_freq == 0:\n","                                self.update_target_model_hard()\n","                        elif self.update_target_freq < 1.:  # Soft updates\n","                            self.transfer_weights()\n","                    \n","                    history_size.append(game.snake.length)\n","                    history_step.append(game.step)\n","                    history_loss.append(loss)\n","                    history_reward.append(total_reward)\n","\n","                    if (epoch + 1) % 10 == 0:\n","                        self.print_metrics(epoch = epoch, nb_epoch = nb_epoch,\n","                                           history_size = history_size,\n","                                           history_loss = history_loss,\n","                                           history_step = history_step,\n","                                           history_reward = history_reward,\n","                                           policy = policy, value = value,\n","                                           win_count = win_count,\n","                                           verbose = verbose)\n","\n","    def test(self, game, nb_epoch = 1000, eps = 0.01, temp = 0.01,\n","             visual = False, policy = \"GreedyQPolicy\"):\n","        \"\"\"Play the game with the trained agent. Can use the visual tag to draw\n","            in pygame.\"\"\"\n","        win_count = 0\n","\n","        history_size = array('i')  # Holds all the sizes\n","        history_step = array('f')  # Holds all the steps\n","        history_reward = array('f')  # Holds all the rewards\n","\n","        q_policy = self.select_policy(policy, eps, temp, nb_epoch,\n","                                      learning_rate = 0.5)\n","\n","        for epoch in range(nb_epoch):\n","            game.reset_game()\n","            self.clear_frames()\n","\n","            if visual:\n","                game.create_window()\n","                previous_size = game.snake.length  # Initial size of the snake\n","                color_list = game.gradient([(42, 42, 42), (152, 152, 152)],\\\n","                                               previous_size)\n","                elapsed = 0\n","\n","            while not game.game_over:\n","                if visual:\n","                    elapsed += game.fps.get_time()  # Get elapsed time since last call.\n","\n","                    if elapsed >= 60:\n","                        elapsed = 0\n","                        S = self.get_game_data(game)\n","                        action, value = q_policy.select_action(self.model, S,\n","                                                               epoch,\n","                                                               game.nb_actions)\n","                        game.play(action)\n","                        current_size = game.snake.length  # Update the body size\n","\n","                        if current_size > previous_size:\n","                            color_list = game.gradient([(42, 42, 42), (152, 152,\n","                                                                       152)],\n","                                                       current_size)\n","\n","                            previous_size = current_size\n","\n","                        game.draw(color_list)\n","\n","                    pygame.display.update()\n","                    game.fps.tick(120)  # Limit FPS to 100\n","                else:\n","                    S = self.get_game_data(game)\n","                    action, value = q_policy.select_action(self.model, S, epoch,\n","                                                           game.nb_actions)\n","                    game.play(action)\n","                    current_size = game.snake.length  # Update the body size\n","\n","                if game.game_over:\n","                    history_size.append(current_size)\n","                    history_step.append(game.step)\n","                    history_reward.append(game.get_reward())\n","\n","            if game.is_won():\n","                win_count += 1\n","\n","        print(\"Accuracy: {} %\".format(100. * win_count / nb_epoch))\n","        print(\"Mean size: {} | Biggest size: {} | Smallest size: {}\"\\\n","              .format(np.mean(history_size), np.max(history_size),\n","                      np.min(history_size)))\n","        print(\"Mean steps: {} | Biggest step: {} | Smallest step: {}\"\\\n","              .format(np.mean(history_step), np.max(history_step),\n","                      np.min(history_step)))\n","        print(\"Mean rewards: {} | Biggest reward: {} | Smallest reward: {}\"\\\n","              .format(np.mean(history_reward), np.max(history_reward),\n","                      np.min(history_reward)))\n","\n","    @staticmethod\n","    def select_policy(policy, eps, temp, nb_epoch, learning_rate):\n","        # Select exploration policy. EpsGreedyQPolicy runs faster, but takes\n","        # longer to converge. BoltzmannGumbelQPolicy is the slowest, but\n","        # converge really fast (0.1 * nb_epoch used in EpsGreedyQPolicy).\n","        # BoltzmannQPolicy is in the middle.\n","        if policy == 'BoltzmannQPolicy':\n","            q_policy = BoltzmannQPolicy(temp[0], temp[1], nb_epoch\n","                                                          * learning_rate)\n","        elif policy == 'BoltzmannGumbelQPolicy':\n","            q_policy = BoltzmannGumbelQPolicy()\n","        elif policy == 'GreedyQPolicy':\n","            q_policy = GreedyQPolicy()\n","        else:\n","            q_policy = EpsGreedyQPolicy(eps[0], eps[1], nb_epoch\n","                                                        * learning_rate)\n","\n","        return q_policy\n"],"execution_count":17,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"g6Dm1Nvn14oq"},"source":["## 4. Time to train/test"]},{"cell_type":"code","metadata":{"id":"NKk1Avv8HsNU","executionInfo":{"status":"ok","timestamp":1613495342559,"user_tz":180,"elapsed":8819,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["from keras.optimizers import RMSprop, Nadam\n","from keras.models import Sequential, load_model, Model\n","from keras import backend as K\n","\n","K.set_image_data_format('channels_first') \n","\n","# Parameters\n","PLAYER = 'ROBOT'\n","BOARD_SIZE = 10\n","NB_FRAMES = 10\n","LOCAL_STATE = True\n","RELATIVE_POS = True\n","OPTIMIZER = 'RMSprop'\n","LOSS = 'huber_loss'\n","DUELING = False\n","CNN = 'CNN4'\n","DENSE_TYPE = 'dense'\n","MEMORY_SIZE = -1\n","PER = False\n","UPDATE_TARGET_FREQ = 0.01\n","BATCH_SIZE = 64\n","NB_EPOCH = 10000\n","GAMMA = 0.95\n","N_STEPS = 3\n","POLICY = 'EpsGreedyQPolicy'"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"id":"s1_GNLvk1-rC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613522484021,"user_tz":180,"elapsed":20797310,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}},"outputId":"dd170b7d-9964-4568-c417-471cc6517e87"},"source":["# Train the model\n","GAME = Game(player = PLAYER, board_size = BOARD_SIZE,\n","                        local_state = LOCAL_STATE, relative_pos = RELATIVE_POS)\n","\n","\n","MODEL = create_model(optimizer = OPTIMIZER, loss = LOSS,\n","                     stack = NB_FRAMES, input_size = BOARD_SIZE,\n","                     output_size = GAME.nb_actions, dueling = DUELING, \n","                     cnn = CNN, dense_type = DENSE_TYPE)\n","                \n","TARGET = None\n","AGENT = Agent(model = MODEL, target = TARGET, memory_size = MEMORY_SIZE,\n","              nb_frames = NB_FRAMES, board_size = BOARD_SIZE,\n","              per = PER, update_target_freq = UPDATE_TARGET_FREQ)\n","AGENT.train(GAME, batch_size = BATCH_SIZE, nb_epoch = NB_EPOCH,\n","             gamma = GAMMA, n_steps = N_STEPS, policy = POLICY)"],"execution_count":19,"outputs":[{"output_type":"stream","text":["Model: \"model\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_1 (InputLayer)         [(None, 10, 10, 10)]      0         \n","_________________________________________________________________\n","conv2d (Conv2D)              (None, 32, 8, 8)          2912      \n","_________________________________________________________________\n","activation (Activation)      (None, 32, 8, 8)          0         \n","_________________________________________________________________\n","conv2d_1 (Conv2D)            (None, 64, 7, 7)          8256      \n","_________________________________________________________________\n","activation_1 (Activation)    (None, 64, 7, 7)          0         \n","_________________________________________________________________\n","conv2d_2 (Conv2D)            (None, 64, 7, 7)          4160      \n","_________________________________________________________________\n","activation_2 (Activation)    (None, 64, 7, 7)          0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 3136)              0         \n","_________________________________________________________________\n","dense (Dense)                (None, 3136)              9837632   \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 3)                 9411      \n","=================================================================\n","Total params: 9,862,371\n","Trainable params: 9,862,371\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch: 010/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 26.7 | Wins: 1 | 10.0%\n","Epoch: 020/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 20.1 | Wins: 1 | 5.0%\n","Epoch: 030/10000 | Mean size 10: 3.3 | Longest 10: 006 | Mean steps 10: 18.2 | Wins: 2 | 6.7%\n","Epoch: 040/10000 | Mean size 10: 3.3 | Longest 10: 005 | Mean steps 10: 12.7 | Wins: 4 | 10.0%\n","Epoch: 050/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 19.0 | Wins: 6 | 12.0%\n","Epoch: 060/10000 | Mean size 10: 3.2 | Longest 10: 005 | Mean steps 10: 15.0 | Wins: 7 | 11.7%\n","Epoch: 070/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 10.0 | Wins: 10 | 14.3%\n","Epoch: 080/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 13.1 | Wins: 10 | 12.5%\n","Epoch: 090/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 14.0 | Wins: 11 | 12.2%\n","Epoch: 100/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 15.9 | Wins: 12 | 12.0%\n","Epoch: 110/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 17.1 | Wins: 13 | 11.8%\n","Epoch: 120/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 8.5 | Wins: 16 | 13.3%\n","Epoch: 130/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 10.5 | Wins: 16 | 12.3%\n","Epoch: 140/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 17.9 | Wins: 17 | 12.1%\n","Epoch: 150/10000 | Mean size 10: 3.2 | Longest 10: 005 | Mean steps 10: 12.8 | Wins: 18 | 12.0%\n","Epoch: 160/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 10.8 | Wins: 18 | 11.2%\n","Epoch: 170/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 15.4 | Wins: 19 | 11.2%\n","Epoch: 180/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 14.0 | Wins: 21 | 11.7%\n","Epoch: 190/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 16.3 | Wins: 23 | 12.1%\n","Epoch: 200/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 17.1 | Wins: 24 | 12.0%\n","Epoch: 210/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 12.1 | Wins: 26 | 12.4%\n","Epoch: 220/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 10.6 | Wins: 27 | 12.3%\n","Epoch: 230/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 17.1 | Wins: 28 | 12.2%\n","Epoch: 240/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 20.5 | Wins: 30 | 12.5%\n","Epoch: 250/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 20.7 | Wins: 31 | 12.4%\n","Epoch: 260/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 17.7 | Wins: 31 | 11.9%\n","Epoch: 270/10000 | Mean size 10: 3.3 | Longest 10: 005 | Mean steps 10: 16.8 | Wins: 33 | 12.2%\n","Epoch: 280/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 14.7 | Wins: 35 | 12.5%\n","Epoch: 290/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 16.0 | Wins: 36 | 12.4%\n","Epoch: 300/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 13.4 | Wins: 37 | 12.3%\n","Epoch: 310/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 17.1 | Wins: 37 | 11.9%\n","Epoch: 320/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 10.3 | Wins: 37 | 11.6%\n","Epoch: 330/10000 | Mean size 10: 3.3 | Longest 10: 005 | Mean steps 10: 19.9 | Wins: 39 | 11.8%\n","Epoch: 340/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 14.8 | Wins: 41 | 12.1%\n","Epoch: 350/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 14.0 | Wins: 43 | 12.3%\n","Epoch: 360/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 17.0 | Wins: 43 | 11.9%\n","Epoch: 370/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 14.2 | Wins: 44 | 11.9%\n","Epoch: 380/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 14.0 | Wins: 44 | 11.6%\n","Epoch: 390/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 11.7 | Wins: 45 | 11.5%\n","Epoch: 400/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 17.9 | Wins: 45 | 11.2%\n","Epoch: 410/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 16.7 | Wins: 48 | 11.7%\n","Epoch: 420/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 13.5 | Wins: 50 | 11.9%\n","Epoch: 430/10000 | Mean size 10: 3.2 | Longest 10: 005 | Mean steps 10: 16.0 | Wins: 51 | 11.9%\n","Epoch: 440/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 10.7 | Wins: 52 | 11.8%\n","Epoch: 450/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 18.5 | Wins: 54 | 12.0%\n","Epoch: 460/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 19.6 | Wins: 54 | 11.7%\n","Epoch: 470/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 33.4 | Wins: 55 | 11.7%\n","Epoch: 480/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 9.7 | Wins: 59 | 12.3%\n","Epoch: 490/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 10.8 | Wins: 60 | 12.2%\n","Epoch: 500/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 14.4 | Wins: 61 | 12.2%\n","Epoch: 510/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 11.0 | Wins: 64 | 12.5%\n","Epoch: 520/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 11.1 | Wins: 65 | 12.5%\n","Epoch: 530/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 13.2 | Wins: 66 | 12.5%\n","Epoch: 540/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 15.6 | Wins: 67 | 12.4%\n","Epoch: 550/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 14.8 | Wins: 67 | 12.2%\n","Epoch: 560/10000 | Mean size 10: 3.3 | Longest 10: 005 | Mean steps 10: 22.0 | Wins: 69 | 12.3%\n","Epoch: 570/10000 | Mean size 10: 3.4 | Longest 10: 005 | Mean steps 10: 22.5 | Wins: 72 | 12.6%\n","Epoch: 580/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 16.8 | Wins: 76 | 13.1%\n","Epoch: 590/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 18.6 | Wins: 77 | 13.1%\n","Epoch: 600/10000 | Mean size 10: 3.5 | Longest 10: 006 | Mean steps 10: 21.2 | Wins: 80 | 13.3%\n","Epoch: 610/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 12.4 | Wins: 80 | 13.1%\n","Epoch: 620/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 12.4 | Wins: 81 | 13.1%\n","Epoch: 630/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 21.4 | Wins: 82 | 13.0%\n","Epoch: 640/10000 | Mean size 10: 3.2 | Longest 10: 005 | Mean steps 10: 25.0 | Wins: 83 | 13.0%\n","Epoch: 650/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 21.2 | Wins: 85 | 13.1%\n","Epoch: 660/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 18.3 | Wins: 87 | 13.2%\n","Epoch: 670/10000 | Mean size 10: 3.6 | Longest 10: 005 | Mean steps 10: 16.6 | Wins: 92 | 13.7%\n","Epoch: 680/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 17.0 | Wins: 93 | 13.7%\n","Epoch: 690/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 21.7 | Wins: 96 | 13.9%\n","Epoch: 700/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 18.8 | Wins: 96 | 13.7%\n","Epoch: 710/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 15.8 | Wins: 100 | 14.1%\n","Epoch: 720/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 21.3 | Wins: 101 | 14.0%\n","Epoch: 730/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 8.4 | Wins: 101 | 13.8%\n","Epoch: 740/10000 | Mean size 10: 3.3 | Longest 10: 005 | Mean steps 10: 28.3 | Wins: 103 | 13.9%\n","Epoch: 750/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 18.4 | Wins: 103 | 13.7%\n","Epoch: 760/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 12.6 | Wins: 105 | 13.8%\n","Epoch: 770/10000 | Mean size 10: 3.4 | Longest 10: 006 | Mean steps 10: 19.3 | Wins: 107 | 13.9%\n","Epoch: 780/10000 | Mean size 10: 3.4 | Longest 10: 005 | Mean steps 10: 31.7 | Wins: 109 | 14.0%\n","Epoch: 790/10000 | Mean size 10: 3.2 | Longest 10: 005 | Mean steps 10: 11.9 | Wins: 110 | 13.9%\n","Epoch: 800/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 13.9 | Wins: 111 | 13.9%\n","Epoch: 810/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 13.7 | Wins: 112 | 13.8%\n","Epoch: 820/10000 | Mean size 10: 3.6 | Longest 10: 006 | Mean steps 10: 21.1 | Wins: 116 | 14.1%\n","Epoch: 830/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 15.0 | Wins: 117 | 14.1%\n","Epoch: 840/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 10.9 | Wins: 118 | 14.0%\n","Epoch: 850/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 22.7 | Wins: 122 | 14.4%\n","Epoch: 860/10000 | Mean size 10: 3.2 | Longest 10: 005 | Mean steps 10: 14.4 | Wins: 123 | 14.3%\n","Epoch: 870/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 13.0 | Wins: 123 | 14.1%\n","Epoch: 880/10000 | Mean size 10: 3.3 | Longest 10: 005 | Mean steps 10: 15.7 | Wins: 125 | 14.2%\n","Epoch: 890/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 9.1 | Wins: 127 | 14.3%\n","Epoch: 900/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 11.2 | Wins: 129 | 14.3%\n","Epoch: 910/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 18.1 | Wins: 130 | 14.3%\n","Epoch: 920/10000 | Mean size 10: 3.3 | Longest 10: 005 | Mean steps 10: 18.4 | Wins: 132 | 14.3%\n","Epoch: 930/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 16.6 | Wins: 132 | 14.2%\n","Epoch: 940/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 16.1 | Wins: 134 | 14.3%\n","Epoch: 950/10000 | Mean size 10: 3.4 | Longest 10: 005 | Mean steps 10: 23.8 | Wins: 137 | 14.4%\n","Epoch: 960/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 17.7 | Wins: 139 | 14.5%\n","Epoch: 970/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 15.3 | Wins: 140 | 14.4%\n","Epoch: 980/10000 | Mean size 10: 3.3 | Longest 10: 005 | Mean steps 10: 20.3 | Wins: 142 | 14.5%\n","Epoch: 990/10000 | Mean size 10: 3.2 | Longest 10: 005 | Mean steps 10: 23.3 | Wins: 143 | 14.4%\n","Epoch: 1000/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 17.4 | Wins: 147 | 14.7%\n","Epoch: 1010/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 22.8 | Wins: 149 | 14.8%\n","Epoch: 1020/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 21.2 | Wins: 149 | 14.6%\n","Epoch: 1030/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 22.7 | Wins: 155 | 15.0%\n","Epoch: 1040/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 13.4 | Wins: 155 | 14.9%\n","Epoch: 1050/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 17.4 | Wins: 158 | 15.0%\n","Epoch: 1060/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 16.8 | Wins: 160 | 15.1%\n","Epoch: 1070/10000 | Mean size 10: 3.2 | Longest 10: 005 | Mean steps 10: 18.4 | Wins: 161 | 15.0%\n","Epoch: 1080/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 19.2 | Wins: 162 | 15.0%\n","Epoch: 1090/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 20.2 | Wins: 163 | 15.0%\n","Epoch: 1100/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 17.5 | Wins: 167 | 15.2%\n","Epoch: 1110/10000 | Mean size 10: 3.3 | Longest 10: 005 | Mean steps 10: 17.2 | Wins: 169 | 15.2%\n","Epoch: 1120/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 21.9 | Wins: 171 | 15.3%\n","Epoch: 1130/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 11.3 | Wins: 172 | 15.2%\n","Epoch: 1140/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 21.8 | Wins: 176 | 15.4%\n","Epoch: 1150/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 14.7 | Wins: 178 | 15.5%\n","Epoch: 1160/10000 | Mean size 10: 3.6 | Longest 10: 005 | Mean steps 10: 23.5 | Wins: 183 | 15.8%\n","Epoch: 1170/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 15.3 | Wins: 186 | 15.9%\n","Epoch: 1180/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 24.9 | Wins: 186 | 15.8%\n","Epoch: 1190/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 13.6 | Wins: 190 | 16.0%\n","Epoch: 1200/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 14.9 | Wins: 192 | 16.0%\n","Epoch: 1210/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 18.3 | Wins: 194 | 16.0%\n","Epoch: 1220/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 18.7 | Wins: 197 | 16.1%\n","Epoch: 1230/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 26.5 | Wins: 200 | 16.3%\n","Epoch: 1240/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 27.2 | Wins: 201 | 16.2%\n","Epoch: 1250/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 11.5 | Wins: 203 | 16.2%\n","Epoch: 1260/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 29.4 | Wins: 207 | 16.4%\n","Epoch: 1270/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 23.7 | Wins: 210 | 16.5%\n","Epoch: 1280/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 21.4 | Wins: 211 | 16.5%\n","Epoch: 1290/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 22.6 | Wins: 213 | 16.5%\n","Epoch: 1300/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 14.3 | Wins: 213 | 16.4%\n","Epoch: 1310/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 17.1 | Wins: 214 | 16.3%\n","Epoch: 1320/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 17.5 | Wins: 218 | 16.5%\n","Epoch: 1330/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 18.1 | Wins: 218 | 16.4%\n","Epoch: 1340/10000 | Mean size 10: 3.4 | Longest 10: 005 | Mean steps 10: 17.5 | Wins: 221 | 16.5%\n","Epoch: 1350/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 20.3 | Wins: 221 | 16.4%\n","Epoch: 1360/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 18.8 | Wins: 222 | 16.3%\n","Epoch: 1370/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 17.3 | Wins: 223 | 16.3%\n","Epoch: 1380/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 28.2 | Wins: 225 | 16.3%\n","Epoch: 1390/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 16.6 | Wins: 227 | 16.3%\n","Epoch: 1400/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 15.8 | Wins: 228 | 16.3%\n","Epoch: 1410/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 11.6 | Wins: 230 | 16.3%\n","Epoch: 1420/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 20.4 | Wins: 230 | 16.2%\n","Epoch: 1430/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 28.2 | Wins: 231 | 16.2%\n","Epoch: 1440/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 28.9 | Wins: 233 | 16.2%\n","Epoch: 1450/10000 | Mean size 10: 3.3 | Longest 10: 005 | Mean steps 10: 16.2 | Wins: 235 | 16.2%\n","Epoch: 1460/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 20.7 | Wins: 238 | 16.3%\n","Epoch: 1470/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 33.5 | Wins: 243 | 16.5%\n","Epoch: 1480/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 26.7 | Wins: 247 | 16.7%\n","Epoch: 1490/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 26.5 | Wins: 251 | 16.8%\n","Epoch: 1500/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 25.3 | Wins: 254 | 16.9%\n","Epoch: 1510/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 16.2 | Wins: 256 | 17.0%\n","Epoch: 1520/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 19.0 | Wins: 257 | 16.9%\n","Epoch: 1530/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 24.8 | Wins: 260 | 17.0%\n","Epoch: 1540/10000 | Mean size 10: 3.4 | Longest 10: 005 | Mean steps 10: 21.3 | Wins: 263 | 17.1%\n","Epoch: 1550/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 18.2 | Wins: 265 | 17.1%\n","Epoch: 1560/10000 | Mean size 10: 3.6 | Longest 10: 005 | Mean steps 10: 28.7 | Wins: 269 | 17.2%\n","Epoch: 1570/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 12.6 | Wins: 270 | 17.2%\n","Epoch: 1580/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 10.7 | Wins: 271 | 17.2%\n","Epoch: 1590/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 19.7 | Wins: 274 | 17.2%\n","Epoch: 1600/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 24.2 | Wins: 276 | 17.2%\n","Epoch: 1610/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 14.1 | Wins: 279 | 17.3%\n","Epoch: 1620/10000 | Mean size 10: 3.4 | Longest 10: 005 | Mean steps 10: 21.9 | Wins: 282 | 17.4%\n","Epoch: 1630/10000 | Mean size 10: 3.0 | Longest 10: 003 | Mean steps 10: 26.2 | Wins: 282 | 17.3%\n","Epoch: 1640/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 21.7 | Wins: 285 | 17.4%\n","Epoch: 1650/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 30.4 | Wins: 289 | 17.5%\n","Epoch: 1660/10000 | Mean size 10: 3.4 | Longest 10: 005 | Mean steps 10: 16.3 | Wins: 291 | 17.5%\n","Epoch: 1670/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 23.4 | Wins: 294 | 17.6%\n","Epoch: 1680/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 21.6 | Wins: 298 | 17.7%\n","Epoch: 1690/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 22.4 | Wins: 301 | 17.8%\n","Epoch: 1700/10000 | Mean size 10: 3.2 | Longest 10: 005 | Mean steps 10: 27.2 | Wins: 302 | 17.8%\n","Epoch: 1710/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 17.3 | Wins: 305 | 17.8%\n","Epoch: 1720/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 33.5 | Wins: 308 | 17.9%\n","Epoch: 1730/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 23.5 | Wins: 312 | 18.0%\n","Epoch: 1740/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 20.4 | Wins: 313 | 18.0%\n","Epoch: 1750/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 24.7 | Wins: 315 | 18.0%\n","Epoch: 1760/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 22.1 | Wins: 319 | 18.1%\n","Epoch: 1770/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 21.2 | Wins: 321 | 18.1%\n","Epoch: 1780/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 34.2 | Wins: 327 | 18.4%\n","Epoch: 1790/10000 | Mean size 10: 3.2 | Longest 10: 005 | Mean steps 10: 30.3 | Wins: 328 | 18.3%\n","Epoch: 1800/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 34.7 | Wins: 332 | 18.4%\n","Epoch: 1810/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 28.5 | Wins: 335 | 18.5%\n","Epoch: 1820/10000 | Mean size 10: 3.6 | Longest 10: 004 | Mean steps 10: 34.5 | Wins: 341 | 18.7%\n","Epoch: 1830/10000 | Mean size 10: 3.6 | Longest 10: 005 | Mean steps 10: 34.6 | Wins: 346 | 18.9%\n","Epoch: 1840/10000 | Mean size 10: 3.3 | Longest 10: 005 | Mean steps 10: 25.3 | Wins: 348 | 18.9%\n","Epoch: 1850/10000 | Mean size 10: 3.5 | Longest 10: 004 | Mean steps 10: 30.1 | Wins: 353 | 19.1%\n","Epoch: 1860/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 23.7 | Wins: 357 | 19.2%\n","Epoch: 1870/10000 | Mean size 10: 3.9 | Longest 10: 005 | Mean steps 10: 33.3 | Wins: 365 | 19.5%\n","Epoch: 1880/10000 | Mean size 10: 3.4 | Longest 10: 005 | Mean steps 10: 21.2 | Wins: 368 | 19.6%\n","Epoch: 1890/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 17.2 | Wins: 369 | 19.5%\n","Epoch: 1900/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 48.5 | Wins: 371 | 19.5%\n","Epoch: 1910/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 30.2 | Wins: 373 | 19.5%\n","Epoch: 1920/10000 | Mean size 10: 3.4 | Longest 10: 005 | Mean steps 10: 43.8 | Wins: 376 | 19.6%\n","Epoch: 1930/10000 | Mean size 10: 3.4 | Longest 10: 006 | Mean steps 10: 41.7 | Wins: 378 | 19.6%\n","Epoch: 1940/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 19.1 | Wins: 382 | 19.7%\n","Epoch: 1950/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 12.3 | Wins: 386 | 19.8%\n","Epoch: 1960/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 15.7 | Wins: 389 | 19.8%\n","Epoch: 1970/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 27.8 | Wins: 390 | 19.8%\n","Epoch: 1980/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 32.8 | Wins: 392 | 19.8%\n","Epoch: 1990/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 32.8 | Wins: 396 | 19.9%\n","Epoch: 2000/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 18.4 | Wins: 397 | 19.9%\n","Epoch: 2010/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 41.8 | Wins: 402 | 20.0%\n","Epoch: 2020/10000 | Mean size 10: 3.3 | Longest 10: 005 | Mean steps 10: 18.3 | Wins: 404 | 20.0%\n","Epoch: 2030/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 25.9 | Wins: 408 | 20.1%\n","Epoch: 2040/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 24.6 | Wins: 410 | 20.1%\n","Epoch: 2050/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 33.5 | Wins: 413 | 20.1%\n","Epoch: 2060/10000 | Mean size 10: 3.8 | Longest 10: 005 | Mean steps 10: 27.2 | Wins: 419 | 20.3%\n","Epoch: 2070/10000 | Mean size 10: 3.4 | Longest 10: 005 | Mean steps 10: 32.6 | Wins: 422 | 20.4%\n","Epoch: 2080/10000 | Mean size 10: 3.6 | Longest 10: 005 | Mean steps 10: 28.2 | Wins: 427 | 20.5%\n","Epoch: 2090/10000 | Mean size 10: 3.8 | Longest 10: 006 | Mean steps 10: 48.9 | Wins: 431 | 20.6%\n","Epoch: 2100/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 25.0 | Wins: 435 | 20.7%\n","Epoch: 2110/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 31.3 | Wins: 438 | 20.8%\n","Epoch: 2120/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 18.2 | Wins: 440 | 20.8%\n","Epoch: 2130/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 22.6 | Wins: 444 | 20.8%\n","Epoch: 2140/10000 | Mean size 10: 3.9 | Longest 10: 006 | Mean steps 10: 22.4 | Wins: 450 | 21.0%\n","Epoch: 2150/10000 | Mean size 10: 3.3 | Longest 10: 005 | Mean steps 10: 43.5 | Wins: 452 | 21.0%\n","Epoch: 2160/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 41.6 | Wins: 457 | 21.2%\n","Epoch: 2170/10000 | Mean size 10: 3.4 | Longest 10: 005 | Mean steps 10: 24.3 | Wins: 460 | 21.2%\n","Epoch: 2180/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 35.1 | Wins: 465 | 21.3%\n","Epoch: 2190/10000 | Mean size 10: 3.4 | Longest 10: 005 | Mean steps 10: 20.8 | Wins: 468 | 21.4%\n","Epoch: 2200/10000 | Mean size 10: 3.4 | Longest 10: 005 | Mean steps 10: 34.8 | Wins: 471 | 21.4%\n","Epoch: 2210/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 30.6 | Wins: 475 | 21.5%\n","Epoch: 2220/10000 | Mean size 10: 3.6 | Longest 10: 005 | Mean steps 10: 36.9 | Wins: 480 | 21.6%\n","Epoch: 2230/10000 | Mean size 10: 4.0 | Longest 10: 006 | Mean steps 10: 39.7 | Wins: 487 | 21.8%\n","Epoch: 2240/10000 | Mean size 10: 3.4 | Longest 10: 005 | Mean steps 10: 40.1 | Wins: 490 | 21.9%\n","Epoch: 2250/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 35.4 | Wins: 493 | 21.9%\n","Epoch: 2260/10000 | Mean size 10: 3.2 | Longest 10: 004 | Mean steps 10: 29.5 | Wins: 495 | 21.9%\n","Epoch: 2270/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 39.4 | Wins: 499 | 22.0%\n","Epoch: 2280/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 45.9 | Wins: 503 | 22.1%\n","Epoch: 2290/10000 | Mean size 10: 3.3 | Longest 10: 005 | Mean steps 10: 28.3 | Wins: 505 | 22.1%\n","Epoch: 2300/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 37.6 | Wins: 508 | 22.1%\n","Epoch: 2310/10000 | Mean size 10: 3.6 | Longest 10: 004 | Mean steps 10: 64.3 | Wins: 514 | 22.3%\n","Epoch: 2320/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 29.4 | Wins: 517 | 22.3%\n","Epoch: 2330/10000 | Mean size 10: 3.6 | Longest 10: 004 | Mean steps 10: 36.2 | Wins: 523 | 22.4%\n","Epoch: 2340/10000 | Mean size 10: 3.6 | Longest 10: 005 | Mean steps 10: 53.3 | Wins: 527 | 22.5%\n","Epoch: 2350/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 64.9 | Wins: 533 | 22.7%\n","Epoch: 2360/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 24.2 | Wins: 539 | 22.8%\n","Epoch: 2370/10000 | Mean size 10: 3.1 | Longest 10: 004 | Mean steps 10: 39.6 | Wins: 540 | 22.8%\n","Epoch: 2380/10000 | Mean size 10: 3.8 | Longest 10: 005 | Mean steps 10: 42.4 | Wins: 546 | 22.9%\n","Epoch: 2390/10000 | Mean size 10: 3.4 | Longest 10: 005 | Mean steps 10: 22.6 | Wins: 549 | 23.0%\n","Epoch: 2400/10000 | Mean size 10: 3.3 | Longest 10: 005 | Mean steps 10: 20.8 | Wins: 551 | 23.0%\n","Epoch: 2410/10000 | Mean size 10: 3.6 | Longest 10: 005 | Mean steps 10: 24.6 | Wins: 555 | 23.0%\n","Epoch: 2420/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 22.5 | Wins: 559 | 23.1%\n","Epoch: 2430/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 22.3 | Wins: 564 | 23.2%\n","Epoch: 2440/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 56.3 | Wins: 570 | 23.4%\n","Epoch: 2450/10000 | Mean size 10: 3.7 | Longest 10: 006 | Mean steps 10: 23.2 | Wins: 575 | 23.5%\n","Epoch: 2460/10000 | Mean size 10: 3.7 | Longest 10: 004 | Mean steps 10: 54.3 | Wins: 582 | 23.7%\n","Epoch: 2470/10000 | Mean size 10: 3.8 | Longest 10: 006 | Mean steps 10: 28.4 | Wins: 587 | 23.8%\n","Epoch: 2480/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 34.9 | Wins: 593 | 23.9%\n","Epoch: 2490/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 24.2 | Wins: 596 | 23.9%\n","Epoch: 2500/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 42.0 | Wins: 600 | 24.0%\n","Epoch: 2510/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 29.1 | Wins: 604 | 24.1%\n","Epoch: 2520/10000 | Mean size 10: 3.9 | Longest 10: 005 | Mean steps 10: 26.3 | Wins: 610 | 24.2%\n","Epoch: 2530/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 32.2 | Wins: 617 | 24.4%\n","Epoch: 2540/10000 | Mean size 10: 3.6 | Longest 10: 005 | Mean steps 10: 23.0 | Wins: 622 | 24.5%\n","Epoch: 2550/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 27.8 | Wins: 628 | 24.6%\n","Epoch: 2560/10000 | Mean size 10: 3.8 | Longest 10: 005 | Mean steps 10: 45.2 | Wins: 634 | 24.8%\n","Epoch: 2570/10000 | Mean size 10: 3.6 | Longest 10: 004 | Mean steps 10: 30.8 | Wins: 640 | 24.9%\n","Epoch: 2580/10000 | Mean size 10: 3.8 | Longest 10: 005 | Mean steps 10: 39.3 | Wins: 645 | 25.0%\n","Epoch: 2590/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 40.7 | Wins: 648 | 25.0%\n","Epoch: 2600/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 29.0 | Wins: 651 | 25.0%\n","Epoch: 2610/10000 | Mean size 10: 3.6 | Longest 10: 005 | Mean steps 10: 37.9 | Wins: 656 | 25.1%\n","Epoch: 2620/10000 | Mean size 10: 3.8 | Longest 10: 005 | Mean steps 10: 37.1 | Wins: 661 | 25.2%\n","Epoch: 2630/10000 | Mean size 10: 3.6 | Longest 10: 005 | Mean steps 10: 39.8 | Wins: 666 | 25.3%\n","Epoch: 2640/10000 | Mean size 10: 3.3 | Longest 10: 005 | Mean steps 10: 51.2 | Wins: 668 | 25.3%\n","Epoch: 2650/10000 | Mean size 10: 3.8 | Longest 10: 004 | Mean steps 10: 41.4 | Wins: 676 | 25.5%\n","Epoch: 2660/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 33.8 | Wins: 680 | 25.6%\n","Epoch: 2670/10000 | Mean size 10: 3.6 | Longest 10: 004 | Mean steps 10: 30.2 | Wins: 686 | 25.7%\n","Epoch: 2680/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 24.6 | Wins: 689 | 25.7%\n","Epoch: 2690/10000 | Mean size 10: 3.4 | Longest 10: 005 | Mean steps 10: 26.7 | Wins: 692 | 25.7%\n","Epoch: 2700/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 64.1 | Wins: 696 | 25.8%\n","Epoch: 2710/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 35.6 | Wins: 700 | 25.8%\n","Epoch: 2720/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 32.0 | Wins: 706 | 26.0%\n","Epoch: 2730/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 21.9 | Wins: 712 | 26.1%\n","Epoch: 2740/10000 | Mean size 10: 3.6 | Longest 10: 005 | Mean steps 10: 12.8 | Wins: 716 | 26.1%\n","Epoch: 2750/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 27.1 | Wins: 720 | 26.2%\n","Epoch: 2760/10000 | Mean size 10: 3.8 | Longest 10: 005 | Mean steps 10: 48.4 | Wins: 726 | 26.3%\n","Epoch: 2770/10000 | Mean size 10: 3.8 | Longest 10: 005 | Mean steps 10: 32.3 | Wins: 731 | 26.4%\n","Epoch: 2780/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 31.0 | Wins: 737 | 26.5%\n","Epoch: 2790/10000 | Mean size 10: 3.6 | Longest 10: 005 | Mean steps 10: 43.9 | Wins: 742 | 26.6%\n","Epoch: 2800/10000 | Mean size 10: 3.5 | Longest 10: 005 | Mean steps 10: 50.1 | Wins: 746 | 26.6%\n","Epoch: 2810/10000 | Mean size 10: 3.6 | Longest 10: 005 | Mean steps 10: 33.5 | Wins: 751 | 26.7%\n","Epoch: 2820/10000 | Mean size 10: 3.9 | Longest 10: 005 | Mean steps 10: 58.9 | Wins: 757 | 26.8%\n","Epoch: 2830/10000 | Mean size 10: 3.6 | Longest 10: 005 | Mean steps 10: 75.5 | Wins: 762 | 26.9%\n","Epoch: 2840/10000 | Mean size 10: 3.6 | Longest 10: 004 | Mean steps 10: 53.1 | Wins: 768 | 27.0%\n","Epoch: 2850/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 19.5 | Wins: 772 | 27.1%\n","Epoch: 2860/10000 | Mean size 10: 3.9 | Longest 10: 005 | Mean steps 10: 49.4 | Wins: 779 | 27.2%\n","Epoch: 2870/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 49.0 | Wins: 783 | 27.3%\n","Epoch: 2880/10000 | Mean size 10: 4.3 | Longest 10: 006 | Mean steps 10: 34.1 | Wins: 790 | 27.4%\n","Epoch: 2890/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 32.0 | Wins: 796 | 27.5%\n","Epoch: 2900/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 21.0 | Wins: 800 | 27.6%\n","Epoch: 2910/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 69.1 | Wins: 804 | 27.6%\n","Epoch: 2920/10000 | Mean size 10: 4.1 | Longest 10: 006 | Mean steps 10: 60.8 | Wins: 811 | 27.8%\n","Epoch: 2930/10000 | Mean size 10: 3.8 | Longest 10: 005 | Mean steps 10: 42.2 | Wins: 817 | 27.9%\n","Epoch: 2940/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 48.3 | Wins: 821 | 27.9%\n","Epoch: 2950/10000 | Mean size 10: 4.0 | Longest 10: 006 | Mean steps 10: 32.2 | Wins: 827 | 28.0%\n","Epoch: 2960/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 31.9 | Wins: 832 | 28.1%\n","Epoch: 2970/10000 | Mean size 10: 4.2 | Longest 10: 005 | Mean steps 10: 34.8 | Wins: 840 | 28.3%\n","Epoch: 2980/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 66.9 | Wins: 846 | 28.4%\n","Epoch: 2990/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 35.7 | Wins: 851 | 28.5%\n","Epoch: 3000/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 30.9 | Wins: 857 | 28.6%\n","Epoch: 3010/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 62.5 | Wins: 863 | 28.7%\n","Epoch: 3020/10000 | Mean size 10: 3.6 | Longest 10: 004 | Mean steps 10: 33.6 | Wins: 869 | 28.8%\n","Epoch: 3030/10000 | Mean size 10: 3.7 | Longest 10: 006 | Mean steps 10: 49.4 | Wins: 873 | 28.8%\n","Epoch: 3040/10000 | Mean size 10: 3.9 | Longest 10: 005 | Mean steps 10: 53.8 | Wins: 881 | 29.0%\n","Epoch: 3050/10000 | Mean size 10: 3.7 | Longest 10: 004 | Mean steps 10: 51.6 | Wins: 888 | 29.1%\n","Epoch: 3060/10000 | Mean size 10: 3.7 | Longest 10: 004 | Mean steps 10: 57.1 | Wins: 895 | 29.2%\n","Epoch: 3070/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 37.9 | Wins: 903 | 29.4%\n","Epoch: 3080/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 36.0 | Wins: 909 | 29.5%\n","Epoch: 3090/10000 | Mean size 10: 3.9 | Longest 10: 005 | Mean steps 10: 34.2 | Wins: 916 | 29.6%\n","Epoch: 3100/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 68.2 | Wins: 920 | 29.7%\n","Epoch: 3110/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 49.4 | Wins: 929 | 29.9%\n","Epoch: 3120/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 43.1 | Wins: 937 | 30.0%\n","Epoch: 3130/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 33.8 | Wins: 944 | 30.2%\n","Epoch: 3140/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 65.1 | Wins: 952 | 30.3%\n","Epoch: 3150/10000 | Mean size 10: 3.8 | Longest 10: 005 | Mean steps 10: 47.5 | Wins: 959 | 30.4%\n","Epoch: 3160/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 59.0 | Wins: 966 | 30.6%\n","Epoch: 3170/10000 | Mean size 10: 3.8 | Longest 10: 005 | Mean steps 10: 77.6 | Wins: 973 | 30.7%\n","Epoch: 3180/10000 | Mean size 10: 3.4 | Longest 10: 005 | Mean steps 10: 32.8 | Wins: 976 | 30.7%\n","Epoch: 3190/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 46.4 | Wins: 984 | 30.8%\n","Epoch: 3200/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 51.8 | Wins: 992 | 31.0%\n","Epoch: 3210/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 43.9 | Wins: 999 | 31.1%\n","Epoch: 3220/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 44.0 | Wins: 1003 | 31.1%\n","Epoch: 3230/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 81.0 | Wins: 1011 | 31.3%\n","Epoch: 3240/10000 | Mean size 10: 3.8 | Longest 10: 005 | Mean steps 10: 52.9 | Wins: 1018 | 31.4%\n","Epoch: 3250/10000 | Mean size 10: 3.3 | Longest 10: 004 | Mean steps 10: 41.7 | Wins: 1021 | 31.4%\n","Epoch: 3260/10000 | Mean size 10: 3.8 | Longest 10: 005 | Mean steps 10: 45.0 | Wins: 1028 | 31.5%\n","Epoch: 3270/10000 | Mean size 10: 3.6 | Longest 10: 005 | Mean steps 10: 41.8 | Wins: 1033 | 31.6%\n","Epoch: 3280/10000 | Mean size 10: 4.2 | Longest 10: 006 | Mean steps 10: 58.8 | Wins: 1042 | 31.8%\n","Epoch: 3290/10000 | Mean size 10: 3.9 | Longest 10: 005 | Mean steps 10: 61.9 | Wins: 1049 | 31.9%\n","Epoch: 3300/10000 | Mean size 10: 3.9 | Longest 10: 005 | Mean steps 10: 58.1 | Wins: 1056 | 32.0%\n","Epoch: 3310/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 32.5 | Wins: 1060 | 32.0%\n","Epoch: 3320/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 35.4 | Wins: 1067 | 32.1%\n","Epoch: 3330/10000 | Mean size 10: 4.2 | Longest 10: 005 | Mean steps 10: 97.0 | Wins: 1075 | 32.3%\n","Epoch: 3340/10000 | Mean size 10: 3.8 | Longest 10: 005 | Mean steps 10: 45.3 | Wins: 1080 | 32.3%\n","Epoch: 3350/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 39.9 | Wins: 1088 | 32.5%\n","Epoch: 3360/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 31.1 | Wins: 1094 | 32.6%\n","Epoch: 3370/10000 | Mean size 10: 4.7 | Longest 10: 005 | Mean steps 10: 58.5 | Wins: 1104 | 32.8%\n","Epoch: 3380/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 60.5 | Wins: 1112 | 32.9%\n","Epoch: 3390/10000 | Mean size 10: 4.2 | Longest 10: 005 | Mean steps 10: 64.4 | Wins: 1121 | 33.1%\n","Epoch: 3400/10000 | Mean size 10: 3.8 | Longest 10: 005 | Mean steps 10: 50.5 | Wins: 1128 | 33.2%\n","Epoch: 3410/10000 | Mean size 10: 3.9 | Longest 10: 006 | Mean steps 10: 53.0 | Wins: 1134 | 33.3%\n","Epoch: 3420/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 57.9 | Wins: 1141 | 33.4%\n","Epoch: 3430/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 61.1 | Wins: 1148 | 33.5%\n","Epoch: 3440/10000 | Mean size 10: 3.9 | Longest 10: 005 | Mean steps 10: 33.4 | Wins: 1155 | 33.6%\n","Epoch: 3450/10000 | Mean size 10: 4.4 | Longest 10: 005 | Mean steps 10: 39.7 | Wins: 1164 | 33.7%\n","Epoch: 3460/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 44.4 | Wins: 1173 | 33.9%\n","Epoch: 3470/10000 | Mean size 10: 3.9 | Longest 10: 005 | Mean steps 10: 52.4 | Wins: 1180 | 34.0%\n","Epoch: 3480/10000 | Mean size 10: 4.4 | Longest 10: 006 | Mean steps 10: 53.5 | Wins: 1188 | 34.1%\n","Epoch: 3490/10000 | Mean size 10: 3.6 | Longest 10: 005 | Mean steps 10: 61.9 | Wins: 1192 | 34.2%\n","Epoch: 3500/10000 | Mean size 10: 3.8 | Longest 10: 005 | Mean steps 10: 66.8 | Wins: 1198 | 34.2%\n","Epoch: 3510/10000 | Mean size 10: 4.3 | Longest 10: 005 | Mean steps 10: 55.2 | Wins: 1206 | 34.4%\n","Epoch: 3520/10000 | Mean size 10: 4.0 | Longest 10: 006 | Mean steps 10: 32.5 | Wins: 1214 | 34.5%\n","Epoch: 3530/10000 | Mean size 10: 3.9 | Longest 10: 005 | Mean steps 10: 69.4 | Wins: 1222 | 34.6%\n","Epoch: 3540/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 34.7 | Wins: 1229 | 34.7%\n","Epoch: 3550/10000 | Mean size 10: 3.9 | Longest 10: 005 | Mean steps 10: 37.3 | Wins: 1236 | 34.8%\n","Epoch: 3560/10000 | Mean size 10: 4.4 | Longest 10: 005 | Mean steps 10: 42.5 | Wins: 1243 | 34.9%\n","Epoch: 3570/10000 | Mean size 10: 4.2 | Longest 10: 006 | Mean steps 10: 56.8 | Wins: 1251 | 35.0%\n","Epoch: 3580/10000 | Mean size 10: 3.4 | Longest 10: 004 | Mean steps 10: 47.2 | Wins: 1255 | 35.1%\n","Epoch: 3590/10000 | Mean size 10: 3.7 | Longest 10: 005 | Mean steps 10: 18.8 | Wins: 1261 | 35.1%\n","Epoch: 3600/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 47.1 | Wins: 1269 | 35.2%\n","Epoch: 3610/10000 | Mean size 10: 4.4 | Longest 10: 005 | Mean steps 10: 64.9 | Wins: 1278 | 35.4%\n","Epoch: 3620/10000 | Mean size 10: 4.3 | Longest 10: 006 | Mean steps 10: 37.6 | Wins: 1286 | 35.5%\n","Epoch: 3630/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 56.8 | Wins: 1293 | 35.6%\n","Epoch: 3640/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 50.8 | Wins: 1300 | 35.7%\n","Epoch: 3650/10000 | Mean size 10: 4.5 | Longest 10: 006 | Mean steps 10: 45.6 | Wins: 1309 | 35.9%\n","Epoch: 3660/10000 | Mean size 10: 4.2 | Longest 10: 005 | Mean steps 10: 43.2 | Wins: 1317 | 36.0%\n","Epoch: 3670/10000 | Mean size 10: 4.5 | Longest 10: 005 | Mean steps 10: 49.3 | Wins: 1327 | 36.2%\n","Epoch: 3680/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 64.8 | Wins: 1334 | 36.2%\n","Epoch: 3690/10000 | Mean size 10: 3.9 | Longest 10: 005 | Mean steps 10: 51.9 | Wins: 1341 | 36.3%\n","Epoch: 3700/10000 | Mean size 10: 4.5 | Longest 10: 005 | Mean steps 10: 60.1 | Wins: 1351 | 36.5%\n","Epoch: 3710/10000 | Mean size 10: 4.4 | Longest 10: 005 | Mean steps 10: 44.5 | Wins: 1360 | 36.7%\n","Epoch: 3720/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 69.8 | Wins: 1367 | 36.7%\n","Epoch: 3730/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 98.9 | Wins: 1377 | 36.9%\n","Epoch: 3740/10000 | Mean size 10: 3.9 | Longest 10: 005 | Mean steps 10: 52.7 | Wins: 1384 | 37.0%\n","Epoch: 3750/10000 | Mean size 10: 4.7 | Longest 10: 005 | Mean steps 10: 39.6 | Wins: 1394 | 37.2%\n","Epoch: 3760/10000 | Mean size 10: 3.8 | Longest 10: 004 | Mean steps 10: 30.5 | Wins: 1402 | 37.3%\n","Epoch: 3770/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 35.4 | Wins: 1409 | 37.4%\n","Epoch: 3780/10000 | Mean size 10: 4.3 | Longest 10: 005 | Mean steps 10: 63.9 | Wins: 1418 | 37.5%\n","Epoch: 3790/10000 | Mean size 10: 3.8 | Longest 10: 005 | Mean steps 10: 53.2 | Wins: 1424 | 37.6%\n","Epoch: 3800/10000 | Mean size 10: 4.2 | Longest 10: 005 | Mean steps 10: 72.0 | Wins: 1431 | 37.7%\n","Epoch: 3810/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 35.7 | Wins: 1440 | 37.8%\n","Epoch: 3820/10000 | Mean size 10: 4.2 | Longest 10: 005 | Mean steps 10: 33.8 | Wins: 1449 | 37.9%\n","Epoch: 3830/10000 | Mean size 10: 3.9 | Longest 10: 005 | Mean steps 10: 71.6 | Wins: 1457 | 38.0%\n","Epoch: 3840/10000 | Mean size 10: 4.3 | Longest 10: 005 | Mean steps 10: 48.4 | Wins: 1466 | 38.2%\n","Epoch: 3850/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 58.0 | Wins: 1474 | 38.3%\n","Epoch: 3860/10000 | Mean size 10: 4.3 | Longest 10: 005 | Mean steps 10: 48.9 | Wins: 1482 | 38.4%\n","Epoch: 3870/10000 | Mean size 10: 4.5 | Longest 10: 006 | Mean steps 10: 50.7 | Wins: 1492 | 38.6%\n","Epoch: 3880/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 43.5 | Wins: 1499 | 38.6%\n","Epoch: 3890/10000 | Mean size 10: 4.2 | Longest 10: 006 | Mean steps 10: 44.4 | Wins: 1508 | 38.8%\n","Epoch: 3900/10000 | Mean size 10: 4.2 | Longest 10: 005 | Mean steps 10: 65.0 | Wins: 1517 | 38.9%\n","Epoch: 3910/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 43.0 | Wins: 1525 | 39.0%\n","Epoch: 3920/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 62.6 | Wins: 1533 | 39.1%\n","Epoch: 3930/10000 | Mean size 10: 4.3 | Longest 10: 005 | Mean steps 10: 40.0 | Wins: 1542 | 39.2%\n","Epoch: 3940/10000 | Mean size 10: 4.5 | Longest 10: 006 | Mean steps 10: 45.8 | Wins: 1552 | 39.4%\n","Epoch: 3950/10000 | Mean size 10: 4.7 | Longest 10: 006 | Mean steps 10: 36.0 | Wins: 1562 | 39.5%\n","Epoch: 3960/10000 | Mean size 10: 4.2 | Longest 10: 005 | Mean steps 10: 34.8 | Wins: 1570 | 39.6%\n","Epoch: 3970/10000 | Mean size 10: 4.2 | Longest 10: 005 | Mean steps 10: 49.4 | Wins: 1579 | 39.8%\n","Epoch: 3980/10000 | Mean size 10: 4.9 | Longest 10: 007 | Mean steps 10: 52.6 | Wins: 1589 | 39.9%\n","Epoch: 3990/10000 | Mean size 10: 4.1 | Longest 10: 006 | Mean steps 10: 55.7 | Wins: 1596 | 40.0%\n","Epoch: 4000/10000 | Mean size 10: 4.3 | Longest 10: 005 | Mean steps 10: 46.9 | Wins: 1605 | 40.1%\n","Epoch: 4010/10000 | Mean size 10: 4.2 | Longest 10: 005 | Mean steps 10: 38.7 | Wins: 1613 | 40.2%\n","Epoch: 4020/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 58.4 | Wins: 1621 | 40.3%\n","Epoch: 4030/10000 | Mean size 10: 4.6 | Longest 10: 005 | Mean steps 10: 56.5 | Wins: 1630 | 40.4%\n","Epoch: 4040/10000 | Mean size 10: 4.4 | Longest 10: 005 | Mean steps 10: 41.0 | Wins: 1639 | 40.6%\n","Epoch: 4050/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 52.4 | Wins: 1647 | 40.7%\n","Epoch: 4060/10000 | Mean size 10: 4.4 | Longest 10: 006 | Mean steps 10: 34.2 | Wins: 1656 | 40.8%\n","Epoch: 4070/10000 | Mean size 10: 4.6 | Longest 10: 005 | Mean steps 10: 30.1 | Wins: 1666 | 40.9%\n","Epoch: 4080/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 45.4 | Wins: 1674 | 41.0%\n","Epoch: 4090/10000 | Mean size 10: 4.1 | Longest 10: 005 | Mean steps 10: 43.7 | Wins: 1681 | 41.1%\n","Epoch: 4100/10000 | Mean size 10: 4.3 | Longest 10: 006 | Mean steps 10: 28.5 | Wins: 1689 | 41.2%\n","Epoch: 4110/10000 | Mean size 10: 3.8 | Longest 10: 005 | Mean steps 10: 53.0 | Wins: 1696 | 41.3%\n","Epoch: 4120/10000 | Mean size 10: 4.4 | Longest 10: 005 | Mean steps 10: 38.1 | Wins: 1705 | 41.4%\n","Epoch: 4130/10000 | Mean size 10: 4.4 | Longest 10: 006 | Mean steps 10: 57.5 | Wins: 1713 | 41.5%\n","Epoch: 4140/10000 | Mean size 10: 4.6 | Longest 10: 006 | Mean steps 10: 52.5 | Wins: 1722 | 41.6%\n","Epoch: 4150/10000 | Mean size 10: 4.5 | Longest 10: 005 | Mean steps 10: 66.2 | Wins: 1731 | 41.7%\n","Epoch: 4160/10000 | Mean size 10: 4.6 | Longest 10: 005 | Mean steps 10: 39.7 | Wins: 1740 | 41.8%\n","Epoch: 4170/10000 | Mean size 10: 4.2 | Longest 10: 006 | Mean steps 10: 37.9 | Wins: 1747 | 41.9%\n","Epoch: 4180/10000 | Mean size 10: 4.5 | Longest 10: 005 | Mean steps 10: 38.9 | Wins: 1756 | 42.0%\n","Epoch: 4190/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 47.9 | Wins: 1764 | 42.1%\n","Epoch: 4200/10000 | Mean size 10: 4.4 | Longest 10: 005 | Mean steps 10: 45.0 | Wins: 1773 | 42.2%\n","Epoch: 4210/10000 | Mean size 10: 4.5 | Longest 10: 006 | Mean steps 10: 37.2 | Wins: 1781 | 42.3%\n","Epoch: 4220/10000 | Mean size 10: 4.6 | Longest 10: 006 | Mean steps 10: 50.6 | Wins: 1790 | 42.4%\n","Epoch: 4230/10000 | Mean size 10: 4.5 | Longest 10: 005 | Mean steps 10: 30.6 | Wins: 1798 | 42.5%\n","Epoch: 4240/10000 | Mean size 10: 4.2 | Longest 10: 005 | Mean steps 10: 48.9 | Wins: 1806 | 42.6%\n","Epoch: 4250/10000 | Mean size 10: 4.6 | Longest 10: 007 | Mean steps 10: 56.1 | Wins: 1816 | 42.7%\n","Epoch: 4260/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 48.4 | Wins: 1826 | 42.9%\n","Epoch: 4270/10000 | Mean size 10: 4.3 | Longest 10: 006 | Mean steps 10: 54.7 | Wins: 1835 | 43.0%\n","Epoch: 4280/10000 | Mean size 10: 4.4 | Longest 10: 005 | Mean steps 10: 43.0 | Wins: 1844 | 43.1%\n","Epoch: 4290/10000 | Mean size 10: 4.5 | Longest 10: 005 | Mean steps 10: 34.1 | Wins: 1853 | 43.2%\n","Epoch: 4300/10000 | Mean size 10: 4.6 | Longest 10: 005 | Mean steps 10: 35.8 | Wins: 1862 | 43.3%\n","Epoch: 4310/10000 | Mean size 10: 4.4 | Longest 10: 005 | Mean steps 10: 51.3 | Wins: 1872 | 43.4%\n","Epoch: 4320/10000 | Mean size 10: 4.5 | Longest 10: 006 | Mean steps 10: 59.0 | Wins: 1880 | 43.5%\n","Epoch: 4330/10000 | Mean size 10: 4.4 | Longest 10: 005 | Mean steps 10: 53.0 | Wins: 1889 | 43.6%\n","Epoch: 4340/10000 | Mean size 10: 4.4 | Longest 10: 005 | Mean steps 10: 65.0 | Wins: 1898 | 43.7%\n","Epoch: 4350/10000 | Mean size 10: 4.3 | Longest 10: 006 | Mean steps 10: 52.3 | Wins: 1905 | 43.8%\n","Epoch: 4360/10000 | Mean size 10: 4.9 | Longest 10: 006 | Mean steps 10: 40.5 | Wins: 1915 | 43.9%\n","Epoch: 4370/10000 | Mean size 10: 4.5 | Longest 10: 007 | Mean steps 10: 55.5 | Wins: 1925 | 44.1%\n","Epoch: 4380/10000 | Mean size 10: 4.7 | Longest 10: 006 | Mean steps 10: 43.3 | Wins: 1934 | 44.2%\n","Epoch: 4390/10000 | Mean size 10: 4.3 | Longest 10: 005 | Mean steps 10: 49.8 | Wins: 1943 | 44.3%\n","Epoch: 4400/10000 | Mean size 10: 4.5 | Longest 10: 006 | Mean steps 10: 45.5 | Wins: 1951 | 44.3%\n","Epoch: 4410/10000 | Mean size 10: 4.6 | Longest 10: 006 | Mean steps 10: 51.9 | Wins: 1959 | 44.4%\n","Epoch: 4420/10000 | Mean size 10: 4.8 | Longest 10: 006 | Mean steps 10: 37.8 | Wins: 1969 | 44.5%\n","Epoch: 4430/10000 | Mean size 10: 4.4 | Longest 10: 005 | Mean steps 10: 38.2 | Wins: 1979 | 44.7%\n","Epoch: 4440/10000 | Mean size 10: 4.9 | Longest 10: 006 | Mean steps 10: 44.0 | Wins: 1989 | 44.8%\n","Epoch: 4450/10000 | Mean size 10: 4.4 | Longest 10: 005 | Mean steps 10: 54.8 | Wins: 1999 | 44.9%\n","Epoch: 4460/10000 | Mean size 10: 4.7 | Longest 10: 005 | Mean steps 10: 61.4 | Wins: 2009 | 45.0%\n","Epoch: 4470/10000 | Mean size 10: 4.6 | Longest 10: 006 | Mean steps 10: 57.0 | Wins: 2018 | 45.1%\n","Epoch: 4480/10000 | Mean size 10: 4.5 | Longest 10: 006 | Mean steps 10: 69.3 | Wins: 2027 | 45.2%\n","Epoch: 4490/10000 | Mean size 10: 4.6 | Longest 10: 005 | Mean steps 10: 36.1 | Wins: 2036 | 45.3%\n","Epoch: 4500/10000 | Mean size 10: 4.6 | Longest 10: 006 | Mean steps 10: 36.0 | Wins: 2046 | 45.5%\n","Epoch: 4510/10000 | Mean size 10: 4.2 | Longest 10: 005 | Mean steps 10: 52.6 | Wins: 2055 | 45.6%\n","Epoch: 4520/10000 | Mean size 10: 4.9 | Longest 10: 006 | Mean steps 10: 41.7 | Wins: 2065 | 45.7%\n","Epoch: 4530/10000 | Mean size 10: 4.8 | Longest 10: 005 | Mean steps 10: 33.1 | Wins: 2075 | 45.8%\n","Epoch: 4540/10000 | Mean size 10: 4.0 | Longest 10: 005 | Mean steps 10: 26.8 | Wins: 2083 | 45.9%\n","Epoch: 4550/10000 | Mean size 10: 4.3 | Longest 10: 005 | Mean steps 10: 43.4 | Wins: 2092 | 46.0%\n","Epoch: 4560/10000 | Mean size 10: 4.7 | Longest 10: 006 | Mean steps 10: 34.3 | Wins: 2101 | 46.1%\n","Epoch: 4570/10000 | Mean size 10: 4.6 | Longest 10: 005 | Mean steps 10: 35.6 | Wins: 2111 | 46.2%\n","Epoch: 4580/10000 | Mean size 10: 4.3 | Longest 10: 006 | Mean steps 10: 55.8 | Wins: 2119 | 46.3%\n","Epoch: 4590/10000 | Mean size 10: 4.9 | Longest 10: 005 | Mean steps 10: 43.9 | Wins: 2129 | 46.4%\n","Epoch: 4600/10000 | Mean size 10: 4.3 | Longest 10: 005 | Mean steps 10: 22.3 | Wins: 2139 | 46.5%\n","Epoch: 4610/10000 | Mean size 10: 4.9 | Longest 10: 007 | Mean steps 10: 48.3 | Wins: 2149 | 46.6%\n","Epoch: 4620/10000 | Mean size 10: 4.4 | Longest 10: 005 | Mean steps 10: 25.8 | Wins: 2158 | 46.7%\n","Epoch: 4630/10000 | Mean size 10: 4.9 | Longest 10: 005 | Mean steps 10: 31.9 | Wins: 2168 | 46.8%\n","Epoch: 4640/10000 | Mean size 10: 4.7 | Longest 10: 006 | Mean steps 10: 53.3 | Wins: 2177 | 46.9%\n","Epoch: 4650/10000 | Mean size 10: 5.1 | Longest 10: 006 | Mean steps 10: 30.9 | Wins: 2187 | 47.0%\n","Epoch: 4660/10000 | Mean size 10: 4.5 | Longest 10: 005 | Mean steps 10: 57.6 | Wins: 2197 | 47.1%\n","Epoch: 4670/10000 | Mean size 10: 4.9 | Longest 10: 006 | Mean steps 10: 32.8 | Wins: 2207 | 47.3%\n","Epoch: 4680/10000 | Mean size 10: 4.9 | Longest 10: 006 | Mean steps 10: 61.4 | Wins: 2216 | 47.4%\n","Epoch: 4690/10000 | Mean size 10: 4.7 | Longest 10: 006 | Mean steps 10: 46.2 | Wins: 2226 | 47.5%\n","Epoch: 4700/10000 | Mean size 10: 4.8 | Longest 10: 005 | Mean steps 10: 35.1 | Wins: 2236 | 47.6%\n","Epoch: 4710/10000 | Mean size 10: 4.7 | Longest 10: 005 | Mean steps 10: 54.6 | Wins: 2246 | 47.7%\n","Epoch: 4720/10000 | Mean size 10: 4.9 | Longest 10: 006 | Mean steps 10: 48.2 | Wins: 2256 | 47.8%\n","Epoch: 4730/10000 | Mean size 10: 4.7 | Longest 10: 006 | Mean steps 10: 61.3 | Wins: 2265 | 47.9%\n","Epoch: 4740/10000 | Mean size 10: 4.8 | Longest 10: 006 | Mean steps 10: 45.1 | Wins: 2275 | 48.0%\n","Epoch: 4750/10000 | Mean size 10: 4.5 | Longest 10: 005 | Mean steps 10: 35.9 | Wins: 2284 | 48.1%\n","Epoch: 4760/10000 | Mean size 10: 4.8 | Longest 10: 006 | Mean steps 10: 48.5 | Wins: 2292 | 48.2%\n","Epoch: 4770/10000 | Mean size 10: 4.7 | Longest 10: 006 | Mean steps 10: 44.2 | Wins: 2302 | 48.3%\n","Epoch: 4780/10000 | Mean size 10: 4.5 | Longest 10: 006 | Mean steps 10: 41.1 | Wins: 2311 | 48.3%\n","Epoch: 4790/10000 | Mean size 10: 4.9 | Longest 10: 006 | Mean steps 10: 46.4 | Wins: 2321 | 48.5%\n","Epoch: 4800/10000 | Mean size 10: 5.1 | Longest 10: 007 | Mean steps 10: 55.5 | Wins: 2331 | 48.6%\n","Epoch: 4810/10000 | Mean size 10: 4.4 | Longest 10: 005 | Mean steps 10: 38.5 | Wins: 2341 | 48.7%\n","Epoch: 4820/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 38.0 | Wins: 2351 | 48.8%\n","Epoch: 4830/10000 | Mean size 10: 4.8 | Longest 10: 006 | Mean steps 10: 31.2 | Wins: 2361 | 48.9%\n","Epoch: 4840/10000 | Mean size 10: 4.5 | Longest 10: 005 | Mean steps 10: 24.9 | Wins: 2370 | 49.0%\n","Epoch: 4850/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 23.6 | Wins: 2380 | 49.1%\n","Epoch: 4860/10000 | Mean size 10: 4.8 | Longest 10: 005 | Mean steps 10: 34.2 | Wins: 2390 | 49.2%\n","Epoch: 4870/10000 | Mean size 10: 5.1 | Longest 10: 007 | Mean steps 10: 36.1 | Wins: 2400 | 49.3%\n","Epoch: 4880/10000 | Mean size 10: 5.1 | Longest 10: 006 | Mean steps 10: 42.3 | Wins: 2410 | 49.4%\n","Epoch: 4890/10000 | Mean size 10: 4.9 | Longest 10: 006 | Mean steps 10: 44.4 | Wins: 2420 | 49.5%\n","Epoch: 4900/10000 | Mean size 10: 4.8 | Longest 10: 006 | Mean steps 10: 37.3 | Wins: 2430 | 49.6%\n","Epoch: 4910/10000 | Mean size 10: 5.1 | Longest 10: 006 | Mean steps 10: 42.0 | Wins: 2440 | 49.7%\n","Epoch: 4920/10000 | Mean size 10: 4.9 | Longest 10: 005 | Mean steps 10: 30.0 | Wins: 2450 | 49.8%\n","Epoch: 4930/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 36.9 | Wins: 2460 | 49.9%\n","Epoch: 4940/10000 | Mean size 10: 4.8 | Longest 10: 006 | Mean steps 10: 50.6 | Wins: 2469 | 50.0%\n","Epoch: 4950/10000 | Mean size 10: 4.8 | Longest 10: 006 | Mean steps 10: 41.7 | Wins: 2479 | 50.1%\n","Epoch: 4960/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 53.9 | Wins: 2489 | 50.2%\n","Epoch: 4970/10000 | Mean size 10: 4.9 | Longest 10: 007 | Mean steps 10: 68.4 | Wins: 2498 | 50.3%\n","Epoch: 4980/10000 | Mean size 10: 4.8 | Longest 10: 006 | Mean steps 10: 40.9 | Wins: 2507 | 50.3%\n","Epoch: 4990/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 58.4 | Wins: 2517 | 50.4%\n","Epoch: 5000/10000 | Mean size 10: 5.2 | Longest 10: 006 | Mean steps 10: 56.1 | Wins: 2527 | 50.5%\n","Epoch: 5010/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 36.9 | Wins: 2537 | 50.6%\n","Epoch: 5020/10000 | Mean size 10: 5.1 | Longest 10: 007 | Mean steps 10: 47.1 | Wins: 2547 | 50.7%\n","Epoch: 5030/10000 | Mean size 10: 4.7 | Longest 10: 006 | Mean steps 10: 48.5 | Wins: 2557 | 50.8%\n","Epoch: 5040/10000 | Mean size 10: 4.8 | Longest 10: 006 | Mean steps 10: 62.0 | Wins: 2566 | 50.9%\n","Epoch: 5050/10000 | Mean size 10: 4.8 | Longest 10: 006 | Mean steps 10: 28.3 | Wins: 2576 | 51.0%\n","Epoch: 5060/10000 | Mean size 10: 4.9 | Longest 10: 006 | Mean steps 10: 40.6 | Wins: 2585 | 51.1%\n","Epoch: 5070/10000 | Mean size 10: 4.6 | Longest 10: 005 | Mean steps 10: 31.1 | Wins: 2595 | 51.2%\n","Epoch: 5080/10000 | Mean size 10: 5.1 | Longest 10: 006 | Mean steps 10: 26.4 | Wins: 2605 | 51.3%\n","Epoch: 5090/10000 | Mean size 10: 4.7 | Longest 10: 006 | Mean steps 10: 31.1 | Wins: 2615 | 51.4%\n","Epoch: 5100/10000 | Mean size 10: 4.8 | Longest 10: 006 | Mean steps 10: 42.5 | Wins: 2625 | 51.5%\n","Epoch: 5110/10000 | Mean size 10: 5.2 | Longest 10: 006 | Mean steps 10: 31.0 | Wins: 2635 | 51.6%\n","Epoch: 5120/10000 | Mean size 10: 4.7 | Longest 10: 006 | Mean steps 10: 26.3 | Wins: 2645 | 51.7%\n","Epoch: 5130/10000 | Mean size 10: 4.7 | Longest 10: 006 | Mean steps 10: 64.1 | Wins: 2654 | 51.7%\n","Epoch: 5140/10000 | Mean size 10: 4.7 | Longest 10: 005 | Mean steps 10: 38.0 | Wins: 2664 | 51.8%\n","Epoch: 5150/10000 | Mean size 10: 4.9 | Longest 10: 007 | Mean steps 10: 21.4 | Wins: 2674 | 51.9%\n","Epoch: 5160/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 42.2 | Wins: 2684 | 52.0%\n","Epoch: 5170/10000 | Mean size 10: 5.3 | Longest 10: 007 | Mean steps 10: 50.1 | Wins: 2694 | 52.1%\n","Epoch: 5180/10000 | Mean size 10: 5.2 | Longest 10: 006 | Mean steps 10: 48.2 | Wins: 2703 | 52.2%\n","Epoch: 5190/10000 | Mean size 10: 4.8 | Longest 10: 006 | Mean steps 10: 40.2 | Wins: 2713 | 52.3%\n","Epoch: 5200/10000 | Mean size 10: 4.8 | Longest 10: 006 | Mean steps 10: 40.5 | Wins: 2723 | 52.4%\n","Epoch: 5210/10000 | Mean size 10: 5.4 | Longest 10: 007 | Mean steps 10: 34.9 | Wins: 2733 | 52.5%\n","Epoch: 5220/10000 | Mean size 10: 5.2 | Longest 10: 007 | Mean steps 10: 59.9 | Wins: 2743 | 52.5%\n","Epoch: 5230/10000 | Mean size 10: 5.2 | Longest 10: 006 | Mean steps 10: 45.0 | Wins: 2753 | 52.6%\n","Epoch: 5240/10000 | Mean size 10: 5.1 | Longest 10: 006 | Mean steps 10: 28.1 | Wins: 2763 | 52.7%\n","Epoch: 5250/10000 | Mean size 10: 5.1 | Longest 10: 007 | Mean steps 10: 30.8 | Wins: 2773 | 52.8%\n","Epoch: 5260/10000 | Mean size 10: 4.9 | Longest 10: 006 | Mean steps 10: 42.3 | Wins: 2783 | 52.9%\n","Epoch: 5270/10000 | Mean size 10: 4.9 | Longest 10: 006 | Mean steps 10: 41.9 | Wins: 2792 | 53.0%\n","Epoch: 5280/10000 | Mean size 10: 5.3 | Longest 10: 007 | Mean steps 10: 45.7 | Wins: 2802 | 53.1%\n","Epoch: 5290/10000 | Mean size 10: 4.6 | Longest 10: 006 | Mean steps 10: 43.3 | Wins: 2811 | 53.1%\n","Epoch: 5300/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 30.2 | Wins: 2821 | 53.2%\n","Epoch: 5310/10000 | Mean size 10: 5.2 | Longest 10: 007 | Mean steps 10: 31.4 | Wins: 2831 | 53.3%\n","Epoch: 5320/10000 | Mean size 10: 4.9 | Longest 10: 007 | Mean steps 10: 38.9 | Wins: 2841 | 53.4%\n","Epoch: 5330/10000 | Mean size 10: 5.3 | Longest 10: 006 | Mean steps 10: 52.9 | Wins: 2851 | 53.5%\n","Epoch: 5340/10000 | Mean size 10: 5.4 | Longest 10: 007 | Mean steps 10: 31.6 | Wins: 2861 | 53.6%\n","Epoch: 5350/10000 | Mean size 10: 5.1 | Longest 10: 006 | Mean steps 10: 52.4 | Wins: 2871 | 53.7%\n","Epoch: 5360/10000 | Mean size 10: 5.1 | Longest 10: 007 | Mean steps 10: 45.9 | Wins: 2880 | 53.7%\n","Epoch: 5370/10000 | Mean size 10: 5.2 | Longest 10: 007 | Mean steps 10: 38.9 | Wins: 2890 | 53.8%\n","Epoch: 5380/10000 | Mean size 10: 4.9 | Longest 10: 006 | Mean steps 10: 33.1 | Wins: 2900 | 53.9%\n","Epoch: 5390/10000 | Mean size 10: 5.0 | Longest 10: 007 | Mean steps 10: 48.7 | Wins: 2909 | 54.0%\n","Epoch: 5400/10000 | Mean size 10: 5.0 | Longest 10: 007 | Mean steps 10: 34.9 | Wins: 2919 | 54.1%\n","Epoch: 5410/10000 | Mean size 10: 4.9 | Longest 10: 007 | Mean steps 10: 58.1 | Wins: 2928 | 54.1%\n","Epoch: 5420/10000 | Mean size 10: 5.1 | Longest 10: 007 | Mean steps 10: 48.4 | Wins: 2938 | 54.2%\n","Epoch: 5430/10000 | Mean size 10: 5.2 | Longest 10: 006 | Mean steps 10: 49.0 | Wins: 2948 | 54.3%\n","Epoch: 5440/10000 | Mean size 10: 5.1 | Longest 10: 007 | Mean steps 10: 63.9 | Wins: 2958 | 54.4%\n","Epoch: 5450/10000 | Mean size 10: 4.7 | Longest 10: 006 | Mean steps 10: 43.5 | Wins: 2967 | 54.4%\n","Epoch: 5460/10000 | Mean size 10: 5.2 | Longest 10: 006 | Mean steps 10: 29.4 | Wins: 2977 | 54.5%\n","Epoch: 5470/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 25.4 | Wins: 2987 | 54.6%\n","Epoch: 5480/10000 | Mean size 10: 5.4 | Longest 10: 007 | Mean steps 10: 36.5 | Wins: 2997 | 54.7%\n","Epoch: 5490/10000 | Mean size 10: 4.9 | Longest 10: 006 | Mean steps 10: 23.6 | Wins: 3006 | 54.8%\n","Epoch: 5500/10000 | Mean size 10: 5.5 | Longest 10: 007 | Mean steps 10: 45.2 | Wins: 3016 | 54.8%\n","Epoch: 5510/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 31.0 | Wins: 3026 | 54.9%\n","Epoch: 5520/10000 | Mean size 10: 5.4 | Longest 10: 007 | Mean steps 10: 33.9 | Wins: 3036 | 55.0%\n","Epoch: 5530/10000 | Mean size 10: 5.2 | Longest 10: 006 | Mean steps 10: 33.5 | Wins: 3046 | 55.1%\n","Epoch: 5540/10000 | Mean size 10: 5.1 | Longest 10: 006 | Mean steps 10: 48.0 | Wins: 3056 | 55.2%\n","Epoch: 5550/10000 | Mean size 10: 5.2 | Longest 10: 006 | Mean steps 10: 44.7 | Wins: 3066 | 55.2%\n","Epoch: 5560/10000 | Mean size 10: 5.5 | Longest 10: 007 | Mean steps 10: 43.3 | Wins: 3076 | 55.3%\n","Epoch: 5570/10000 | Mean size 10: 5.1 | Longest 10: 007 | Mean steps 10: 38.1 | Wins: 3086 | 55.4%\n","Epoch: 5580/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 40.6 | Wins: 3096 | 55.5%\n","Epoch: 5590/10000 | Mean size 10: 5.2 | Longest 10: 006 | Mean steps 10: 45.3 | Wins: 3106 | 55.6%\n","Epoch: 5600/10000 | Mean size 10: 5.3 | Longest 10: 007 | Mean steps 10: 32.0 | Wins: 3116 | 55.6%\n","Epoch: 5610/10000 | Mean size 10: 5.5 | Longest 10: 007 | Mean steps 10: 37.2 | Wins: 3126 | 55.7%\n","Epoch: 5620/10000 | Mean size 10: 5.3 | Longest 10: 007 | Mean steps 10: 57.6 | Wins: 3136 | 55.8%\n","Epoch: 5630/10000 | Mean size 10: 5.4 | Longest 10: 006 | Mean steps 10: 54.2 | Wins: 3146 | 55.9%\n","Epoch: 5640/10000 | Mean size 10: 5.3 | Longest 10: 008 | Mean steps 10: 31.2 | Wins: 3156 | 56.0%\n","Epoch: 5650/10000 | Mean size 10: 5.4 | Longest 10: 006 | Mean steps 10: 52.0 | Wins: 3166 | 56.0%\n","Epoch: 5660/10000 | Mean size 10: 4.9 | Longest 10: 006 | Mean steps 10: 28.5 | Wins: 3176 | 56.1%\n","Epoch: 5670/10000 | Mean size 10: 5.5 | Longest 10: 008 | Mean steps 10: 33.9 | Wins: 3186 | 56.2%\n","Epoch: 5680/10000 | Mean size 10: 5.2 | Longest 10: 007 | Mean steps 10: 35.1 | Wins: 3196 | 56.3%\n","Epoch: 5690/10000 | Mean size 10: 5.3 | Longest 10: 008 | Mean steps 10: 38.1 | Wins: 3206 | 56.3%\n","Epoch: 5700/10000 | Mean size 10: 5.3 | Longest 10: 006 | Mean steps 10: 33.0 | Wins: 3216 | 56.4%\n","Epoch: 5710/10000 | Mean size 10: 4.9 | Longest 10: 007 | Mean steps 10: 37.0 | Wins: 3225 | 56.5%\n","Epoch: 5720/10000 | Mean size 10: 4.9 | Longest 10: 006 | Mean steps 10: 46.1 | Wins: 3235 | 56.6%\n","Epoch: 5730/10000 | Mean size 10: 4.9 | Longest 10: 006 | Mean steps 10: 29.5 | Wins: 3244 | 56.6%\n","Epoch: 5740/10000 | Mean size 10: 4.6 | Longest 10: 006 | Mean steps 10: 42.0 | Wins: 3254 | 56.7%\n","Epoch: 5750/10000 | Mean size 10: 5.1 | Longest 10: 006 | Mean steps 10: 30.2 | Wins: 3264 | 56.8%\n","Epoch: 5760/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 32.6 | Wins: 3274 | 56.8%\n","Epoch: 5770/10000 | Mean size 10: 5.4 | Longest 10: 007 | Mean steps 10: 45.5 | Wins: 3284 | 56.9%\n","Epoch: 5780/10000 | Mean size 10: 5.3 | Longest 10: 008 | Mean steps 10: 31.0 | Wins: 3294 | 57.0%\n","Epoch: 5790/10000 | Mean size 10: 5.2 | Longest 10: 007 | Mean steps 10: 32.2 | Wins: 3304 | 57.1%\n","Epoch: 5800/10000 | Mean size 10: 4.9 | Longest 10: 006 | Mean steps 10: 51.2 | Wins: 3314 | 57.1%\n","Epoch: 5810/10000 | Mean size 10: 5.5 | Longest 10: 007 | Mean steps 10: 42.1 | Wins: 3324 | 57.2%\n","Epoch: 5820/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 35.2 | Wins: 3334 | 57.3%\n","Epoch: 5830/10000 | Mean size 10: 5.4 | Longest 10: 008 | Mean steps 10: 47.6 | Wins: 3344 | 57.4%\n","Epoch: 5840/10000 | Mean size 10: 5.3 | Longest 10: 007 | Mean steps 10: 43.8 | Wins: 3354 | 57.4%\n","Epoch: 5850/10000 | Mean size 10: 5.3 | Longest 10: 007 | Mean steps 10: 33.9 | Wins: 3364 | 57.5%\n","Epoch: 5860/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 49.8 | Wins: 3374 | 57.6%\n","Epoch: 5870/10000 | Mean size 10: 4.9 | Longest 10: 007 | Mean steps 10: 33.0 | Wins: 3383 | 57.6%\n","Epoch: 5880/10000 | Mean size 10: 5.5 | Longest 10: 008 | Mean steps 10: 50.7 | Wins: 3393 | 57.7%\n","Epoch: 5890/10000 | Mean size 10: 5.4 | Longest 10: 007 | Mean steps 10: 38.1 | Wins: 3403 | 57.8%\n","Epoch: 5900/10000 | Mean size 10: 5.6 | Longest 10: 009 | Mean steps 10: 33.9 | Wins: 3413 | 57.8%\n","Epoch: 5910/10000 | Mean size 10: 5.7 | Longest 10: 008 | Mean steps 10: 43.2 | Wins: 3423 | 57.9%\n","Epoch: 5920/10000 | Mean size 10: 5.4 | Longest 10: 006 | Mean steps 10: 38.7 | Wins: 3433 | 58.0%\n","Epoch: 5930/10000 | Mean size 10: 5.1 | Longest 10: 006 | Mean steps 10: 26.4 | Wins: 3443 | 58.1%\n","Epoch: 5940/10000 | Mean size 10: 5.7 | Longest 10: 009 | Mean steps 10: 45.7 | Wins: 3453 | 58.1%\n","Epoch: 5950/10000 | Mean size 10: 5.3 | Longest 10: 008 | Mean steps 10: 33.6 | Wins: 3463 | 58.2%\n","Epoch: 5960/10000 | Mean size 10: 5.6 | Longest 10: 008 | Mean steps 10: 34.9 | Wins: 3473 | 58.3%\n","Epoch: 5970/10000 | Mean size 10: 5.4 | Longest 10: 007 | Mean steps 10: 42.6 | Wins: 3483 | 58.3%\n","Epoch: 5980/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 24.9 | Wins: 3493 | 58.4%\n","Epoch: 5990/10000 | Mean size 10: 5.3 | Longest 10: 007 | Mean steps 10: 27.1 | Wins: 3503 | 58.5%\n","Epoch: 6000/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 27.2 | Wins: 3513 | 58.5%\n","Epoch: 6010/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 21.7 | Wins: 3523 | 58.6%\n","Epoch: 6020/10000 | Mean size 10: 5.3 | Longest 10: 008 | Mean steps 10: 24.8 | Wins: 3533 | 58.7%\n","Epoch: 6030/10000 | Mean size 10: 5.4 | Longest 10: 007 | Mean steps 10: 40.2 | Wins: 3543 | 58.8%\n","Epoch: 6040/10000 | Mean size 10: 5.6 | Longest 10: 007 | Mean steps 10: 50.0 | Wins: 3553 | 58.8%\n","Epoch: 6050/10000 | Mean size 10: 5.3 | Longest 10: 006 | Mean steps 10: 27.5 | Wins: 3563 | 58.9%\n","Epoch: 6060/10000 | Mean size 10: 5.2 | Longest 10: 006 | Mean steps 10: 41.7 | Wins: 3573 | 59.0%\n","Epoch: 6070/10000 | Mean size 10: 5.4 | Longest 10: 007 | Mean steps 10: 37.6 | Wins: 3583 | 59.0%\n","Epoch: 6080/10000 | Mean size 10: 5.9 | Longest 10: 008 | Mean steps 10: 31.3 | Wins: 3593 | 59.1%\n","Epoch: 6090/10000 | Mean size 10: 5.1 | Longest 10: 006 | Mean steps 10: 33.9 | Wins: 3603 | 59.2%\n","Epoch: 6100/10000 | Mean size 10: 5.4 | Longest 10: 009 | Mean steps 10: 36.7 | Wins: 3613 | 59.2%\n","Epoch: 6110/10000 | Mean size 10: 5.6 | Longest 10: 007 | Mean steps 10: 35.2 | Wins: 3623 | 59.3%\n","Epoch: 6120/10000 | Mean size 10: 5.9 | Longest 10: 009 | Mean steps 10: 39.6 | Wins: 3633 | 59.4%\n","Epoch: 6130/10000 | Mean size 10: 5.6 | Longest 10: 008 | Mean steps 10: 34.0 | Wins: 3643 | 59.4%\n","Epoch: 6140/10000 | Mean size 10: 5.2 | Longest 10: 006 | Mean steps 10: 24.2 | Wins: 3652 | 59.5%\n","Epoch: 6150/10000 | Mean size 10: 5.0 | Longest 10: 006 | Mean steps 10: 56.6 | Wins: 3662 | 59.5%\n","Epoch: 6160/10000 | Mean size 10: 4.8 | Longest 10: 006 | Mean steps 10: 36.0 | Wins: 3670 | 59.6%\n","Epoch: 6170/10000 | Mean size 10: 5.1 | Longest 10: 007 | Mean steps 10: 31.6 | Wins: 3680 | 59.6%\n","Epoch: 6180/10000 | Mean size 10: 5.8 | Longest 10: 007 | Mean steps 10: 30.0 | Wins: 3690 | 59.7%\n","Epoch: 6190/10000 | Mean size 10: 5.2 | Longest 10: 007 | Mean steps 10: 22.4 | Wins: 3700 | 59.8%\n","Epoch: 6200/10000 | Mean size 10: 6.2 | Longest 10: 009 | Mean steps 10: 49.1 | Wins: 3710 | 59.8%\n","Epoch: 6210/10000 | Mean size 10: 5.6 | Longest 10: 006 | Mean steps 10: 32.3 | Wins: 3720 | 59.9%\n","Epoch: 6220/10000 | Mean size 10: 5.4 | Longest 10: 006 | Mean steps 10: 42.1 | Wins: 3730 | 60.0%\n","Epoch: 6230/10000 | Mean size 10: 5.5 | Longest 10: 007 | Mean steps 10: 42.0 | Wins: 3740 | 60.0%\n","Epoch: 6240/10000 | Mean size 10: 5.7 | Longest 10: 007 | Mean steps 10: 40.8 | Wins: 3750 | 60.1%\n","Epoch: 6250/10000 | Mean size 10: 5.5 | Longest 10: 008 | Mean steps 10: 49.2 | Wins: 3760 | 60.2%\n","Epoch: 6260/10000 | Mean size 10: 5.7 | Longest 10: 007 | Mean steps 10: 36.9 | Wins: 3770 | 60.2%\n","Epoch: 6270/10000 | Mean size 10: 6.0 | Longest 10: 008 | Mean steps 10: 39.0 | Wins: 3780 | 60.3%\n","Epoch: 6280/10000 | Mean size 10: 5.5 | Longest 10: 008 | Mean steps 10: 33.1 | Wins: 3790 | 60.4%\n","Epoch: 6290/10000 | Mean size 10: 5.6 | Longest 10: 008 | Mean steps 10: 37.6 | Wins: 3800 | 60.4%\n","Epoch: 6300/10000 | Mean size 10: 5.3 | Longest 10: 008 | Mean steps 10: 41.3 | Wins: 3809 | 60.5%\n","Epoch: 6310/10000 | Mean size 10: 5.7 | Longest 10: 008 | Mean steps 10: 28.0 | Wins: 3819 | 60.5%\n","Epoch: 6320/10000 | Mean size 10: 5.1 | Longest 10: 007 | Mean steps 10: 34.4 | Wins: 3828 | 60.6%\n","Epoch: 6330/10000 | Mean size 10: 5.4 | Longest 10: 006 | Mean steps 10: 26.1 | Wins: 3838 | 60.6%\n","Epoch: 6340/10000 | Mean size 10: 6.3 | Longest 10: 009 | Mean steps 10: 52.1 | Wins: 3848 | 60.7%\n","Epoch: 6350/10000 | Mean size 10: 5.5 | Longest 10: 007 | Mean steps 10: 32.0 | Wins: 3858 | 60.8%\n","Epoch: 6360/10000 | Mean size 10: 5.6 | Longest 10: 007 | Mean steps 10: 34.1 | Wins: 3868 | 60.8%\n","Epoch: 6370/10000 | Mean size 10: 5.4 | Longest 10: 007 | Mean steps 10: 27.5 | Wins: 3878 | 60.9%\n","Epoch: 6380/10000 | Mean size 10: 5.4 | Longest 10: 007 | Mean steps 10: 26.4 | Wins: 3887 | 60.9%\n","Epoch: 6390/10000 | Mean size 10: 6.0 | Longest 10: 008 | Mean steps 10: 57.1 | Wins: 3897 | 61.0%\n","Epoch: 6400/10000 | Mean size 10: 5.5 | Longest 10: 007 | Mean steps 10: 30.7 | Wins: 3907 | 61.0%\n","Epoch: 6410/10000 | Mean size 10: 5.6 | Longest 10: 007 | Mean steps 10: 37.0 | Wins: 3917 | 61.1%\n","Epoch: 6420/10000 | Mean size 10: 5.5 | Longest 10: 007 | Mean steps 10: 29.9 | Wins: 3927 | 61.2%\n","Epoch: 6430/10000 | Mean size 10: 5.3 | Longest 10: 007 | Mean steps 10: 33.4 | Wins: 3937 | 61.2%\n","Epoch: 6440/10000 | Mean size 10: 5.3 | Longest 10: 007 | Mean steps 10: 30.7 | Wins: 3947 | 61.3%\n","Epoch: 6450/10000 | Mean size 10: 5.9 | Longest 10: 008 | Mean steps 10: 41.4 | Wins: 3957 | 61.3%\n","Epoch: 6460/10000 | Mean size 10: 5.1 | Longest 10: 006 | Mean steps 10: 21.5 | Wins: 3967 | 61.4%\n","Epoch: 6470/10000 | Mean size 10: 5.4 | Longest 10: 007 | Mean steps 10: 38.0 | Wins: 3977 | 61.5%\n","Epoch: 6480/10000 | Mean size 10: 5.8 | Longest 10: 008 | Mean steps 10: 37.3 | Wins: 3987 | 61.5%\n","Epoch: 6490/10000 | Mean size 10: 6.0 | Longest 10: 008 | Mean steps 10: 43.1 | Wins: 3997 | 61.6%\n","Epoch: 6500/10000 | Mean size 10: 5.9 | Longest 10: 008 | Mean steps 10: 35.8 | Wins: 4007 | 61.6%\n","Epoch: 6510/10000 | Mean size 10: 5.5 | Longest 10: 009 | Mean steps 10: 28.8 | Wins: 4017 | 61.7%\n","Epoch: 6520/10000 | Mean size 10: 5.6 | Longest 10: 009 | Mean steps 10: 33.1 | Wins: 4027 | 61.8%\n","Epoch: 6530/10000 | Mean size 10: 5.6 | Longest 10: 008 | Mean steps 10: 29.8 | Wins: 4037 | 61.8%\n","Epoch: 6540/10000 | Mean size 10: 6.0 | Longest 10: 008 | Mean steps 10: 43.7 | Wins: 4047 | 61.9%\n","Epoch: 6550/10000 | Mean size 10: 6.0 | Longest 10: 008 | Mean steps 10: 36.1 | Wins: 4057 | 61.9%\n","Epoch: 6560/10000 | Mean size 10: 6.2 | Longest 10: 009 | Mean steps 10: 30.8 | Wins: 4067 | 62.0%\n","Epoch: 6570/10000 | Mean size 10: 6.0 | Longest 10: 008 | Mean steps 10: 30.6 | Wins: 4077 | 62.1%\n","Epoch: 6580/10000 | Mean size 10: 5.6 | Longest 10: 007 | Mean steps 10: 32.8 | Wins: 4087 | 62.1%\n","Epoch: 6590/10000 | Mean size 10: 5.4 | Longest 10: 007 | Mean steps 10: 31.0 | Wins: 4097 | 62.2%\n","Epoch: 6600/10000 | Mean size 10: 5.5 | Longest 10: 007 | Mean steps 10: 30.0 | Wins: 4107 | 62.2%\n","Epoch: 6610/10000 | Mean size 10: 5.6 | Longest 10: 008 | Mean steps 10: 31.2 | Wins: 4117 | 62.3%\n","Epoch: 6620/10000 | Mean size 10: 6.2 | Longest 10: 008 | Mean steps 10: 48.4 | Wins: 4127 | 62.3%\n","Epoch: 6630/10000 | Mean size 10: 5.6 | Longest 10: 007 | Mean steps 10: 37.3 | Wins: 4137 | 62.4%\n","Epoch: 6640/10000 | Mean size 10: 5.8 | Longest 10: 009 | Mean steps 10: 31.1 | Wins: 4147 | 62.5%\n","Epoch: 6650/10000 | Mean size 10: 5.3 | Longest 10: 007 | Mean steps 10: 34.6 | Wins: 4157 | 62.5%\n","Epoch: 6660/10000 | Mean size 10: 6.5 | Longest 10: 008 | Mean steps 10: 39.3 | Wins: 4167 | 62.6%\n","Epoch: 6670/10000 | Mean size 10: 5.9 | Longest 10: 010 | Mean steps 10: 42.5 | Wins: 4177 | 62.6%\n","Epoch: 6680/10000 | Mean size 10: 6.1 | Longest 10: 008 | Mean steps 10: 41.7 | Wins: 4187 | 62.7%\n","Epoch: 6690/10000 | Mean size 10: 6.0 | Longest 10: 008 | Mean steps 10: 41.7 | Wins: 4197 | 62.7%\n","Epoch: 6700/10000 | Mean size 10: 5.9 | Longest 10: 008 | Mean steps 10: 40.6 | Wins: 4207 | 62.8%\n","Epoch: 6710/10000 | Mean size 10: 5.1 | Longest 10: 007 | Mean steps 10: 32.2 | Wins: 4217 | 62.8%\n","Epoch: 6720/10000 | Mean size 10: 5.2 | Longest 10: 007 | Mean steps 10: 32.3 | Wins: 4227 | 62.9%\n","Epoch: 6730/10000 | Mean size 10: 5.5 | Longest 10: 007 | Mean steps 10: 46.2 | Wins: 4237 | 63.0%\n","Epoch: 6740/10000 | Mean size 10: 6.2 | Longest 10: 008 | Mean steps 10: 42.3 | Wins: 4247 | 63.0%\n","Epoch: 6750/10000 | Mean size 10: 5.6 | Longest 10: 008 | Mean steps 10: 34.1 | Wins: 4257 | 63.1%\n","Epoch: 6760/10000 | Mean size 10: 5.6 | Longest 10: 008 | Mean steps 10: 28.7 | Wins: 4267 | 63.1%\n","Epoch: 6770/10000 | Mean size 10: 6.5 | Longest 10: 010 | Mean steps 10: 41.8 | Wins: 4277 | 63.2%\n","Epoch: 6780/10000 | Mean size 10: 5.4 | Longest 10: 007 | Mean steps 10: 27.9 | Wins: 4287 | 63.2%\n","Epoch: 6790/10000 | Mean size 10: 5.9 | Longest 10: 008 | Mean steps 10: 40.0 | Wins: 4296 | 63.3%\n","Epoch: 6800/10000 | Mean size 10: 6.5 | Longest 10: 008 | Mean steps 10: 51.0 | Wins: 4306 | 63.3%\n","Epoch: 6810/10000 | Mean size 10: 5.7 | Longest 10: 008 | Mean steps 10: 30.7 | Wins: 4316 | 63.4%\n","Epoch: 6820/10000 | Mean size 10: 6.2 | Longest 10: 008 | Mean steps 10: 50.8 | Wins: 4326 | 63.4%\n","Epoch: 6830/10000 | Mean size 10: 5.2 | Longest 10: 007 | Mean steps 10: 32.1 | Wins: 4336 | 63.5%\n","Epoch: 6840/10000 | Mean size 10: 5.2 | Longest 10: 006 | Mean steps 10: 39.9 | Wins: 4346 | 63.5%\n","Epoch: 6850/10000 | Mean size 10: 6.6 | Longest 10: 010 | Mean steps 10: 45.3 | Wins: 4356 | 63.6%\n","Epoch: 6860/10000 | Mean size 10: 5.5 | Longest 10: 007 | Mean steps 10: 43.8 | Wins: 4366 | 63.6%\n","Epoch: 6870/10000 | Mean size 10: 5.5 | Longest 10: 007 | Mean steps 10: 32.1 | Wins: 4376 | 63.7%\n","Epoch: 6880/10000 | Mean size 10: 5.3 | Longest 10: 007 | Mean steps 10: 28.5 | Wins: 4386 | 63.8%\n","Epoch: 6890/10000 | Mean size 10: 5.7 | Longest 10: 007 | Mean steps 10: 30.9 | Wins: 4396 | 63.8%\n","Epoch: 6900/10000 | Mean size 10: 6.2 | Longest 10: 008 | Mean steps 10: 53.1 | Wins: 4406 | 63.9%\n","Epoch: 6910/10000 | Mean size 10: 6.3 | Longest 10: 008 | Mean steps 10: 54.5 | Wins: 4416 | 63.9%\n","Epoch: 6920/10000 | Mean size 10: 6.3 | Longest 10: 009 | Mean steps 10: 47.5 | Wins: 4426 | 64.0%\n","Epoch: 6930/10000 | Mean size 10: 5.7 | Longest 10: 008 | Mean steps 10: 39.5 | Wins: 4436 | 64.0%\n","Epoch: 6940/10000 | Mean size 10: 5.9 | Longest 10: 008 | Mean steps 10: 38.4 | Wins: 4446 | 64.1%\n","Epoch: 6950/10000 | Mean size 10: 5.6 | Longest 10: 008 | Mean steps 10: 33.8 | Wins: 4456 | 64.1%\n","Epoch: 6960/10000 | Mean size 10: 5.3 | Longest 10: 006 | Mean steps 10: 28.1 | Wins: 4466 | 64.2%\n","Epoch: 6970/10000 | Mean size 10: 6.4 | Longest 10: 009 | Mean steps 10: 40.7 | Wins: 4476 | 64.2%\n","Epoch: 6980/10000 | Mean size 10: 5.6 | Longest 10: 009 | Mean steps 10: 36.1 | Wins: 4486 | 64.3%\n","Epoch: 6990/10000 | Mean size 10: 6.1 | Longest 10: 011 | Mean steps 10: 45.2 | Wins: 4496 | 64.3%\n","Epoch: 7000/10000 | Mean size 10: 6.7 | Longest 10: 010 | Mean steps 10: 40.3 | Wins: 4506 | 64.4%\n","Epoch: 7010/10000 | Mean size 10: 5.9 | Longest 10: 008 | Mean steps 10: 38.1 | Wins: 4516 | 64.4%\n","Epoch: 7020/10000 | Mean size 10: 6.4 | Longest 10: 008 | Mean steps 10: 48.3 | Wins: 4526 | 64.5%\n","Epoch: 7030/10000 | Mean size 10: 6.0 | Longest 10: 009 | Mean steps 10: 30.0 | Wins: 4536 | 64.5%\n","Epoch: 7040/10000 | Mean size 10: 6.2 | Longest 10: 009 | Mean steps 10: 55.3 | Wins: 4546 | 64.6%\n","Epoch: 7050/10000 | Mean size 10: 5.8 | Longest 10: 009 | Mean steps 10: 36.6 | Wins: 4556 | 64.6%\n","Epoch: 7060/10000 | Mean size 10: 6.2 | Longest 10: 009 | Mean steps 10: 50.1 | Wins: 4566 | 64.7%\n","Epoch: 7070/10000 | Mean size 10: 6.9 | Longest 10: 010 | Mean steps 10: 43.0 | Wins: 4576 | 64.7%\n","Epoch: 7080/10000 | Mean size 10: 6.7 | Longest 10: 009 | Mean steps 10: 51.0 | Wins: 4586 | 64.8%\n","Epoch: 7090/10000 | Mean size 10: 6.5 | Longest 10: 008 | Mean steps 10: 39.5 | Wins: 4596 | 64.8%\n","Epoch: 7100/10000 | Mean size 10: 5.9 | Longest 10: 008 | Mean steps 10: 45.7 | Wins: 4606 | 64.9%\n","Epoch: 7110/10000 | Mean size 10: 5.7 | Longest 10: 007 | Mean steps 10: 39.5 | Wins: 4616 | 64.9%\n","Epoch: 7120/10000 | Mean size 10: 6.0 | Longest 10: 010 | Mean steps 10: 32.2 | Wins: 4626 | 65.0%\n","Epoch: 7130/10000 | Mean size 10: 5.5 | Longest 10: 008 | Mean steps 10: 38.2 | Wins: 4636 | 65.0%\n","Epoch: 7140/10000 | Mean size 10: 6.3 | Longest 10: 009 | Mean steps 10: 46.4 | Wins: 4646 | 65.1%\n","Epoch: 7150/10000 | Mean size 10: 6.5 | Longest 10: 008 | Mean steps 10: 53.6 | Wins: 4656 | 65.1%\n","Epoch: 7160/10000 | Mean size 10: 5.9 | Longest 10: 008 | Mean steps 10: 30.2 | Wins: 4666 | 65.2%\n","Epoch: 7170/10000 | Mean size 10: 5.7 | Longest 10: 009 | Mean steps 10: 38.0 | Wins: 4676 | 65.2%\n","Epoch: 7180/10000 | Mean size 10: 6.6 | Longest 10: 009 | Mean steps 10: 34.5 | Wins: 4686 | 65.3%\n","Epoch: 7190/10000 | Mean size 10: 6.1 | Longest 10: 008 | Mean steps 10: 38.6 | Wins: 4696 | 65.3%\n","Epoch: 7200/10000 | Mean size 10: 6.0 | Longest 10: 009 | Mean steps 10: 41.7 | Wins: 4706 | 65.4%\n","Epoch: 7210/10000 | Mean size 10: 5.4 | Longest 10: 008 | Mean steps 10: 31.6 | Wins: 4715 | 65.4%\n","Epoch: 7220/10000 | Mean size 10: 6.1 | Longest 10: 008 | Mean steps 10: 37.5 | Wins: 4724 | 65.4%\n","Epoch: 7230/10000 | Mean size 10: 6.5 | Longest 10: 008 | Mean steps 10: 44.1 | Wins: 4734 | 65.5%\n","Epoch: 7240/10000 | Mean size 10: 6.9 | Longest 10: 010 | Mean steps 10: 46.0 | Wins: 4744 | 65.5%\n","Epoch: 7250/10000 | Mean size 10: 5.9 | Longest 10: 007 | Mean steps 10: 34.6 | Wins: 4754 | 65.6%\n","Epoch: 7260/10000 | Mean size 10: 6.6 | Longest 10: 008 | Mean steps 10: 45.6 | Wins: 4764 | 65.6%\n","Epoch: 7270/10000 | Mean size 10: 7.1 | Longest 10: 009 | Mean steps 10: 52.6 | Wins: 4774 | 65.7%\n","Epoch: 7280/10000 | Mean size 10: 5.9 | Longest 10: 007 | Mean steps 10: 36.2 | Wins: 4784 | 65.7%\n","Epoch: 7290/10000 | Mean size 10: 6.0 | Longest 10: 009 | Mean steps 10: 40.3 | Wins: 4794 | 65.8%\n","Epoch: 7300/10000 | Mean size 10: 6.5 | Longest 10: 012 | Mean steps 10: 43.4 | Wins: 4804 | 65.8%\n","Epoch: 7310/10000 | Mean size 10: 5.7 | Longest 10: 010 | Mean steps 10: 38.0 | Wins: 4813 | 65.8%\n","Epoch: 7320/10000 | Mean size 10: 6.7 | Longest 10: 010 | Mean steps 10: 35.2 | Wins: 4823 | 65.9%\n","Epoch: 7330/10000 | Mean size 10: 6.2 | Longest 10: 009 | Mean steps 10: 37.6 | Wins: 4833 | 65.9%\n","Epoch: 7340/10000 | Mean size 10: 6.8 | Longest 10: 008 | Mean steps 10: 48.1 | Wins: 4843 | 66.0%\n","Epoch: 7350/10000 | Mean size 10: 6.2 | Longest 10: 009 | Mean steps 10: 57.6 | Wins: 4853 | 66.0%\n","Epoch: 7360/10000 | Mean size 10: 6.0 | Longest 10: 009 | Mean steps 10: 35.8 | Wins: 4863 | 66.1%\n","Epoch: 7370/10000 | Mean size 10: 7.3 | Longest 10: 010 | Mean steps 10: 42.2 | Wins: 4873 | 66.1%\n","Epoch: 7380/10000 | Mean size 10: 7.0 | Longest 10: 010 | Mean steps 10: 49.7 | Wins: 4883 | 66.2%\n","Epoch: 7390/10000 | Mean size 10: 6.0 | Longest 10: 010 | Mean steps 10: 40.5 | Wins: 4893 | 66.2%\n","Epoch: 7400/10000 | Mean size 10: 5.9 | Longest 10: 009 | Mean steps 10: 31.3 | Wins: 4903 | 66.3%\n","Epoch: 7410/10000 | Mean size 10: 7.1 | Longest 10: 010 | Mean steps 10: 62.5 | Wins: 4913 | 66.3%\n","Epoch: 7420/10000 | Mean size 10: 5.9 | Longest 10: 008 | Mean steps 10: 30.2 | Wins: 4923 | 66.3%\n","Epoch: 7430/10000 | Mean size 10: 6.0 | Longest 10: 008 | Mean steps 10: 34.0 | Wins: 4933 | 66.4%\n","Epoch: 7440/10000 | Mean size 10: 5.9 | Longest 10: 008 | Mean steps 10: 32.9 | Wins: 4943 | 66.4%\n","Epoch: 7450/10000 | Mean size 10: 5.7 | Longest 10: 008 | Mean steps 10: 38.0 | Wins: 4953 | 66.5%\n","Epoch: 7460/10000 | Mean size 10: 5.8 | Longest 10: 007 | Mean steps 10: 40.9 | Wins: 4963 | 66.5%\n","Epoch: 7470/10000 | Mean size 10: 7.3 | Longest 10: 011 | Mean steps 10: 51.0 | Wins: 4973 | 66.6%\n","Epoch: 7480/10000 | Mean size 10: 6.7 | Longest 10: 011 | Mean steps 10: 50.7 | Wins: 4983 | 66.6%\n","Epoch: 7490/10000 | Mean size 10: 7.0 | Longest 10: 010 | Mean steps 10: 50.7 | Wins: 4993 | 66.7%\n","Epoch: 7500/10000 | Mean size 10: 6.9 | Longest 10: 012 | Mean steps 10: 44.3 | Wins: 5003 | 66.7%\n","Epoch: 7510/10000 | Mean size 10: 7.4 | Longest 10: 011 | Mean steps 10: 55.6 | Wins: 5013 | 66.8%\n","Epoch: 7520/10000 | Mean size 10: 6.2 | Longest 10: 009 | Mean steps 10: 35.5 | Wins: 5023 | 66.8%\n","Epoch: 7530/10000 | Mean size 10: 6.1 | Longest 10: 008 | Mean steps 10: 31.4 | Wins: 5033 | 66.8%\n","Epoch: 7540/10000 | Mean size 10: 6.9 | Longest 10: 009 | Mean steps 10: 48.0 | Wins: 5043 | 66.9%\n","Epoch: 7550/10000 | Mean size 10: 6.5 | Longest 10: 010 | Mean steps 10: 39.1 | Wins: 5053 | 66.9%\n","Epoch: 7560/10000 | Mean size 10: 6.1 | Longest 10: 009 | Mean steps 10: 47.9 | Wins: 5062 | 67.0%\n","Epoch: 7570/10000 | Mean size 10: 6.5 | Longest 10: 008 | Mean steps 10: 43.9 | Wins: 5072 | 67.0%\n","Epoch: 7580/10000 | Mean size 10: 6.6 | Longest 10: 009 | Mean steps 10: 46.6 | Wins: 5082 | 67.0%\n","Epoch: 7590/10000 | Mean size 10: 7.0 | Longest 10: 012 | Mean steps 10: 52.4 | Wins: 5092 | 67.1%\n","Epoch: 7600/10000 | Mean size 10: 6.8 | Longest 10: 011 | Mean steps 10: 49.9 | Wins: 5101 | 67.1%\n","Epoch: 7610/10000 | Mean size 10: 6.1 | Longest 10: 009 | Mean steps 10: 39.8 | Wins: 5111 | 67.2%\n","Epoch: 7620/10000 | Mean size 10: 6.6 | Longest 10: 011 | Mean steps 10: 57.3 | Wins: 5121 | 67.2%\n","Epoch: 7630/10000 | Mean size 10: 6.8 | Longest 10: 010 | Mean steps 10: 55.2 | Wins: 5131 | 67.2%\n","Epoch: 7640/10000 | Mean size 10: 6.9 | Longest 10: 009 | Mean steps 10: 39.1 | Wins: 5141 | 67.3%\n","Epoch: 7650/10000 | Mean size 10: 5.9 | Longest 10: 010 | Mean steps 10: 32.8 | Wins: 5151 | 67.3%\n","Epoch: 7660/10000 | Mean size 10: 7.7 | Longest 10: 010 | Mean steps 10: 54.6 | Wins: 5161 | 67.4%\n","Epoch: 7670/10000 | Mean size 10: 6.5 | Longest 10: 009 | Mean steps 10: 37.8 | Wins: 5171 | 67.4%\n","Epoch: 7680/10000 | Mean size 10: 6.9 | Longest 10: 011 | Mean steps 10: 44.5 | Wins: 5181 | 67.5%\n","Epoch: 7690/10000 | Mean size 10: 6.1 | Longest 10: 010 | Mean steps 10: 38.8 | Wins: 5191 | 67.5%\n","Epoch: 7700/10000 | Mean size 10: 7.2 | Longest 10: 011 | Mean steps 10: 47.6 | Wins: 5201 | 67.5%\n","Epoch: 7710/10000 | Mean size 10: 5.9 | Longest 10: 010 | Mean steps 10: 31.4 | Wins: 5211 | 67.6%\n","Epoch: 7720/10000 | Mean size 10: 7.0 | Longest 10: 010 | Mean steps 10: 49.0 | Wins: 5221 | 67.6%\n","Epoch: 7730/10000 | Mean size 10: 6.5 | Longest 10: 010 | Mean steps 10: 37.1 | Wins: 5231 | 67.7%\n","Epoch: 7740/10000 | Mean size 10: 6.9 | Longest 10: 010 | Mean steps 10: 38.7 | Wins: 5241 | 67.7%\n","Epoch: 7750/10000 | Mean size 10: 6.8 | Longest 10: 008 | Mean steps 10: 42.3 | Wins: 5251 | 67.8%\n","Epoch: 7760/10000 | Mean size 10: 6.7 | Longest 10: 011 | Mean steps 10: 43.7 | Wins: 5261 | 67.8%\n","Epoch: 7770/10000 | Mean size 10: 7.3 | Longest 10: 011 | Mean steps 10: 52.1 | Wins: 5271 | 67.8%\n","Epoch: 7780/10000 | Mean size 10: 6.3 | Longest 10: 009 | Mean steps 10: 50.8 | Wins: 5281 | 67.9%\n","Epoch: 7790/10000 | Mean size 10: 7.4 | Longest 10: 010 | Mean steps 10: 58.2 | Wins: 5291 | 67.9%\n","Epoch: 7800/10000 | Mean size 10: 6.9 | Longest 10: 010 | Mean steps 10: 42.4 | Wins: 5301 | 68.0%\n","Epoch: 7810/10000 | Mean size 10: 7.2 | Longest 10: 010 | Mean steps 10: 47.4 | Wins: 5311 | 68.0%\n","Epoch: 7820/10000 | Mean size 10: 6.9 | Longest 10: 009 | Mean steps 10: 47.9 | Wins: 5321 | 68.0%\n","Epoch: 7830/10000 | Mean size 10: 6.1 | Longest 10: 010 | Mean steps 10: 32.3 | Wins: 5331 | 68.1%\n","Epoch: 7840/10000 | Mean size 10: 7.4 | Longest 10: 010 | Mean steps 10: 44.6 | Wins: 5341 | 68.1%\n","Epoch: 7850/10000 | Mean size 10: 7.6 | Longest 10: 012 | Mean steps 10: 53.9 | Wins: 5351 | 68.2%\n","Epoch: 7860/10000 | Mean size 10: 7.0 | Longest 10: 009 | Mean steps 10: 46.3 | Wins: 5361 | 68.2%\n","Epoch: 7870/10000 | Mean size 10: 6.4 | Longest 10: 010 | Mean steps 10: 35.0 | Wins: 5371 | 68.2%\n","Epoch: 7880/10000 | Mean size 10: 7.4 | Longest 10: 009 | Mean steps 10: 52.1 | Wins: 5381 | 68.3%\n","Epoch: 7890/10000 | Mean size 10: 6.4 | Longest 10: 009 | Mean steps 10: 36.5 | Wins: 5391 | 68.3%\n","Epoch: 7900/10000 | Mean size 10: 8.0 | Longest 10: 012 | Mean steps 10: 59.3 | Wins: 5401 | 68.4%\n","Epoch: 7910/10000 | Mean size 10: 6.9 | Longest 10: 009 | Mean steps 10: 45.7 | Wins: 5411 | 68.4%\n","Epoch: 7920/10000 | Mean size 10: 6.8 | Longest 10: 009 | Mean steps 10: 43.1 | Wins: 5421 | 68.4%\n","Epoch: 7930/10000 | Mean size 10: 7.8 | Longest 10: 011 | Mean steps 10: 55.8 | Wins: 5431 | 68.5%\n","Epoch: 7940/10000 | Mean size 10: 6.5 | Longest 10: 010 | Mean steps 10: 39.8 | Wins: 5441 | 68.5%\n","Epoch: 7950/10000 | Mean size 10: 7.4 | Longest 10: 012 | Mean steps 10: 52.9 | Wins: 5451 | 68.6%\n","Epoch: 7960/10000 | Mean size 10: 7.2 | Longest 10: 010 | Mean steps 10: 48.2 | Wins: 5461 | 68.6%\n","Epoch: 7970/10000 | Mean size 10: 6.9 | Longest 10: 016 | Mean steps 10: 44.3 | Wins: 5471 | 68.6%\n","Epoch: 7980/10000 | Mean size 10: 8.9 | Longest 10: 013 | Mean steps 10: 59.4 | Wins: 5481 | 68.7%\n","Epoch: 7990/10000 | Mean size 10: 7.3 | Longest 10: 009 | Mean steps 10: 56.7 | Wins: 5491 | 68.7%\n","Epoch: 8000/10000 | Mean size 10: 6.9 | Longest 10: 010 | Mean steps 10: 48.5 | Wins: 5501 | 68.8%\n","Epoch: 8010/10000 | Mean size 10: 8.2 | Longest 10: 012 | Mean steps 10: 54.3 | Wins: 5511 | 68.8%\n","Epoch: 8020/10000 | Mean size 10: 8.3 | Longest 10: 014 | Mean steps 10: 67.8 | Wins: 5521 | 68.8%\n","Epoch: 8030/10000 | Mean size 10: 6.5 | Longest 10: 008 | Mean steps 10: 38.4 | Wins: 5531 | 68.9%\n","Epoch: 8040/10000 | Mean size 10: 7.0 | Longest 10: 010 | Mean steps 10: 40.9 | Wins: 5541 | 68.9%\n","Epoch: 8050/10000 | Mean size 10: 7.0 | Longest 10: 011 | Mean steps 10: 40.8 | Wins: 5551 | 69.0%\n","Epoch: 8060/10000 | Mean size 10: 8.0 | Longest 10: 012 | Mean steps 10: 57.2 | Wins: 5561 | 69.0%\n","Epoch: 8070/10000 | Mean size 10: 6.6 | Longest 10: 010 | Mean steps 10: 44.4 | Wins: 5571 | 69.0%\n","Epoch: 8080/10000 | Mean size 10: 6.0 | Longest 10: 007 | Mean steps 10: 30.2 | Wins: 5581 | 69.1%\n","Epoch: 8090/10000 | Mean size 10: 7.9 | Longest 10: 010 | Mean steps 10: 57.3 | Wins: 5591 | 69.1%\n","Epoch: 8100/10000 | Mean size 10: 7.6 | Longest 10: 011 | Mean steps 10: 42.8 | Wins: 5601 | 69.1%\n","Epoch: 8110/10000 | Mean size 10: 7.6 | Longest 10: 010 | Mean steps 10: 54.6 | Wins: 5611 | 69.2%\n","Epoch: 8120/10000 | Mean size 10: 7.2 | Longest 10: 010 | Mean steps 10: 53.7 | Wins: 5621 | 69.2%\n","Epoch: 8130/10000 | Mean size 10: 7.3 | Longest 10: 010 | Mean steps 10: 43.0 | Wins: 5631 | 69.3%\n","Epoch: 8140/10000 | Mean size 10: 7.0 | Longest 10: 010 | Mean steps 10: 42.4 | Wins: 5641 | 69.3%\n","Epoch: 8150/10000 | Mean size 10: 7.7 | Longest 10: 011 | Mean steps 10: 42.8 | Wins: 5651 | 69.3%\n","Epoch: 8160/10000 | Mean size 10: 7.0 | Longest 10: 012 | Mean steps 10: 52.3 | Wins: 5661 | 69.4%\n","Epoch: 8170/10000 | Mean size 10: 7.8 | Longest 10: 014 | Mean steps 10: 46.7 | Wins: 5671 | 69.4%\n","Epoch: 8180/10000 | Mean size 10: 7.1 | Longest 10: 011 | Mean steps 10: 41.9 | Wins: 5681 | 69.4%\n","Epoch: 8190/10000 | Mean size 10: 7.1 | Longest 10: 009 | Mean steps 10: 47.0 | Wins: 5691 | 69.5%\n","Epoch: 8200/10000 | Mean size 10: 6.8 | Longest 10: 012 | Mean steps 10: 43.9 | Wins: 5701 | 69.5%\n","Epoch: 8210/10000 | Mean size 10: 7.5 | Longest 10: 011 | Mean steps 10: 47.1 | Wins: 5711 | 69.6%\n","Epoch: 8220/10000 | Mean size 10: 8.0 | Longest 10: 010 | Mean steps 10: 52.0 | Wins: 5721 | 69.6%\n","Epoch: 8230/10000 | Mean size 10: 6.7 | Longest 10: 011 | Mean steps 10: 46.0 | Wins: 5731 | 69.6%\n","Epoch: 8240/10000 | Mean size 10: 7.3 | Longest 10: 011 | Mean steps 10: 46.8 | Wins: 5741 | 69.7%\n","Epoch: 8250/10000 | Mean size 10: 7.0 | Longest 10: 010 | Mean steps 10: 53.9 | Wins: 5751 | 69.7%\n","Epoch: 8260/10000 | Mean size 10: 6.6 | Longest 10: 010 | Mean steps 10: 40.0 | Wins: 5761 | 69.7%\n","Epoch: 8270/10000 | Mean size 10: 7.2 | Longest 10: 009 | Mean steps 10: 48.3 | Wins: 5771 | 69.8%\n","Epoch: 8280/10000 | Mean size 10: 7.0 | Longest 10: 010 | Mean steps 10: 49.9 | Wins: 5781 | 69.8%\n","Epoch: 8290/10000 | Mean size 10: 7.8 | Longest 10: 011 | Mean steps 10: 52.4 | Wins: 5791 | 69.9%\n","Epoch: 8300/10000 | Mean size 10: 7.9 | Longest 10: 013 | Mean steps 10: 58.2 | Wins: 5801 | 69.9%\n","Epoch: 8310/10000 | Mean size 10: 6.5 | Longest 10: 010 | Mean steps 10: 37.5 | Wins: 5811 | 69.9%\n","Epoch: 8320/10000 | Mean size 10: 7.8 | Longest 10: 011 | Mean steps 10: 47.1 | Wins: 5821 | 70.0%\n","Epoch: 8330/10000 | Mean size 10: 7.3 | Longest 10: 010 | Mean steps 10: 49.1 | Wins: 5831 | 70.0%\n","Epoch: 8340/10000 | Mean size 10: 9.2 | Longest 10: 013 | Mean steps 10: 65.1 | Wins: 5841 | 70.0%\n","Epoch: 8350/10000 | Mean size 10: 6.6 | Longest 10: 011 | Mean steps 10: 40.6 | Wins: 5850 | 70.1%\n","Epoch: 8360/10000 | Mean size 10: 8.0 | Longest 10: 014 | Mean steps 10: 54.0 | Wins: 5860 | 70.1%\n","Epoch: 8370/10000 | Mean size 10: 6.9 | Longest 10: 010 | Mean steps 10: 34.2 | Wins: 5870 | 70.1%\n","Epoch: 8380/10000 | Mean size 10: 9.0 | Longest 10: 013 | Mean steps 10: 59.0 | Wins: 5880 | 70.2%\n","Epoch: 8390/10000 | Mean size 10: 7.6 | Longest 10: 010 | Mean steps 10: 58.0 | Wins: 5890 | 70.2%\n","Epoch: 8400/10000 | Mean size 10: 8.7 | Longest 10: 013 | Mean steps 10: 64.6 | Wins: 5900 | 70.2%\n","Epoch: 8410/10000 | Mean size 10: 7.4 | Longest 10: 010 | Mean steps 10: 45.4 | Wins: 5910 | 70.3%\n","Epoch: 8420/10000 | Mean size 10: 7.1 | Longest 10: 009 | Mean steps 10: 52.7 | Wins: 5920 | 70.3%\n","Epoch: 8430/10000 | Mean size 10: 8.5 | Longest 10: 011 | Mean steps 10: 55.3 | Wins: 5930 | 70.3%\n","Epoch: 8440/10000 | Mean size 10: 8.0 | Longest 10: 012 | Mean steps 10: 58.4 | Wins: 5940 | 70.4%\n","Epoch: 8450/10000 | Mean size 10: 7.7 | Longest 10: 010 | Mean steps 10: 46.3 | Wins: 5950 | 70.4%\n","Epoch: 8460/10000 | Mean size 10: 8.4 | Longest 10: 014 | Mean steps 10: 61.4 | Wins: 5960 | 70.4%\n","Epoch: 8470/10000 | Mean size 10: 7.9 | Longest 10: 013 | Mean steps 10: 59.8 | Wins: 5970 | 70.5%\n","Epoch: 8480/10000 | Mean size 10: 8.1 | Longest 10: 014 | Mean steps 10: 57.9 | Wins: 5980 | 70.5%\n","Epoch: 8490/10000 | Mean size 10: 9.7 | Longest 10: 014 | Mean steps 10: 74.4 | Wins: 5990 | 70.6%\n","Epoch: 8500/10000 | Mean size 10: 7.9 | Longest 10: 012 | Mean steps 10: 48.4 | Wins: 6000 | 70.6%\n","Epoch: 8510/10000 | Mean size 10: 8.3 | Longest 10: 013 | Mean steps 10: 62.3 | Wins: 6010 | 70.6%\n","Epoch: 8520/10000 | Mean size 10: 8.9 | Longest 10: 012 | Mean steps 10: 57.0 | Wins: 6020 | 70.7%\n","Epoch: 8530/10000 | Mean size 10: 9.1 | Longest 10: 014 | Mean steps 10: 60.2 | Wins: 6030 | 70.7%\n","Epoch: 8540/10000 | Mean size 10: 6.9 | Longest 10: 011 | Mean steps 10: 54.4 | Wins: 6040 | 70.7%\n","Epoch: 8550/10000 | Mean size 10: 7.8 | Longest 10: 010 | Mean steps 10: 52.0 | Wins: 6050 | 70.8%\n","Epoch: 8560/10000 | Mean size 10: 7.8 | Longest 10: 015 | Mean steps 10: 57.4 | Wins: 6059 | 70.8%\n","Epoch: 8570/10000 | Mean size 10: 7.4 | Longest 10: 011 | Mean steps 10: 44.2 | Wins: 6069 | 70.8%\n","Epoch: 8580/10000 | Mean size 10: 7.9 | Longest 10: 012 | Mean steps 10: 51.5 | Wins: 6079 | 70.9%\n","Epoch: 8590/10000 | Mean size 10: 8.9 | Longest 10: 014 | Mean steps 10: 59.1 | Wins: 6089 | 70.9%\n","Epoch: 8600/10000 | Mean size 10: 8.2 | Longest 10: 015 | Mean steps 10: 48.0 | Wins: 6099 | 70.9%\n","Epoch: 8610/10000 | Mean size 10: 8.4 | Longest 10: 015 | Mean steps 10: 51.7 | Wins: 6109 | 71.0%\n","Epoch: 8620/10000 | Mean size 10: 6.7 | Longest 10: 010 | Mean steps 10: 36.5 | Wins: 6119 | 71.0%\n","Epoch: 8630/10000 | Mean size 10: 7.1 | Longest 10: 010 | Mean steps 10: 43.5 | Wins: 6129 | 71.0%\n","Epoch: 8640/10000 | Mean size 10: 8.4 | Longest 10: 012 | Mean steps 10: 57.0 | Wins: 6139 | 71.1%\n","Epoch: 8650/10000 | Mean size 10: 8.3 | Longest 10: 015 | Mean steps 10: 63.4 | Wins: 6149 | 71.1%\n","Epoch: 8660/10000 | Mean size 10: 8.0 | Longest 10: 012 | Mean steps 10: 49.7 | Wins: 6159 | 71.1%\n","Epoch: 8670/10000 | Mean size 10: 7.5 | Longest 10: 010 | Mean steps 10: 48.4 | Wins: 6169 | 71.2%\n","Epoch: 8680/10000 | Mean size 10: 8.2 | Longest 10: 014 | Mean steps 10: 55.3 | Wins: 6179 | 71.2%\n","Epoch: 8690/10000 | Mean size 10: 7.4 | Longest 10: 015 | Mean steps 10: 45.0 | Wins: 6189 | 71.2%\n","Epoch: 8700/10000 | Mean size 10: 7.8 | Longest 10: 011 | Mean steps 10: 48.6 | Wins: 6199 | 71.3%\n","Epoch: 8710/10000 | Mean size 10: 7.8 | Longest 10: 012 | Mean steps 10: 42.3 | Wins: 6209 | 71.3%\n","Epoch: 8720/10000 | Mean size 10: 8.2 | Longest 10: 014 | Mean steps 10: 59.5 | Wins: 6219 | 71.3%\n","Epoch: 8730/10000 | Mean size 10: 9.0 | Longest 10: 013 | Mean steps 10: 59.7 | Wins: 6229 | 71.4%\n","Epoch: 8740/10000 | Mean size 10: 9.5 | Longest 10: 016 | Mean steps 10: 67.1 | Wins: 6239 | 71.4%\n","Epoch: 8750/10000 | Mean size 10: 7.6 | Longest 10: 010 | Mean steps 10: 52.3 | Wins: 6249 | 71.4%\n","Epoch: 8760/10000 | Mean size 10: 8.8 | Longest 10: 012 | Mean steps 10: 63.7 | Wins: 6259 | 71.4%\n","Epoch: 8770/10000 | Mean size 10: 8.8 | Longest 10: 012 | Mean steps 10: 64.8 | Wins: 6269 | 71.5%\n","Epoch: 8780/10000 | Mean size 10: 7.7 | Longest 10: 011 | Mean steps 10: 48.3 | Wins: 6279 | 71.5%\n","Epoch: 8790/10000 | Mean size 10: 9.3 | Longest 10: 014 | Mean steps 10: 64.0 | Wins: 6289 | 71.5%\n","Epoch: 8800/10000 | Mean size 10: 8.0 | Longest 10: 010 | Mean steps 10: 42.1 | Wins: 6299 | 71.6%\n","Epoch: 8810/10000 | Mean size 10: 7.5 | Longest 10: 010 | Mean steps 10: 43.4 | Wins: 6309 | 71.6%\n","Epoch: 8820/10000 | Mean size 10: 8.8 | Longest 10: 013 | Mean steps 10: 63.2 | Wins: 6319 | 71.6%\n","Epoch: 8830/10000 | Mean size 10: 7.7 | Longest 10: 012 | Mean steps 10: 58.5 | Wins: 6329 | 71.7%\n","Epoch: 8840/10000 | Mean size 10: 8.5 | Longest 10: 014 | Mean steps 10: 56.2 | Wins: 6339 | 71.7%\n","Epoch: 8850/10000 | Mean size 10: 8.2 | Longest 10: 014 | Mean steps 10: 57.0 | Wins: 6348 | 71.7%\n","Epoch: 8860/10000 | Mean size 10: 8.7 | Longest 10: 013 | Mean steps 10: 63.3 | Wins: 6358 | 71.8%\n","Epoch: 8870/10000 | Mean size 10: 9.0 | Longest 10: 013 | Mean steps 10: 57.2 | Wins: 6368 | 71.8%\n","Epoch: 8880/10000 | Mean size 10: 9.9 | Longest 10: 016 | Mean steps 10: 79.0 | Wins: 6378 | 71.8%\n","Epoch: 8890/10000 | Mean size 10: 9.0 | Longest 10: 011 | Mean steps 10: 71.1 | Wins: 6388 | 71.9%\n","Epoch: 8900/10000 | Mean size 10: 8.8 | Longest 10: 013 | Mean steps 10: 62.5 | Wins: 6398 | 71.9%\n","Epoch: 8910/10000 | Mean size 10: 8.5 | Longest 10: 012 | Mean steps 10: 57.6 | Wins: 6408 | 71.9%\n","Epoch: 8920/10000 | Mean size 10: 10.2 | Longest 10: 015 | Mean steps 10: 69.6 | Wins: 6418 | 72.0%\n","Epoch: 8930/10000 | Mean size 10: 8.8 | Longest 10: 012 | Mean steps 10: 60.0 | Wins: 6428 | 72.0%\n","Epoch: 8940/10000 | Mean size 10: 8.0 | Longest 10: 010 | Mean steps 10: 45.3 | Wins: 6438 | 72.0%\n","Epoch: 8950/10000 | Mean size 10: 8.1 | Longest 10: 012 | Mean steps 10: 48.1 | Wins: 6448 | 72.0%\n","Epoch: 8960/10000 | Mean size 10: 8.3 | Longest 10: 012 | Mean steps 10: 53.7 | Wins: 6458 | 72.1%\n","Epoch: 8970/10000 | Mean size 10: 10.5 | Longest 10: 015 | Mean steps 10: 79.8 | Wins: 6468 | 72.1%\n","Epoch: 8980/10000 | Mean size 10: 10.0 | Longest 10: 014 | Mean steps 10: 86.9 | Wins: 6478 | 72.1%\n","Epoch: 8990/10000 | Mean size 10: 9.7 | Longest 10: 014 | Mean steps 10: 74.8 | Wins: 6488 | 72.2%\n","Epoch: 9000/10000 | Mean size 10: 7.2 | Longest 10: 009 | Mean steps 10: 39.0 | Wins: 6498 | 72.2%\n","Epoch: 9010/10000 | Mean size 10: 8.9 | Longest 10: 015 | Mean steps 10: 60.0 | Wins: 6508 | 72.2%\n","Epoch: 9020/10000 | Mean size 10: 8.9 | Longest 10: 014 | Mean steps 10: 56.7 | Wins: 6518 | 72.3%\n","Epoch: 9030/10000 | Mean size 10: 9.5 | Longest 10: 016 | Mean steps 10: 62.1 | Wins: 6528 | 72.3%\n","Epoch: 9040/10000 | Mean size 10: 8.4 | Longest 10: 013 | Mean steps 10: 54.5 | Wins: 6538 | 72.3%\n","Epoch: 9050/10000 | Mean size 10: 9.6 | Longest 10: 014 | Mean steps 10: 75.2 | Wins: 6548 | 72.4%\n","Epoch: 9060/10000 | Mean size 10: 8.0 | Longest 10: 011 | Mean steps 10: 51.7 | Wins: 6558 | 72.4%\n","Epoch: 9070/10000 | Mean size 10: 8.5 | Longest 10: 011 | Mean steps 10: 57.2 | Wins: 6568 | 72.4%\n","Epoch: 9080/10000 | Mean size 10: 10.0 | Longest 10: 012 | Mean steps 10: 72.8 | Wins: 6578 | 72.4%\n","Epoch: 9090/10000 | Mean size 10: 8.6 | Longest 10: 013 | Mean steps 10: 60.9 | Wins: 6588 | 72.5%\n","Epoch: 9100/10000 | Mean size 10: 8.8 | Longest 10: 014 | Mean steps 10: 51.3 | Wins: 6598 | 72.5%\n","Epoch: 9110/10000 | Mean size 10: 8.3 | Longest 10: 011 | Mean steps 10: 47.8 | Wins: 6608 | 72.5%\n","Epoch: 9120/10000 | Mean size 10: 8.6 | Longest 10: 014 | Mean steps 10: 52.8 | Wins: 6618 | 72.6%\n","Epoch: 9130/10000 | Mean size 10: 9.3 | Longest 10: 014 | Mean steps 10: 67.9 | Wins: 6628 | 72.6%\n","Epoch: 9140/10000 | Mean size 10: 8.3 | Longest 10: 014 | Mean steps 10: 57.1 | Wins: 6638 | 72.6%\n","Epoch: 9150/10000 | Mean size 10: 9.7 | Longest 10: 016 | Mean steps 10: 68.6 | Wins: 6648 | 72.7%\n","Epoch: 9160/10000 | Mean size 10: 7.2 | Longest 10: 010 | Mean steps 10: 42.4 | Wins: 6658 | 72.7%\n","Epoch: 9170/10000 | Mean size 10: 8.7 | Longest 10: 012 | Mean steps 10: 48.1 | Wins: 6668 | 72.7%\n","Epoch: 9180/10000 | Mean size 10: 8.8 | Longest 10: 014 | Mean steps 10: 53.0 | Wins: 6678 | 72.7%\n","Epoch: 9190/10000 | Mean size 10: 8.7 | Longest 10: 017 | Mean steps 10: 60.3 | Wins: 6688 | 72.8%\n","Epoch: 9200/10000 | Mean size 10: 8.2 | Longest 10: 012 | Mean steps 10: 56.1 | Wins: 6698 | 72.8%\n","Epoch: 9210/10000 | Mean size 10: 10.1 | Longest 10: 017 | Mean steps 10: 75.6 | Wins: 6708 | 72.8%\n","Epoch: 9220/10000 | Mean size 10: 9.6 | Longest 10: 015 | Mean steps 10: 68.4 | Wins: 6718 | 72.9%\n","Epoch: 9230/10000 | Mean size 10: 9.4 | Longest 10: 014 | Mean steps 10: 62.6 | Wins: 6728 | 72.9%\n","Epoch: 9240/10000 | Mean size 10: 8.0 | Longest 10: 011 | Mean steps 10: 47.7 | Wins: 6738 | 72.9%\n","Epoch: 9250/10000 | Mean size 10: 9.3 | Longest 10: 015 | Mean steps 10: 61.7 | Wins: 6748 | 73.0%\n","Epoch: 9260/10000 | Mean size 10: 9.7 | Longest 10: 015 | Mean steps 10: 70.2 | Wins: 6758 | 73.0%\n","Epoch: 9270/10000 | Mean size 10: 8.7 | Longest 10: 015 | Mean steps 10: 56.9 | Wins: 6768 | 73.0%\n","Epoch: 9280/10000 | Mean size 10: 7.0 | Longest 10: 012 | Mean steps 10: 40.9 | Wins: 6778 | 73.0%\n","Epoch: 9290/10000 | Mean size 10: 8.5 | Longest 10: 012 | Mean steps 10: 50.6 | Wins: 6788 | 73.1%\n","Epoch: 9300/10000 | Mean size 10: 9.2 | Longest 10: 013 | Mean steps 10: 63.8 | Wins: 6798 | 73.1%\n","Epoch: 9310/10000 | Mean size 10: 10.7 | Longest 10: 015 | Mean steps 10: 81.4 | Wins: 6808 | 73.1%\n","Epoch: 9320/10000 | Mean size 10: 9.5 | Longest 10: 013 | Mean steps 10: 63.4 | Wins: 6818 | 73.2%\n","Epoch: 9330/10000 | Mean size 10: 10.6 | Longest 10: 014 | Mean steps 10: 73.0 | Wins: 6828 | 73.2%\n","Epoch: 9340/10000 | Mean size 10: 8.8 | Longest 10: 015 | Mean steps 10: 52.7 | Wins: 6838 | 73.2%\n","Epoch: 9350/10000 | Mean size 10: 10.0 | Longest 10: 013 | Mean steps 10: 73.4 | Wins: 6848 | 73.2%\n","Epoch: 9360/10000 | Mean size 10: 8.6 | Longest 10: 011 | Mean steps 10: 49.0 | Wins: 6858 | 73.3%\n","Epoch: 9370/10000 | Mean size 10: 8.6 | Longest 10: 015 | Mean steps 10: 50.4 | Wins: 6868 | 73.3%\n","Epoch: 9380/10000 | Mean size 10: 10.6 | Longest 10: 016 | Mean steps 10: 71.8 | Wins: 6878 | 73.3%\n","Epoch: 9390/10000 | Mean size 10: 8.9 | Longest 10: 012 | Mean steps 10: 57.8 | Wins: 6888 | 73.4%\n","Epoch: 9400/10000 | Mean size 10: 8.9 | Longest 10: 013 | Mean steps 10: 57.4 | Wins: 6898 | 73.4%\n","Epoch: 9410/10000 | Mean size 10: 9.8 | Longest 10: 015 | Mean steps 10: 71.3 | Wins: 6908 | 73.4%\n","Epoch: 9420/10000 | Mean size 10: 8.2 | Longest 10: 014 | Mean steps 10: 52.4 | Wins: 6917 | 73.4%\n","Epoch: 9430/10000 | Mean size 10: 8.6 | Longest 10: 012 | Mean steps 10: 53.1 | Wins: 6927 | 73.5%\n","Epoch: 9440/10000 | Mean size 10: 10.4 | Longest 10: 016 | Mean steps 10: 80.2 | Wins: 6937 | 73.5%\n","Epoch: 9450/10000 | Mean size 10: 9.1 | Longest 10: 013 | Mean steps 10: 62.5 | Wins: 6947 | 73.5%\n","Epoch: 9460/10000 | Mean size 10: 8.5 | Longest 10: 014 | Mean steps 10: 63.3 | Wins: 6957 | 73.5%\n","Epoch: 9470/10000 | Mean size 10: 7.3 | Longest 10: 012 | Mean steps 10: 40.2 | Wins: 6967 | 73.6%\n","Epoch: 9480/10000 | Mean size 10: 11.0 | Longest 10: 015 | Mean steps 10: 84.2 | Wins: 6977 | 73.6%\n","Epoch: 9490/10000 | Mean size 10: 8.6 | Longest 10: 014 | Mean steps 10: 55.2 | Wins: 6987 | 73.6%\n","Epoch: 9500/10000 | Mean size 10: 10.9 | Longest 10: 017 | Mean steps 10: 76.9 | Wins: 6997 | 73.7%\n","Epoch: 9510/10000 | Mean size 10: 8.1 | Longest 10: 013 | Mean steps 10: 52.4 | Wins: 7007 | 73.7%\n","Epoch: 9520/10000 | Mean size 10: 10.0 | Longest 10: 013 | Mean steps 10: 69.2 | Wins: 7017 | 73.7%\n","Epoch: 9530/10000 | Mean size 10: 10.3 | Longest 10: 016 | Mean steps 10: 78.9 | Wins: 7027 | 73.7%\n","Epoch: 9540/10000 | Mean size 10: 9.0 | Longest 10: 013 | Mean steps 10: 60.8 | Wins: 7037 | 73.8%\n","Epoch: 9550/10000 | Mean size 10: 9.4 | Longest 10: 013 | Mean steps 10: 66.1 | Wins: 7047 | 73.8%\n","Epoch: 9560/10000 | Mean size 10: 9.8 | Longest 10: 013 | Mean steps 10: 65.6 | Wins: 7057 | 73.8%\n","Epoch: 9570/10000 | Mean size 10: 10.5 | Longest 10: 014 | Mean steps 10: 72.9 | Wins: 7067 | 73.8%\n","Epoch: 9580/10000 | Mean size 10: 10.1 | Longest 10: 015 | Mean steps 10: 74.0 | Wins: 7077 | 73.9%\n","Epoch: 9590/10000 | Mean size 10: 9.3 | Longest 10: 015 | Mean steps 10: 58.9 | Wins: 7087 | 73.9%\n","Epoch: 9600/10000 | Mean size 10: 10.0 | Longest 10: 018 | Mean steps 10: 63.6 | Wins: 7097 | 73.9%\n","Epoch: 9610/10000 | Mean size 10: 9.8 | Longest 10: 016 | Mean steps 10: 65.2 | Wins: 7107 | 74.0%\n","Epoch: 9620/10000 | Mean size 10: 9.9 | Longest 10: 015 | Mean steps 10: 70.3 | Wins: 7117 | 74.0%\n","Epoch: 9630/10000 | Mean size 10: 10.9 | Longest 10: 018 | Mean steps 10: 73.2 | Wins: 7127 | 74.0%\n","Epoch: 9640/10000 | Mean size 10: 9.2 | Longest 10: 013 | Mean steps 10: 60.9 | Wins: 7137 | 74.0%\n","Epoch: 9650/10000 | Mean size 10: 9.6 | Longest 10: 016 | Mean steps 10: 64.3 | Wins: 7147 | 74.1%\n","Epoch: 9660/10000 | Mean size 10: 9.5 | Longest 10: 013 | Mean steps 10: 57.7 | Wins: 7157 | 74.1%\n","Epoch: 9670/10000 | Mean size 10: 8.0 | Longest 10: 013 | Mean steps 10: 48.6 | Wins: 7167 | 74.1%\n","Epoch: 9680/10000 | Mean size 10: 9.0 | Longest 10: 014 | Mean steps 10: 59.6 | Wins: 7176 | 74.1%\n","Epoch: 9690/10000 | Mean size 10: 9.6 | Longest 10: 016 | Mean steps 10: 58.7 | Wins: 7186 | 74.2%\n","Epoch: 9700/10000 | Mean size 10: 8.6 | Longest 10: 012 | Mean steps 10: 62.1 | Wins: 7196 | 74.2%\n","Epoch: 9710/10000 | Mean size 10: 9.7 | Longest 10: 014 | Mean steps 10: 72.5 | Wins: 7206 | 74.2%\n","Epoch: 9720/10000 | Mean size 10: 10.4 | Longest 10: 015 | Mean steps 10: 64.9 | Wins: 7216 | 74.2%\n","Epoch: 9730/10000 | Mean size 10: 9.2 | Longest 10: 015 | Mean steps 10: 60.7 | Wins: 7226 | 74.3%\n","Epoch: 9740/10000 | Mean size 10: 8.0 | Longest 10: 011 | Mean steps 10: 52.7 | Wins: 7236 | 74.3%\n","Epoch: 9750/10000 | Mean size 10: 10.9 | Longest 10: 016 | Mean steps 10: 75.2 | Wins: 7246 | 74.3%\n","Epoch: 9760/10000 | Mean size 10: 9.4 | Longest 10: 017 | Mean steps 10: 68.0 | Wins: 7256 | 74.3%\n","Epoch: 9770/10000 | Mean size 10: 10.1 | Longest 10: 016 | Mean steps 10: 63.6 | Wins: 7266 | 74.4%\n","Epoch: 9780/10000 | Mean size 10: 12.4 | Longest 10: 017 | Mean steps 10: 88.5 | Wins: 7276 | 74.4%\n","Epoch: 9790/10000 | Mean size 10: 12.0 | Longest 10: 017 | Mean steps 10: 87.0 | Wins: 7286 | 74.4%\n","Epoch: 9800/10000 | Mean size 10: 10.5 | Longest 10: 014 | Mean steps 10: 69.5 | Wins: 7296 | 74.4%\n","Epoch: 9810/10000 | Mean size 10: 8.9 | Longest 10: 015 | Mean steps 10: 52.7 | Wins: 7306 | 74.5%\n","Epoch: 9820/10000 | Mean size 10: 11.5 | Longest 10: 015 | Mean steps 10: 89.9 | Wins: 7316 | 74.5%\n","Epoch: 9830/10000 | Mean size 10: 10.4 | Longest 10: 016 | Mean steps 10: 65.1 | Wins: 7326 | 74.5%\n","Epoch: 9840/10000 | Mean size 10: 8.0 | Longest 10: 013 | Mean steps 10: 43.8 | Wins: 7336 | 74.6%\n","Epoch: 9850/10000 | Mean size 10: 8.4 | Longest 10: 016 | Mean steps 10: 45.2 | Wins: 7346 | 74.6%\n","Epoch: 9860/10000 | Mean size 10: 11.9 | Longest 10: 017 | Mean steps 10: 87.4 | Wins: 7356 | 74.6%\n","Epoch: 9870/10000 | Mean size 10: 8.0 | Longest 10: 013 | Mean steps 10: 44.6 | Wins: 7366 | 74.6%\n","Epoch: 9880/10000 | Mean size 10: 12.1 | Longest 10: 019 | Mean steps 10: 95.7 | Wins: 7376 | 74.7%\n","Epoch: 9890/10000 | Mean size 10: 10.2 | Longest 10: 016 | Mean steps 10: 66.9 | Wins: 7386 | 74.7%\n","Epoch: 9900/10000 | Mean size 10: 11.2 | Longest 10: 016 | Mean steps 10: 73.8 | Wins: 7396 | 74.7%\n","Epoch: 9910/10000 | Mean size 10: 10.8 | Longest 10: 017 | Mean steps 10: 68.8 | Wins: 7406 | 74.7%\n","Epoch: 9920/10000 | Mean size 10: 10.3 | Longest 10: 015 | Mean steps 10: 72.3 | Wins: 7416 | 74.8%\n","Epoch: 9930/10000 | Mean size 10: 11.5 | Longest 10: 015 | Mean steps 10: 80.3 | Wins: 7426 | 74.8%\n","Epoch: 9940/10000 | Mean size 10: 10.4 | Longest 10: 017 | Mean steps 10: 69.9 | Wins: 7436 | 74.8%\n","Epoch: 9950/10000 | Mean size 10: 11.2 | Longest 10: 015 | Mean steps 10: 87.2 | Wins: 7446 | 74.8%\n","Epoch: 9960/10000 | Mean size 10: 9.3 | Longest 10: 014 | Mean steps 10: 53.1 | Wins: 7456 | 74.9%\n","Epoch: 9970/10000 | Mean size 10: 10.0 | Longest 10: 014 | Mean steps 10: 59.8 | Wins: 7466 | 74.9%\n","Epoch: 9980/10000 | Mean size 10: 12.1 | Longest 10: 019 | Mean steps 10: 79.1 | Wins: 7476 | 74.9%\n","Epoch: 9990/10000 | Mean size 10: 9.7 | Longest 10: 016 | Mean steps 10: 68.6 | Wins: 7486 | 74.9%\n","Epoch: 10000/10000 | Mean size 10: 11.6 | Longest 10: 016 | Mean steps 10: 89.7 | Wins: 7496 | 75.0%\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"c_gQJ5FSvivj","colab":{"base_uri":"https://localhost:8080/","height":231},"executionInfo":{"status":"error","timestamp":1613522484322,"user_tz":180,"elapsed":334,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}},"outputId":"1a471dd4-db20-4365-dbd2-c0bf36160581"},"source":["model = create_model(optimizer = RMSprop(), loss = tf.losses.Huber(),\n","                     stack = nb_frames, input_size = board_size,\n","                     output_size = game.nb_actions)\n","function = keras.models.load_model('keras.h5', \n","                                   custom_objects = {'huber_loss': tf.losses.Huber(),\n","                                                     'NoisyDenseFG': NoisyDenseFG})\n","\n","model.set_weights(function.get_weights())\n","    \n","board_size = 10\n","nb_frames = 4\n","nb_actions = 5\n","\n","agent = Agent(model = model, target = None, memory_size = -1,\n","              nb_frames = nb_frames, board_size = board_size, per = False)\n","\n","agent.test(game, visual = False, nb_epoch = 10000)"],"execution_count":20,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-bb852c9f87be>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m model = create_model(optimizer = RMSprop(), loss = tf.losses.Huber(),\n\u001b[0;32m----> 2\u001b[0;31m                      \u001b[0mstack\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnb_frames\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_size\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mboard_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m                      output_size = game.nb_actions)\n\u001b[1;32m      4\u001b[0m function = keras.models.load_model('keras.h5', \n\u001b[1;32m      5\u001b[0m                                    custom_objects = {'huber_loss': tf.losses.Huber(),\n","\u001b[0;31mNameError\u001b[0m: name 'nb_frames' is not defined"]}]},{"cell_type":"code","metadata":{"id":"AuYPlAtY-kOA","executionInfo":{"status":"aborted","timestamp":1613522484324,"user_tz":180,"elapsed":13,"user":{"displayName":"Dam치sio Palmas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi3h0z8B42F1MC7aher_B8a4iAYiDGbOLgWqHvQ=s64","userId":"15339542767479210112"}}},"source":["#@title save yo data to drive\n","from google.colab import files\n","from google.colab import auth\n","from googleapiclient.http import MediaFileUpload\n","from googleapiclient.discovery import build\n","\n","def save_file_to_drive(name, path):\n","    file_metadata = {\n","    'name': name,\n","    'mimeType': 'application/octet-stream'\n","    }\n","\n","    media = MediaFileUpload(path, \n","                        mimetype='application/octet-stream',\n","                        resumable=True)\n","\n","    created = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()\n","\n","    print('File ID: {}'.format(created.get('id')))\n","\n","    return created\n","\n","\n","# !rm -rf $zip_file\n","#!ls | grep keras_ | zip -@ zip_file # FOLDERS TO SAVE INTO ZIP FILE\n","!zip -r keras_epsgreedy_dueling_3steps_dqn.zip keras_model.h5 keras_training_data.csv\n","from google.colab import files\n","files.download('keras_epsgreedy_dueling_3steps_dqn.zip')\n","auth.authenticate_user()\n","drive_service = build('drive', 'v3')\n","\n","destination_name = 'keras_epsgreedy_dueling_3steps_dqn.zip'\n","path_to_file = 'keras_epsgreedy_dueling_3steps_dqn.zip'\n","save_file_to_drive(destination_name, path_to_file)"],"execution_count":null,"outputs":[]}]}